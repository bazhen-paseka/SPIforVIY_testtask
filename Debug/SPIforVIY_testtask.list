
SPIforVIY_testtask.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b18  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08002c24  08002c24  00012c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002cac  08002cac  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002cac  08002cac  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002cac  08002cac  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002cac  08002cac  00012cac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002cb0  08002cb0  00012cb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002cb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  20000070  08002d24  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000194  08002d24  00020194  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007fe3  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cc7  00000000  00000000  0002807c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008e8  00000000  00000000  00029d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000810  00000000  00000000  0002a630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001797b  00000000  00000000  0002ae40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aaf7  00000000  00000000  000427bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083f84  00000000  00000000  0004d2b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d1236  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026cc  00000000  00000000  000d1288  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002c0c 	.word	0x08002c0c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002c0c 	.word	0x08002c0c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000162:	4b0c      	ldr	r3, [pc, #48]	; (8000194 <MX_DMA_Init+0x38>)
 8000164:	695b      	ldr	r3, [r3, #20]
 8000166:	4a0b      	ldr	r2, [pc, #44]	; (8000194 <MX_DMA_Init+0x38>)
 8000168:	f043 0301 	orr.w	r3, r3, #1
 800016c:	6153      	str	r3, [r2, #20]
 800016e:	4b09      	ldr	r3, [pc, #36]	; (8000194 <MX_DMA_Init+0x38>)
 8000170:	695b      	ldr	r3, [r3, #20]
 8000172:	f003 0301 	and.w	r3, r3, #1
 8000176:	607b      	str	r3, [r7, #4]
 8000178:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800017a:	2200      	movs	r2, #0
 800017c:	2100      	movs	r1, #0
 800017e:	200d      	movs	r0, #13
 8000180:	f000 fc5d 	bl	8000a3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000184:	200d      	movs	r0, #13
 8000186:	f000 fc76 	bl	8000a76 <HAL_NVIC_EnableIRQ>

}
 800018a:	bf00      	nop
 800018c:	3708      	adds	r7, #8
 800018e:	46bd      	mov	sp, r7
 8000190:	bd80      	pop	{r7, pc}
 8000192:	bf00      	nop
 8000194:	40021000 	.word	0x40021000

08000198 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b086      	sub	sp, #24
 800019c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800019e:	f107 0308 	add.w	r3, r7, #8
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
 80001a6:	605a      	str	r2, [r3, #4]
 80001a8:	609a      	str	r2, [r3, #8]
 80001aa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001ac:	4b17      	ldr	r3, [pc, #92]	; (800020c <MX_GPIO_Init+0x74>)
 80001ae:	699b      	ldr	r3, [r3, #24]
 80001b0:	4a16      	ldr	r2, [pc, #88]	; (800020c <MX_GPIO_Init+0x74>)
 80001b2:	f043 0320 	orr.w	r3, r3, #32
 80001b6:	6193      	str	r3, [r2, #24]
 80001b8:	4b14      	ldr	r3, [pc, #80]	; (800020c <MX_GPIO_Init+0x74>)
 80001ba:	699b      	ldr	r3, [r3, #24]
 80001bc:	f003 0320 	and.w	r3, r3, #32
 80001c0:	607b      	str	r3, [r7, #4]
 80001c2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001c4:	4b11      	ldr	r3, [pc, #68]	; (800020c <MX_GPIO_Init+0x74>)
 80001c6:	699b      	ldr	r3, [r3, #24]
 80001c8:	4a10      	ldr	r2, [pc, #64]	; (800020c <MX_GPIO_Init+0x74>)
 80001ca:	f043 0304 	orr.w	r3, r3, #4
 80001ce:	6193      	str	r3, [r2, #24]
 80001d0:	4b0e      	ldr	r3, [pc, #56]	; (800020c <MX_GPIO_Init+0x74>)
 80001d2:	699b      	ldr	r3, [r3, #24]
 80001d4:	f003 0304 	and.w	r3, r3, #4
 80001d8:	603b      	str	r3, [r7, #0]
 80001da:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80001dc:	2200      	movs	r2, #0
 80001de:	2102      	movs	r1, #2
 80001e0:	480b      	ldr	r0, [pc, #44]	; (8000210 <MX_GPIO_Init+0x78>)
 80001e2:	f000 ffd5 	bl	8001190 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80001e6:	2302      	movs	r3, #2
 80001e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001ea:	2301      	movs	r3, #1
 80001ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001ee:	2300      	movs	r3, #0
 80001f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001f2:	2302      	movs	r3, #2
 80001f4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80001f6:	f107 0308 	add.w	r3, r7, #8
 80001fa:	4619      	mov	r1, r3
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <MX_GPIO_Init+0x78>)
 80001fe:	f000 fe43 	bl	8000e88 <HAL_GPIO_Init>

}
 8000202:	bf00      	nop
 8000204:	3718      	adds	r7, #24
 8000206:	46bd      	mov	sp, r7
 8000208:	bd80      	pop	{r7, pc}
 800020a:	bf00      	nop
 800020c:	40021000 	.word	0x40021000
 8000210:	40010800 	.word	0x40010800

08000214 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b0c0      	sub	sp, #256	; 0x100
 8000218:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021a:	f000 fab3 	bl	8000784 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800021e:	f000 f86b 	bl	80002f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000222:	f7ff ffb9 	bl	8000198 <MX_GPIO_Init>
  MX_DMA_Init();
 8000226:	f7ff ff99 	bl	800015c <MX_DMA_Init>
  MX_USART1_UART_Init();
 800022a:	f000 fa0f 	bl	800064c <MX_USART1_UART_Init>
  MX_SPI1_Init();
 800022e:	f000 f8c3 	bl	80003b8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  	char DataChar[0xFF];
	sprintf(DataChar,"\r\n\tSPI for VIY\r\n\r\n" );
 8000232:	463b      	mov	r3, r7
 8000234:	4929      	ldr	r1, [pc, #164]	; (80002dc <main+0xc8>)
 8000236:	4618      	mov	r0, r3
 8000238:	f002 f86e 	bl	8002318 <siprintf>
	HAL_UART_Transmit( &huart1, (uint8_t *)DataChar , strlen(DataChar) , 100 ) ;
 800023c:	463b      	mov	r3, r7
 800023e:	4618      	mov	r0, r3
 8000240:	f7ff ff84 	bl	800014c <strlen>
 8000244:	4603      	mov	r3, r0
 8000246:	b29a      	uxth	r2, r3
 8000248:	4639      	mov	r1, r7
 800024a:	2364      	movs	r3, #100	; 0x64
 800024c:	4824      	ldr	r0, [pc, #144]	; (80002e0 <main+0xcc>)
 800024e:	f001 fe92 	bl	8001f76 <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	for (uint8_t i = 0; i < SPI_BUFFER_SIZE; i++) {
 8000252:	2300      	movs	r3, #0
 8000254:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
 8000258:	e00c      	b.n	8000274 <main+0x60>
		tx_buffer_u8[i] = 0x30 + i ;
 800025a:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 800025e:	f897 20ff 	ldrb.w	r2, [r7, #255]	; 0xff
 8000262:	3230      	adds	r2, #48	; 0x30
 8000264:	b2d1      	uxtb	r1, r2
 8000266:	4a1f      	ldr	r2, [pc, #124]	; (80002e4 <main+0xd0>)
 8000268:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < SPI_BUFFER_SIZE; i++) {
 800026a:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 800026e:	3301      	adds	r3, #1
 8000270:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
 8000274:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 8000278:	2b0f      	cmp	r3, #15
 800027a:	d9ee      	bls.n	800025a <main+0x46>
	}
	sprintf(DataChar,"\r\n\r\nSPI_Tx_DMA:\t" ) ;
 800027c:	463b      	mov	r3, r7
 800027e:	491a      	ldr	r1, [pc, #104]	; (80002e8 <main+0xd4>)
 8000280:	4618      	mov	r0, r3
 8000282:	f002 f849 	bl	8002318 <siprintf>
	HAL_UART_Transmit( &huart1, (uint8_t *)DataChar , strlen(DataChar) , 100 ) ;
 8000286:	463b      	mov	r3, r7
 8000288:	4618      	mov	r0, r3
 800028a:	f7ff ff5f 	bl	800014c <strlen>
 800028e:	4603      	mov	r3, r0
 8000290:	b29a      	uxth	r2, r3
 8000292:	4639      	mov	r1, r7
 8000294:	2364      	movs	r3, #100	; 0x64
 8000296:	4812      	ldr	r0, [pc, #72]	; (80002e0 <main+0xcc>)
 8000298:	f001 fe6d 	bl	8001f76 <HAL_UART_Transmit>
	snprintf(DataChar, SPI_BUFFER_SIZE , "%s", tx_buffer_u8 ) ;
 800029c:	4638      	mov	r0, r7
 800029e:	4b11      	ldr	r3, [pc, #68]	; (80002e4 <main+0xd0>)
 80002a0:	4a12      	ldr	r2, [pc, #72]	; (80002ec <main+0xd8>)
 80002a2:	2110      	movs	r1, #16
 80002a4:	f002 f804 	bl	80022b0 <sniprintf>
	HAL_UART_Transmit( &huart1, (uint8_t *)DataChar , strlen(DataChar) , 100 ) ;
 80002a8:	463b      	mov	r3, r7
 80002aa:	4618      	mov	r0, r3
 80002ac:	f7ff ff4e 	bl	800014c <strlen>
 80002b0:	4603      	mov	r3, r0
 80002b2:	b29a      	uxth	r2, r3
 80002b4:	4639      	mov	r1, r7
 80002b6:	2364      	movs	r3, #100	; 0x64
 80002b8:	4809      	ldr	r0, [pc, #36]	; (80002e0 <main+0xcc>)
 80002ba:	f001 fe5c 	bl	8001f76 <HAL_UART_Transmit>

	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, RESET);
 80002be:	2200      	movs	r2, #0
 80002c0:	2102      	movs	r1, #2
 80002c2:	480b      	ldr	r0, [pc, #44]	; (80002f0 <main+0xdc>)
 80002c4:	f000 ff64 	bl	8001190 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(&hspi1, tx_buffer_u8, SPI_BUFFER_SIZE);
 80002c8:	2210      	movs	r2, #16
 80002ca:	4906      	ldr	r1, [pc, #24]	; (80002e4 <main+0xd0>)
 80002cc:	4809      	ldr	r0, [pc, #36]	; (80002f4 <main+0xe0>)
 80002ce:	f001 fc15 	bl	8001afc <HAL_SPI_Transmit_DMA>

	HAL_Delay(1000);
 80002d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002d6:	f000 fab7 	bl	8000848 <HAL_Delay>
	for (uint8_t i = 0; i < SPI_BUFFER_SIZE; i++) {
 80002da:	e7ba      	b.n	8000252 <main+0x3e>
 80002dc:	08002c24 	.word	0x08002c24
 80002e0:	2000013c 	.word	0x2000013c
 80002e4:	2000008c 	.word	0x2000008c
 80002e8:	08002c38 	.word	0x08002c38
 80002ec:	08002c4c 	.word	0x08002c4c
 80002f0:	40010800 	.word	0x40010800
 80002f4:	2000009c 	.word	0x2000009c

080002f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b090      	sub	sp, #64	; 0x40
 80002fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002fe:	f107 0318 	add.w	r3, r7, #24
 8000302:	2228      	movs	r2, #40	; 0x28
 8000304:	2100      	movs	r1, #0
 8000306:	4618      	mov	r0, r3
 8000308:	f001 ffca 	bl	80022a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800030c:	1d3b      	adds	r3, r7, #4
 800030e:	2200      	movs	r2, #0
 8000310:	601a      	str	r2, [r3, #0]
 8000312:	605a      	str	r2, [r3, #4]
 8000314:	609a      	str	r2, [r3, #8]
 8000316:	60da      	str	r2, [r3, #12]
 8000318:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800031a:	2301      	movs	r3, #1
 800031c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800031e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000322:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000324:	2300      	movs	r3, #0
 8000326:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000328:	2301      	movs	r3, #1
 800032a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800032c:	2302      	movs	r3, #2
 800032e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000330:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000334:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000336:	2300      	movs	r3, #0
 8000338:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800033a:	f107 0318 	add.w	r3, r7, #24
 800033e:	4618      	mov	r0, r3
 8000340:	f000 ff3e 	bl	80011c0 <HAL_RCC_OscConfig>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <SystemClock_Config+0x56>
  {
    Error_Handler();
 800034a:	f000 f82f 	bl	80003ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800034e:	230f      	movs	r3, #15
 8000350:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000352:	2302      	movs	r3, #2
 8000354:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000356:	2300      	movs	r3, #0
 8000358:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800035a:	2300      	movs	r3, #0
 800035c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800035e:	2300      	movs	r3, #0
 8000360:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000362:	1d3b      	adds	r3, r7, #4
 8000364:	2100      	movs	r1, #0
 8000366:	4618      	mov	r0, r3
 8000368:	f001 f9ac 	bl	80016c4 <HAL_RCC_ClockConfig>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	d001      	beq.n	8000376 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000372:	f000 f81b 	bl	80003ac <Error_Handler>
  }
}
 8000376:	bf00      	nop
 8000378:	3740      	adds	r7, #64	; 0x40
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
	...

08000380 <HAL_SPI_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
  if (hspi->Instance == SPI1) {
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	4a05      	ldr	r2, [pc, #20]	; (80003a4 <HAL_SPI_TxCpltCallback+0x24>)
 800038e:	4293      	cmp	r3, r2
 8000390:	d104      	bne.n	800039c <HAL_SPI_TxCpltCallback+0x1c>
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, SET);
 8000392:	2201      	movs	r2, #1
 8000394:	2102      	movs	r1, #2
 8000396:	4804      	ldr	r0, [pc, #16]	; (80003a8 <HAL_SPI_TxCpltCallback+0x28>)
 8000398:	f000 fefa 	bl	8001190 <HAL_GPIO_WritePin>
  }
}
 800039c:	bf00      	nop
 800039e:	3708      	adds	r7, #8
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	40013000 	.word	0x40013000
 80003a8:	40010800 	.word	0x40010800

080003ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003b0:	b672      	cpsid	i
}
 80003b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003b4:	e7fe      	b.n	80003b4 <Error_Handler+0x8>
	...

080003b8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80003bc:	4b17      	ldr	r3, [pc, #92]	; (800041c <MX_SPI1_Init+0x64>)
 80003be:	4a18      	ldr	r2, [pc, #96]	; (8000420 <MX_SPI1_Init+0x68>)
 80003c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80003c2:	4b16      	ldr	r3, [pc, #88]	; (800041c <MX_SPI1_Init+0x64>)
 80003c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80003c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80003ca:	4b14      	ldr	r3, [pc, #80]	; (800041c <MX_SPI1_Init+0x64>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80003d0:	4b12      	ldr	r3, [pc, #72]	; (800041c <MX_SPI1_Init+0x64>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003d6:	4b11      	ldr	r3, [pc, #68]	; (800041c <MX_SPI1_Init+0x64>)
 80003d8:	2200      	movs	r2, #0
 80003da:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003dc:	4b0f      	ldr	r3, [pc, #60]	; (800041c <MX_SPI1_Init+0x64>)
 80003de:	2200      	movs	r2, #0
 80003e0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80003e2:	4b0e      	ldr	r3, [pc, #56]	; (800041c <MX_SPI1_Init+0x64>)
 80003e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003e8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80003ea:	4b0c      	ldr	r3, [pc, #48]	; (800041c <MX_SPI1_Init+0x64>)
 80003ec:	2238      	movs	r2, #56	; 0x38
 80003ee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003f0:	4b0a      	ldr	r3, [pc, #40]	; (800041c <MX_SPI1_Init+0x64>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003f6:	4b09      	ldr	r3, [pc, #36]	; (800041c <MX_SPI1_Init+0x64>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003fc:	4b07      	ldr	r3, [pc, #28]	; (800041c <MX_SPI1_Init+0x64>)
 80003fe:	2200      	movs	r2, #0
 8000400:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000402:	4b06      	ldr	r3, [pc, #24]	; (800041c <MX_SPI1_Init+0x64>)
 8000404:	220a      	movs	r2, #10
 8000406:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000408:	4804      	ldr	r0, [pc, #16]	; (800041c <MX_SPI1_Init+0x64>)
 800040a:	f001 faf3 	bl	80019f4 <HAL_SPI_Init>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d001      	beq.n	8000418 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000414:	f7ff ffca 	bl	80003ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000418:	bf00      	nop
 800041a:	bd80      	pop	{r7, pc}
 800041c:	2000009c 	.word	0x2000009c
 8000420:	40013000 	.word	0x40013000

08000424 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b088      	sub	sp, #32
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800042c:	f107 0310 	add.w	r3, r7, #16
 8000430:	2200      	movs	r2, #0
 8000432:	601a      	str	r2, [r3, #0]
 8000434:	605a      	str	r2, [r3, #4]
 8000436:	609a      	str	r2, [r3, #8]
 8000438:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	4a2e      	ldr	r2, [pc, #184]	; (80004f8 <HAL_SPI_MspInit+0xd4>)
 8000440:	4293      	cmp	r3, r2
 8000442:	d155      	bne.n	80004f0 <HAL_SPI_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000444:	4b2d      	ldr	r3, [pc, #180]	; (80004fc <HAL_SPI_MspInit+0xd8>)
 8000446:	699b      	ldr	r3, [r3, #24]
 8000448:	4a2c      	ldr	r2, [pc, #176]	; (80004fc <HAL_SPI_MspInit+0xd8>)
 800044a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800044e:	6193      	str	r3, [r2, #24]
 8000450:	4b2a      	ldr	r3, [pc, #168]	; (80004fc <HAL_SPI_MspInit+0xd8>)
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000458:	60fb      	str	r3, [r7, #12]
 800045a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800045c:	4b27      	ldr	r3, [pc, #156]	; (80004fc <HAL_SPI_MspInit+0xd8>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	4a26      	ldr	r2, [pc, #152]	; (80004fc <HAL_SPI_MspInit+0xd8>)
 8000462:	f043 0304 	orr.w	r3, r3, #4
 8000466:	6193      	str	r3, [r2, #24]
 8000468:	4b24      	ldr	r3, [pc, #144]	; (80004fc <HAL_SPI_MspInit+0xd8>)
 800046a:	699b      	ldr	r3, [r3, #24]
 800046c:	f003 0304 	and.w	r3, r3, #4
 8000470:	60bb      	str	r3, [r7, #8]
 8000472:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000474:	23a0      	movs	r3, #160	; 0xa0
 8000476:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000478:	2302      	movs	r3, #2
 800047a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800047c:	2303      	movs	r3, #3
 800047e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000480:	f107 0310 	add.w	r3, r7, #16
 8000484:	4619      	mov	r1, r3
 8000486:	481e      	ldr	r0, [pc, #120]	; (8000500 <HAL_SPI_MspInit+0xdc>)
 8000488:	f000 fcfe 	bl	8000e88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800048c:	2340      	movs	r3, #64	; 0x40
 800048e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000490:	2300      	movs	r3, #0
 8000492:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000494:	2300      	movs	r3, #0
 8000496:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000498:	f107 0310 	add.w	r3, r7, #16
 800049c:	4619      	mov	r1, r3
 800049e:	4818      	ldr	r0, [pc, #96]	; (8000500 <HAL_SPI_MspInit+0xdc>)
 80004a0:	f000 fcf2 	bl	8000e88 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80004a4:	4b17      	ldr	r3, [pc, #92]	; (8000504 <HAL_SPI_MspInit+0xe0>)
 80004a6:	4a18      	ldr	r2, [pc, #96]	; (8000508 <HAL_SPI_MspInit+0xe4>)
 80004a8:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80004aa:	4b16      	ldr	r3, [pc, #88]	; (8000504 <HAL_SPI_MspInit+0xe0>)
 80004ac:	2210      	movs	r2, #16
 80004ae:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80004b0:	4b14      	ldr	r3, [pc, #80]	; (8000504 <HAL_SPI_MspInit+0xe0>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80004b6:	4b13      	ldr	r3, [pc, #76]	; (8000504 <HAL_SPI_MspInit+0xe0>)
 80004b8:	2280      	movs	r2, #128	; 0x80
 80004ba:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80004bc:	4b11      	ldr	r3, [pc, #68]	; (8000504 <HAL_SPI_MspInit+0xe0>)
 80004be:	2200      	movs	r2, #0
 80004c0:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80004c2:	4b10      	ldr	r3, [pc, #64]	; (8000504 <HAL_SPI_MspInit+0xe0>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80004c8:	4b0e      	ldr	r3, [pc, #56]	; (8000504 <HAL_SPI_MspInit+0xe0>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80004ce:	4b0d      	ldr	r3, [pc, #52]	; (8000504 <HAL_SPI_MspInit+0xe0>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80004d4:	480b      	ldr	r0, [pc, #44]	; (8000504 <HAL_SPI_MspInit+0xe0>)
 80004d6:	f000 fae9 	bl	8000aac <HAL_DMA_Init>
 80004da:	4603      	mov	r3, r0
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d001      	beq.n	80004e4 <HAL_SPI_MspInit+0xc0>
    {
      Error_Handler();
 80004e0:	f7ff ff64 	bl	80003ac <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	4a07      	ldr	r2, [pc, #28]	; (8000504 <HAL_SPI_MspInit+0xe0>)
 80004e8:	649a      	str	r2, [r3, #72]	; 0x48
 80004ea:	4a06      	ldr	r2, [pc, #24]	; (8000504 <HAL_SPI_MspInit+0xe0>)
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80004f0:	bf00      	nop
 80004f2:	3720      	adds	r7, #32
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	40013000 	.word	0x40013000
 80004fc:	40021000 	.word	0x40021000
 8000500:	40010800 	.word	0x40010800
 8000504:	200000f4 	.word	0x200000f4
 8000508:	40020030 	.word	0x40020030

0800050c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000512:	4b15      	ldr	r3, [pc, #84]	; (8000568 <HAL_MspInit+0x5c>)
 8000514:	699b      	ldr	r3, [r3, #24]
 8000516:	4a14      	ldr	r2, [pc, #80]	; (8000568 <HAL_MspInit+0x5c>)
 8000518:	f043 0301 	orr.w	r3, r3, #1
 800051c:	6193      	str	r3, [r2, #24]
 800051e:	4b12      	ldr	r3, [pc, #72]	; (8000568 <HAL_MspInit+0x5c>)
 8000520:	699b      	ldr	r3, [r3, #24]
 8000522:	f003 0301 	and.w	r3, r3, #1
 8000526:	60bb      	str	r3, [r7, #8]
 8000528:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800052a:	4b0f      	ldr	r3, [pc, #60]	; (8000568 <HAL_MspInit+0x5c>)
 800052c:	69db      	ldr	r3, [r3, #28]
 800052e:	4a0e      	ldr	r2, [pc, #56]	; (8000568 <HAL_MspInit+0x5c>)
 8000530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000534:	61d3      	str	r3, [r2, #28]
 8000536:	4b0c      	ldr	r3, [pc, #48]	; (8000568 <HAL_MspInit+0x5c>)
 8000538:	69db      	ldr	r3, [r3, #28]
 800053a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800053e:	607b      	str	r3, [r7, #4]
 8000540:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000542:	4b0a      	ldr	r3, [pc, #40]	; (800056c <HAL_MspInit+0x60>)
 8000544:	685b      	ldr	r3, [r3, #4]
 8000546:	60fb      	str	r3, [r7, #12]
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800054e:	60fb      	str	r3, [r7, #12]
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000556:	60fb      	str	r3, [r7, #12]
 8000558:	4a04      	ldr	r2, [pc, #16]	; (800056c <HAL_MspInit+0x60>)
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800055e:	bf00      	nop
 8000560:	3714      	adds	r7, #20
 8000562:	46bd      	mov	sp, r7
 8000564:	bc80      	pop	{r7}
 8000566:	4770      	bx	lr
 8000568:	40021000 	.word	0x40021000
 800056c:	40010000 	.word	0x40010000

08000570 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000574:	e7fe      	b.n	8000574 <NMI_Handler+0x4>

08000576 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000576:	b480      	push	{r7}
 8000578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800057a:	e7fe      	b.n	800057a <HardFault_Handler+0x4>

0800057c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000580:	e7fe      	b.n	8000580 <MemManage_Handler+0x4>

08000582 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000582:	b480      	push	{r7}
 8000584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000586:	e7fe      	b.n	8000586 <BusFault_Handler+0x4>

08000588 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800058c:	e7fe      	b.n	800058c <UsageFault_Handler+0x4>

0800058e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800058e:	b480      	push	{r7}
 8000590:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000592:	bf00      	nop
 8000594:	46bd      	mov	sp, r7
 8000596:	bc80      	pop	{r7}
 8000598:	4770      	bx	lr

0800059a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800059a:	b480      	push	{r7}
 800059c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800059e:	bf00      	nop
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bc80      	pop	{r7}
 80005a4:	4770      	bx	lr

080005a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005a6:	b480      	push	{r7}
 80005a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005aa:	bf00      	nop
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bc80      	pop	{r7}
 80005b0:	4770      	bx	lr

080005b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005b2:	b580      	push	{r7, lr}
 80005b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005b6:	f000 f92b 	bl	8000810 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005ba:	bf00      	nop
 80005bc:	bd80      	pop	{r7, pc}
	...

080005c0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80005c4:	4802      	ldr	r0, [pc, #8]	; (80005d0 <DMA1_Channel3_IRQHandler+0x10>)
 80005c6:	f000 fb2b 	bl	8000c20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80005ca:	bf00      	nop
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	200000f4 	.word	0x200000f4

080005d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b086      	sub	sp, #24
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005dc:	4a14      	ldr	r2, [pc, #80]	; (8000630 <_sbrk+0x5c>)
 80005de:	4b15      	ldr	r3, [pc, #84]	; (8000634 <_sbrk+0x60>)
 80005e0:	1ad3      	subs	r3, r2, r3
 80005e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005e4:	697b      	ldr	r3, [r7, #20]
 80005e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005e8:	4b13      	ldr	r3, [pc, #76]	; (8000638 <_sbrk+0x64>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d102      	bne.n	80005f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005f0:	4b11      	ldr	r3, [pc, #68]	; (8000638 <_sbrk+0x64>)
 80005f2:	4a12      	ldr	r2, [pc, #72]	; (800063c <_sbrk+0x68>)
 80005f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005f6:	4b10      	ldr	r3, [pc, #64]	; (8000638 <_sbrk+0x64>)
 80005f8:	681a      	ldr	r2, [r3, #0]
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	4413      	add	r3, r2
 80005fe:	693a      	ldr	r2, [r7, #16]
 8000600:	429a      	cmp	r2, r3
 8000602:	d207      	bcs.n	8000614 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000604:	f001 fe22 	bl	800224c <__errno>
 8000608:	4603      	mov	r3, r0
 800060a:	220c      	movs	r2, #12
 800060c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800060e:	f04f 33ff 	mov.w	r3, #4294967295
 8000612:	e009      	b.n	8000628 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000614:	4b08      	ldr	r3, [pc, #32]	; (8000638 <_sbrk+0x64>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800061a:	4b07      	ldr	r3, [pc, #28]	; (8000638 <_sbrk+0x64>)
 800061c:	681a      	ldr	r2, [r3, #0]
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4413      	add	r3, r2
 8000622:	4a05      	ldr	r2, [pc, #20]	; (8000638 <_sbrk+0x64>)
 8000624:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000626:	68fb      	ldr	r3, [r7, #12]
}
 8000628:	4618      	mov	r0, r3
 800062a:	3718      	adds	r7, #24
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	20005000 	.word	0x20005000
 8000634:	00000400 	.word	0x00000400
 8000638:	20000138 	.word	0x20000138
 800063c:	20000198 	.word	0x20000198

08000640 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000644:	bf00      	nop
 8000646:	46bd      	mov	sp, r7
 8000648:	bc80      	pop	{r7}
 800064a:	4770      	bx	lr

0800064c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000650:	4b11      	ldr	r3, [pc, #68]	; (8000698 <MX_USART1_UART_Init+0x4c>)
 8000652:	4a12      	ldr	r2, [pc, #72]	; (800069c <MX_USART1_UART_Init+0x50>)
 8000654:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000656:	4b10      	ldr	r3, [pc, #64]	; (8000698 <MX_USART1_UART_Init+0x4c>)
 8000658:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800065c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800065e:	4b0e      	ldr	r3, [pc, #56]	; (8000698 <MX_USART1_UART_Init+0x4c>)
 8000660:	2200      	movs	r2, #0
 8000662:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000664:	4b0c      	ldr	r3, [pc, #48]	; (8000698 <MX_USART1_UART_Init+0x4c>)
 8000666:	2200      	movs	r2, #0
 8000668:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800066a:	4b0b      	ldr	r3, [pc, #44]	; (8000698 <MX_USART1_UART_Init+0x4c>)
 800066c:	2200      	movs	r2, #0
 800066e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000670:	4b09      	ldr	r3, [pc, #36]	; (8000698 <MX_USART1_UART_Init+0x4c>)
 8000672:	220c      	movs	r2, #12
 8000674:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000676:	4b08      	ldr	r3, [pc, #32]	; (8000698 <MX_USART1_UART_Init+0x4c>)
 8000678:	2200      	movs	r2, #0
 800067a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800067c:	4b06      	ldr	r3, [pc, #24]	; (8000698 <MX_USART1_UART_Init+0x4c>)
 800067e:	2200      	movs	r2, #0
 8000680:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000682:	4805      	ldr	r0, [pc, #20]	; (8000698 <MX_USART1_UART_Init+0x4c>)
 8000684:	f001 fc2a 	bl	8001edc <HAL_UART_Init>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800068e:	f7ff fe8d 	bl	80003ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	2000013c 	.word	0x2000013c
 800069c:	40013800 	.word	0x40013800

080006a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b088      	sub	sp, #32
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a8:	f107 0310 	add.w	r3, r7, #16
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	4a1c      	ldr	r2, [pc, #112]	; (800072c <HAL_UART_MspInit+0x8c>)
 80006bc:	4293      	cmp	r3, r2
 80006be:	d131      	bne.n	8000724 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006c0:	4b1b      	ldr	r3, [pc, #108]	; (8000730 <HAL_UART_MspInit+0x90>)
 80006c2:	699b      	ldr	r3, [r3, #24]
 80006c4:	4a1a      	ldr	r2, [pc, #104]	; (8000730 <HAL_UART_MspInit+0x90>)
 80006c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ca:	6193      	str	r3, [r2, #24]
 80006cc:	4b18      	ldr	r3, [pc, #96]	; (8000730 <HAL_UART_MspInit+0x90>)
 80006ce:	699b      	ldr	r3, [r3, #24]
 80006d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006d4:	60fb      	str	r3, [r7, #12]
 80006d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d8:	4b15      	ldr	r3, [pc, #84]	; (8000730 <HAL_UART_MspInit+0x90>)
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	4a14      	ldr	r2, [pc, #80]	; (8000730 <HAL_UART_MspInit+0x90>)
 80006de:	f043 0304 	orr.w	r3, r3, #4
 80006e2:	6193      	str	r3, [r2, #24]
 80006e4:	4b12      	ldr	r3, [pc, #72]	; (8000730 <HAL_UART_MspInit+0x90>)
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	f003 0304 	and.w	r3, r3, #4
 80006ec:	60bb      	str	r3, [r7, #8]
 80006ee:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f6:	2302      	movs	r3, #2
 80006f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006fa:	2303      	movs	r3, #3
 80006fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006fe:	f107 0310 	add.w	r3, r7, #16
 8000702:	4619      	mov	r1, r3
 8000704:	480b      	ldr	r0, [pc, #44]	; (8000734 <HAL_UART_MspInit+0x94>)
 8000706:	f000 fbbf 	bl	8000e88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800070a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800070e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000710:	2300      	movs	r3, #0
 8000712:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000714:	2300      	movs	r3, #0
 8000716:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000718:	f107 0310 	add.w	r3, r7, #16
 800071c:	4619      	mov	r1, r3
 800071e:	4805      	ldr	r0, [pc, #20]	; (8000734 <HAL_UART_MspInit+0x94>)
 8000720:	f000 fbb2 	bl	8000e88 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000724:	bf00      	nop
 8000726:	3720      	adds	r7, #32
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40013800 	.word	0x40013800
 8000730:	40021000 	.word	0x40021000
 8000734:	40010800 	.word	0x40010800

08000738 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000738:	480c      	ldr	r0, [pc, #48]	; (800076c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800073a:	490d      	ldr	r1, [pc, #52]	; (8000770 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800073c:	4a0d      	ldr	r2, [pc, #52]	; (8000774 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800073e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000740:	e002      	b.n	8000748 <LoopCopyDataInit>

08000742 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000742:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000744:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000746:	3304      	adds	r3, #4

08000748 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000748:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800074a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800074c:	d3f9      	bcc.n	8000742 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800074e:	4a0a      	ldr	r2, [pc, #40]	; (8000778 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000750:	4c0a      	ldr	r4, [pc, #40]	; (800077c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000752:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000754:	e001      	b.n	800075a <LoopFillZerobss>

08000756 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000756:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000758:	3204      	adds	r2, #4

0800075a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800075a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800075c:	d3fb      	bcc.n	8000756 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800075e:	f7ff ff6f 	bl	8000640 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000762:	f001 fd79 	bl	8002258 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000766:	f7ff fd55 	bl	8000214 <main>
  bx lr
 800076a:	4770      	bx	lr
  ldr r0, =_sdata
 800076c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000770:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000774:	08002cb4 	.word	0x08002cb4
  ldr r2, =_sbss
 8000778:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800077c:	20000194 	.word	0x20000194

08000780 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000780:	e7fe      	b.n	8000780 <ADC1_2_IRQHandler>
	...

08000784 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000788:	4b08      	ldr	r3, [pc, #32]	; (80007ac <HAL_Init+0x28>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a07      	ldr	r2, [pc, #28]	; (80007ac <HAL_Init+0x28>)
 800078e:	f043 0310 	orr.w	r3, r3, #16
 8000792:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000794:	2003      	movs	r0, #3
 8000796:	f000 f947 	bl	8000a28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800079a:	200f      	movs	r0, #15
 800079c:	f000 f808 	bl	80007b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007a0:	f7ff feb4 	bl	800050c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007a4:	2300      	movs	r3, #0
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40022000 	.word	0x40022000

080007b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007b8:	4b12      	ldr	r3, [pc, #72]	; (8000804 <HAL_InitTick+0x54>)
 80007ba:	681a      	ldr	r2, [r3, #0]
 80007bc:	4b12      	ldr	r3, [pc, #72]	; (8000808 <HAL_InitTick+0x58>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	4619      	mov	r1, r3
 80007c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80007ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ce:	4618      	mov	r0, r3
 80007d0:	f000 f95f 	bl	8000a92 <HAL_SYSTICK_Config>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007da:	2301      	movs	r3, #1
 80007dc:	e00e      	b.n	80007fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	2b0f      	cmp	r3, #15
 80007e2:	d80a      	bhi.n	80007fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007e4:	2200      	movs	r2, #0
 80007e6:	6879      	ldr	r1, [r7, #4]
 80007e8:	f04f 30ff 	mov.w	r0, #4294967295
 80007ec:	f000 f927 	bl	8000a3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007f0:	4a06      	ldr	r2, [pc, #24]	; (800080c <HAL_InitTick+0x5c>)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007f6:	2300      	movs	r3, #0
 80007f8:	e000      	b.n	80007fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007fa:	2301      	movs	r3, #1
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	3708      	adds	r7, #8
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	20000000 	.word	0x20000000
 8000808:	20000008 	.word	0x20000008
 800080c:	20000004 	.word	0x20000004

08000810 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000814:	4b05      	ldr	r3, [pc, #20]	; (800082c <HAL_IncTick+0x1c>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	461a      	mov	r2, r3
 800081a:	4b05      	ldr	r3, [pc, #20]	; (8000830 <HAL_IncTick+0x20>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4413      	add	r3, r2
 8000820:	4a03      	ldr	r2, [pc, #12]	; (8000830 <HAL_IncTick+0x20>)
 8000822:	6013      	str	r3, [r2, #0]
}
 8000824:	bf00      	nop
 8000826:	46bd      	mov	sp, r7
 8000828:	bc80      	pop	{r7}
 800082a:	4770      	bx	lr
 800082c:	20000008 	.word	0x20000008
 8000830:	20000180 	.word	0x20000180

08000834 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  return uwTick;
 8000838:	4b02      	ldr	r3, [pc, #8]	; (8000844 <HAL_GetTick+0x10>)
 800083a:	681b      	ldr	r3, [r3, #0]
}
 800083c:	4618      	mov	r0, r3
 800083e:	46bd      	mov	sp, r7
 8000840:	bc80      	pop	{r7}
 8000842:	4770      	bx	lr
 8000844:	20000180 	.word	0x20000180

08000848 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000850:	f7ff fff0 	bl	8000834 <HAL_GetTick>
 8000854:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000860:	d005      	beq.n	800086e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000862:	4b0a      	ldr	r3, [pc, #40]	; (800088c <HAL_Delay+0x44>)
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	461a      	mov	r2, r3
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	4413      	add	r3, r2
 800086c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800086e:	bf00      	nop
 8000870:	f7ff ffe0 	bl	8000834 <HAL_GetTick>
 8000874:	4602      	mov	r2, r0
 8000876:	68bb      	ldr	r3, [r7, #8]
 8000878:	1ad3      	subs	r3, r2, r3
 800087a:	68fa      	ldr	r2, [r7, #12]
 800087c:	429a      	cmp	r2, r3
 800087e:	d8f7      	bhi.n	8000870 <HAL_Delay+0x28>
  {
  }
}
 8000880:	bf00      	nop
 8000882:	bf00      	nop
 8000884:	3710      	adds	r7, #16
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	20000008 	.word	0x20000008

08000890 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000890:	b480      	push	{r7}
 8000892:	b085      	sub	sp, #20
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	f003 0307 	and.w	r3, r3, #7
 800089e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008a0:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <__NVIC_SetPriorityGrouping+0x44>)
 80008a2:	68db      	ldr	r3, [r3, #12]
 80008a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008a6:	68ba      	ldr	r2, [r7, #8]
 80008a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008ac:	4013      	ands	r3, r2
 80008ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008b4:	68bb      	ldr	r3, [r7, #8]
 80008b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008c2:	4a04      	ldr	r2, [pc, #16]	; (80008d4 <__NVIC_SetPriorityGrouping+0x44>)
 80008c4:	68bb      	ldr	r3, [r7, #8]
 80008c6:	60d3      	str	r3, [r2, #12]
}
 80008c8:	bf00      	nop
 80008ca:	3714      	adds	r7, #20
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bc80      	pop	{r7}
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	e000ed00 	.word	0xe000ed00

080008d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008dc:	4b04      	ldr	r3, [pc, #16]	; (80008f0 <__NVIC_GetPriorityGrouping+0x18>)
 80008de:	68db      	ldr	r3, [r3, #12]
 80008e0:	0a1b      	lsrs	r3, r3, #8
 80008e2:	f003 0307 	and.w	r3, r3, #7
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bc80      	pop	{r7}
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	e000ed00 	.word	0xe000ed00

080008f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	4603      	mov	r3, r0
 80008fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000902:	2b00      	cmp	r3, #0
 8000904:	db0b      	blt.n	800091e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	f003 021f 	and.w	r2, r3, #31
 800090c:	4906      	ldr	r1, [pc, #24]	; (8000928 <__NVIC_EnableIRQ+0x34>)
 800090e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000912:	095b      	lsrs	r3, r3, #5
 8000914:	2001      	movs	r0, #1
 8000916:	fa00 f202 	lsl.w	r2, r0, r2
 800091a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800091e:	bf00      	nop
 8000920:	370c      	adds	r7, #12
 8000922:	46bd      	mov	sp, r7
 8000924:	bc80      	pop	{r7}
 8000926:	4770      	bx	lr
 8000928:	e000e100 	.word	0xe000e100

0800092c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	6039      	str	r1, [r7, #0]
 8000936:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800093c:	2b00      	cmp	r3, #0
 800093e:	db0a      	blt.n	8000956 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	b2da      	uxtb	r2, r3
 8000944:	490c      	ldr	r1, [pc, #48]	; (8000978 <__NVIC_SetPriority+0x4c>)
 8000946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800094a:	0112      	lsls	r2, r2, #4
 800094c:	b2d2      	uxtb	r2, r2
 800094e:	440b      	add	r3, r1
 8000950:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000954:	e00a      	b.n	800096c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	b2da      	uxtb	r2, r3
 800095a:	4908      	ldr	r1, [pc, #32]	; (800097c <__NVIC_SetPriority+0x50>)
 800095c:	79fb      	ldrb	r3, [r7, #7]
 800095e:	f003 030f 	and.w	r3, r3, #15
 8000962:	3b04      	subs	r3, #4
 8000964:	0112      	lsls	r2, r2, #4
 8000966:	b2d2      	uxtb	r2, r2
 8000968:	440b      	add	r3, r1
 800096a:	761a      	strb	r2, [r3, #24]
}
 800096c:	bf00      	nop
 800096e:	370c      	adds	r7, #12
 8000970:	46bd      	mov	sp, r7
 8000972:	bc80      	pop	{r7}
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	e000e100 	.word	0xe000e100
 800097c:	e000ed00 	.word	0xe000ed00

08000980 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000980:	b480      	push	{r7}
 8000982:	b089      	sub	sp, #36	; 0x24
 8000984:	af00      	add	r7, sp, #0
 8000986:	60f8      	str	r0, [r7, #12]
 8000988:	60b9      	str	r1, [r7, #8]
 800098a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	f003 0307 	and.w	r3, r3, #7
 8000992:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000994:	69fb      	ldr	r3, [r7, #28]
 8000996:	f1c3 0307 	rsb	r3, r3, #7
 800099a:	2b04      	cmp	r3, #4
 800099c:	bf28      	it	cs
 800099e:	2304      	movcs	r3, #4
 80009a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009a2:	69fb      	ldr	r3, [r7, #28]
 80009a4:	3304      	adds	r3, #4
 80009a6:	2b06      	cmp	r3, #6
 80009a8:	d902      	bls.n	80009b0 <NVIC_EncodePriority+0x30>
 80009aa:	69fb      	ldr	r3, [r7, #28]
 80009ac:	3b03      	subs	r3, #3
 80009ae:	e000      	b.n	80009b2 <NVIC_EncodePriority+0x32>
 80009b0:	2300      	movs	r3, #0
 80009b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009b4:	f04f 32ff 	mov.w	r2, #4294967295
 80009b8:	69bb      	ldr	r3, [r7, #24]
 80009ba:	fa02 f303 	lsl.w	r3, r2, r3
 80009be:	43da      	mvns	r2, r3
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	401a      	ands	r2, r3
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009c8:	f04f 31ff 	mov.w	r1, #4294967295
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	fa01 f303 	lsl.w	r3, r1, r3
 80009d2:	43d9      	mvns	r1, r3
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d8:	4313      	orrs	r3, r2
         );
}
 80009da:	4618      	mov	r0, r3
 80009dc:	3724      	adds	r7, #36	; 0x24
 80009de:	46bd      	mov	sp, r7
 80009e0:	bc80      	pop	{r7}
 80009e2:	4770      	bx	lr

080009e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	3b01      	subs	r3, #1
 80009f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009f4:	d301      	bcc.n	80009fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009f6:	2301      	movs	r3, #1
 80009f8:	e00f      	b.n	8000a1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009fa:	4a0a      	ldr	r2, [pc, #40]	; (8000a24 <SysTick_Config+0x40>)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	3b01      	subs	r3, #1
 8000a00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a02:	210f      	movs	r1, #15
 8000a04:	f04f 30ff 	mov.w	r0, #4294967295
 8000a08:	f7ff ff90 	bl	800092c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a0c:	4b05      	ldr	r3, [pc, #20]	; (8000a24 <SysTick_Config+0x40>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a12:	4b04      	ldr	r3, [pc, #16]	; (8000a24 <SysTick_Config+0x40>)
 8000a14:	2207      	movs	r2, #7
 8000a16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a18:	2300      	movs	r3, #0
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	e000e010 	.word	0xe000e010

08000a28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a30:	6878      	ldr	r0, [r7, #4]
 8000a32:	f7ff ff2d 	bl	8000890 <__NVIC_SetPriorityGrouping>
}
 8000a36:	bf00      	nop
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}

08000a3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	b086      	sub	sp, #24
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	4603      	mov	r3, r0
 8000a46:	60b9      	str	r1, [r7, #8]
 8000a48:	607a      	str	r2, [r7, #4]
 8000a4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a50:	f7ff ff42 	bl	80008d8 <__NVIC_GetPriorityGrouping>
 8000a54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a56:	687a      	ldr	r2, [r7, #4]
 8000a58:	68b9      	ldr	r1, [r7, #8]
 8000a5a:	6978      	ldr	r0, [r7, #20]
 8000a5c:	f7ff ff90 	bl	8000980 <NVIC_EncodePriority>
 8000a60:	4602      	mov	r2, r0
 8000a62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a66:	4611      	mov	r1, r2
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff ff5f 	bl	800092c <__NVIC_SetPriority>
}
 8000a6e:	bf00      	nop
 8000a70:	3718      	adds	r7, #24
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	b082      	sub	sp, #8
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a84:	4618      	mov	r0, r3
 8000a86:	f7ff ff35 	bl	80008f4 <__NVIC_EnableIRQ>
}
 8000a8a:	bf00      	nop
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}

08000a92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a92:	b580      	push	{r7, lr}
 8000a94:	b082      	sub	sp, #8
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a9a:	6878      	ldr	r0, [r7, #4]
 8000a9c:	f7ff ffa2 	bl	80009e4 <SysTick_Config>
 8000aa0:	4603      	mov	r3, r0
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
	...

08000aac <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b085      	sub	sp, #20
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d101      	bne.n	8000ac2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	e043      	b.n	8000b4a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	461a      	mov	r2, r3
 8000ac8:	4b22      	ldr	r3, [pc, #136]	; (8000b54 <HAL_DMA_Init+0xa8>)
 8000aca:	4413      	add	r3, r2
 8000acc:	4a22      	ldr	r2, [pc, #136]	; (8000b58 <HAL_DMA_Init+0xac>)
 8000ace:	fba2 2303 	umull	r2, r3, r2, r3
 8000ad2:	091b      	lsrs	r3, r3, #4
 8000ad4:	009a      	lsls	r2, r3, #2
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	4a1f      	ldr	r2, [pc, #124]	; (8000b5c <HAL_DMA_Init+0xb0>)
 8000ade:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	2202      	movs	r2, #2
 8000ae4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000af6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000afa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000b04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	68db      	ldr	r3, [r3, #12]
 8000b0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	695b      	ldr	r3, [r3, #20]
 8000b16:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	69db      	ldr	r3, [r3, #28]
 8000b22:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000b24:	68fa      	ldr	r2, [r7, #12]
 8000b26:	4313      	orrs	r3, r2
 8000b28:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	68fa      	ldr	r2, [r7, #12]
 8000b30:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	2200      	movs	r2, #0
 8000b36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	2200      	movs	r2, #0
 8000b44:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000b48:	2300      	movs	r3, #0
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3714      	adds	r7, #20
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bc80      	pop	{r7}
 8000b52:	4770      	bx	lr
 8000b54:	bffdfff8 	.word	0xbffdfff8
 8000b58:	cccccccd 	.word	0xcccccccd
 8000b5c:	40020000 	.word	0x40020000

08000b60 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b086      	sub	sp, #24
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	60f8      	str	r0, [r7, #12]
 8000b68:	60b9      	str	r1, [r7, #8]
 8000b6a:	607a      	str	r2, [r7, #4]
 8000b6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	d101      	bne.n	8000b80 <HAL_DMA_Start_IT+0x20>
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	e04a      	b.n	8000c16 <HAL_DMA_Start_IT+0xb6>
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	2201      	movs	r2, #1
 8000b84:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b8e:	2b01      	cmp	r3, #1
 8000b90:	d13a      	bne.n	8000c08 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	2202      	movs	r2, #2
 8000b96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f022 0201 	bic.w	r2, r2, #1
 8000bae:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	687a      	ldr	r2, [r7, #4]
 8000bb4:	68b9      	ldr	r1, [r7, #8]
 8000bb6:	68f8      	ldr	r0, [r7, #12]
 8000bb8:	f000 f938 	bl	8000e2c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d008      	beq.n	8000bd6 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	681a      	ldr	r2, [r3, #0]
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f042 020e 	orr.w	r2, r2, #14
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	e00f      	b.n	8000bf6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f022 0204 	bic.w	r2, r2, #4
 8000be4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f042 020a 	orr.w	r2, r2, #10
 8000bf4:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f042 0201 	orr.w	r2, r2, #1
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	e005      	b.n	8000c14 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000c10:	2302      	movs	r3, #2
 8000c12:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000c14:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3718      	adds	r7, #24
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
	...

08000c20 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3c:	2204      	movs	r2, #4
 8000c3e:	409a      	lsls	r2, r3
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	4013      	ands	r3, r2
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d04f      	beq.n	8000ce8 <HAL_DMA_IRQHandler+0xc8>
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	f003 0304 	and.w	r3, r3, #4
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d04a      	beq.n	8000ce8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f003 0320 	and.w	r3, r3, #32
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d107      	bne.n	8000c70 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f022 0204 	bic.w	r2, r2, #4
 8000c6e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a66      	ldr	r2, [pc, #408]	; (8000e10 <HAL_DMA_IRQHandler+0x1f0>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d029      	beq.n	8000cce <HAL_DMA_IRQHandler+0xae>
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4a65      	ldr	r2, [pc, #404]	; (8000e14 <HAL_DMA_IRQHandler+0x1f4>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d022      	beq.n	8000cca <HAL_DMA_IRQHandler+0xaa>
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a63      	ldr	r2, [pc, #396]	; (8000e18 <HAL_DMA_IRQHandler+0x1f8>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d01a      	beq.n	8000cc4 <HAL_DMA_IRQHandler+0xa4>
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a62      	ldr	r2, [pc, #392]	; (8000e1c <HAL_DMA_IRQHandler+0x1fc>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d012      	beq.n	8000cbe <HAL_DMA_IRQHandler+0x9e>
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a60      	ldr	r2, [pc, #384]	; (8000e20 <HAL_DMA_IRQHandler+0x200>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d00a      	beq.n	8000cb8 <HAL_DMA_IRQHandler+0x98>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a5f      	ldr	r2, [pc, #380]	; (8000e24 <HAL_DMA_IRQHandler+0x204>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d102      	bne.n	8000cb2 <HAL_DMA_IRQHandler+0x92>
 8000cac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000cb0:	e00e      	b.n	8000cd0 <HAL_DMA_IRQHandler+0xb0>
 8000cb2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000cb6:	e00b      	b.n	8000cd0 <HAL_DMA_IRQHandler+0xb0>
 8000cb8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000cbc:	e008      	b.n	8000cd0 <HAL_DMA_IRQHandler+0xb0>
 8000cbe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000cc2:	e005      	b.n	8000cd0 <HAL_DMA_IRQHandler+0xb0>
 8000cc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cc8:	e002      	b.n	8000cd0 <HAL_DMA_IRQHandler+0xb0>
 8000cca:	2340      	movs	r3, #64	; 0x40
 8000ccc:	e000      	b.n	8000cd0 <HAL_DMA_IRQHandler+0xb0>
 8000cce:	2304      	movs	r3, #4
 8000cd0:	4a55      	ldr	r2, [pc, #340]	; (8000e28 <HAL_DMA_IRQHandler+0x208>)
 8000cd2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	f000 8094 	beq.w	8000e06 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000ce6:	e08e      	b.n	8000e06 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cec:	2202      	movs	r2, #2
 8000cee:	409a      	lsls	r2, r3
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d056      	beq.n	8000da6 <HAL_DMA_IRQHandler+0x186>
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	f003 0302 	and.w	r3, r3, #2
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d051      	beq.n	8000da6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f003 0320 	and.w	r3, r3, #32
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d10b      	bne.n	8000d28 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f022 020a 	bic.w	r2, r2, #10
 8000d1e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2201      	movs	r2, #1
 8000d24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a38      	ldr	r2, [pc, #224]	; (8000e10 <HAL_DMA_IRQHandler+0x1f0>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d029      	beq.n	8000d86 <HAL_DMA_IRQHandler+0x166>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a37      	ldr	r2, [pc, #220]	; (8000e14 <HAL_DMA_IRQHandler+0x1f4>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d022      	beq.n	8000d82 <HAL_DMA_IRQHandler+0x162>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a35      	ldr	r2, [pc, #212]	; (8000e18 <HAL_DMA_IRQHandler+0x1f8>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d01a      	beq.n	8000d7c <HAL_DMA_IRQHandler+0x15c>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4a34      	ldr	r2, [pc, #208]	; (8000e1c <HAL_DMA_IRQHandler+0x1fc>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d012      	beq.n	8000d76 <HAL_DMA_IRQHandler+0x156>
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a32      	ldr	r2, [pc, #200]	; (8000e20 <HAL_DMA_IRQHandler+0x200>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d00a      	beq.n	8000d70 <HAL_DMA_IRQHandler+0x150>
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a31      	ldr	r2, [pc, #196]	; (8000e24 <HAL_DMA_IRQHandler+0x204>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d102      	bne.n	8000d6a <HAL_DMA_IRQHandler+0x14a>
 8000d64:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000d68:	e00e      	b.n	8000d88 <HAL_DMA_IRQHandler+0x168>
 8000d6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000d6e:	e00b      	b.n	8000d88 <HAL_DMA_IRQHandler+0x168>
 8000d70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d74:	e008      	b.n	8000d88 <HAL_DMA_IRQHandler+0x168>
 8000d76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d7a:	e005      	b.n	8000d88 <HAL_DMA_IRQHandler+0x168>
 8000d7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d80:	e002      	b.n	8000d88 <HAL_DMA_IRQHandler+0x168>
 8000d82:	2320      	movs	r3, #32
 8000d84:	e000      	b.n	8000d88 <HAL_DMA_IRQHandler+0x168>
 8000d86:	2302      	movs	r3, #2
 8000d88:	4a27      	ldr	r2, [pc, #156]	; (8000e28 <HAL_DMA_IRQHandler+0x208>)
 8000d8a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2200      	movs	r2, #0
 8000d90:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d034      	beq.n	8000e06 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000da0:	6878      	ldr	r0, [r7, #4]
 8000da2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000da4:	e02f      	b.n	8000e06 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000daa:	2208      	movs	r2, #8
 8000dac:	409a      	lsls	r2, r3
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	4013      	ands	r3, r2
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d028      	beq.n	8000e08 <HAL_DMA_IRQHandler+0x1e8>
 8000db6:	68bb      	ldr	r3, [r7, #8]
 8000db8:	f003 0308 	and.w	r3, r3, #8
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d023      	beq.n	8000e08 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f022 020e 	bic.w	r2, r2, #14
 8000dce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dd8:	2101      	movs	r1, #1
 8000dda:	fa01 f202 	lsl.w	r2, r1, r2
 8000dde:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2201      	movs	r2, #1
 8000de4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2201      	movs	r2, #1
 8000dea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2200      	movs	r2, #0
 8000df2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d004      	beq.n	8000e08 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	4798      	blx	r3
    }
  }
  return;
 8000e06:	bf00      	nop
 8000e08:	bf00      	nop
}
 8000e0a:	3710      	adds	r7, #16
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40020008 	.word	0x40020008
 8000e14:	4002001c 	.word	0x4002001c
 8000e18:	40020030 	.word	0x40020030
 8000e1c:	40020044 	.word	0x40020044
 8000e20:	40020058 	.word	0x40020058
 8000e24:	4002006c 	.word	0x4002006c
 8000e28:	40020000 	.word	0x40020000

08000e2c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b085      	sub	sp, #20
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	60f8      	str	r0, [r7, #12]
 8000e34:	60b9      	str	r1, [r7, #8]
 8000e36:	607a      	str	r2, [r7, #4]
 8000e38:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e42:	2101      	movs	r1, #1
 8000e44:	fa01 f202 	lsl.w	r2, r1, r2
 8000e48:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	683a      	ldr	r2, [r7, #0]
 8000e50:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	2b10      	cmp	r3, #16
 8000e58:	d108      	bne.n	8000e6c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	687a      	ldr	r2, [r7, #4]
 8000e60:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	68ba      	ldr	r2, [r7, #8]
 8000e68:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000e6a:	e007      	b.n	8000e7c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	68ba      	ldr	r2, [r7, #8]
 8000e72:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	687a      	ldr	r2, [r7, #4]
 8000e7a:	60da      	str	r2, [r3, #12]
}
 8000e7c:	bf00      	nop
 8000e7e:	3714      	adds	r7, #20
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bc80      	pop	{r7}
 8000e84:	4770      	bx	lr
	...

08000e88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b08b      	sub	sp, #44	; 0x2c
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e92:	2300      	movs	r3, #0
 8000e94:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e96:	2300      	movs	r3, #0
 8000e98:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e9a:	e169      	b.n	8001170 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	69fa      	ldr	r2, [r7, #28]
 8000eac:	4013      	ands	r3, r2
 8000eae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	f040 8158 	bne.w	800116a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	4a9a      	ldr	r2, [pc, #616]	; (8001128 <HAL_GPIO_Init+0x2a0>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d05e      	beq.n	8000f82 <HAL_GPIO_Init+0xfa>
 8000ec4:	4a98      	ldr	r2, [pc, #608]	; (8001128 <HAL_GPIO_Init+0x2a0>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d875      	bhi.n	8000fb6 <HAL_GPIO_Init+0x12e>
 8000eca:	4a98      	ldr	r2, [pc, #608]	; (800112c <HAL_GPIO_Init+0x2a4>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d058      	beq.n	8000f82 <HAL_GPIO_Init+0xfa>
 8000ed0:	4a96      	ldr	r2, [pc, #600]	; (800112c <HAL_GPIO_Init+0x2a4>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d86f      	bhi.n	8000fb6 <HAL_GPIO_Init+0x12e>
 8000ed6:	4a96      	ldr	r2, [pc, #600]	; (8001130 <HAL_GPIO_Init+0x2a8>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d052      	beq.n	8000f82 <HAL_GPIO_Init+0xfa>
 8000edc:	4a94      	ldr	r2, [pc, #592]	; (8001130 <HAL_GPIO_Init+0x2a8>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d869      	bhi.n	8000fb6 <HAL_GPIO_Init+0x12e>
 8000ee2:	4a94      	ldr	r2, [pc, #592]	; (8001134 <HAL_GPIO_Init+0x2ac>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d04c      	beq.n	8000f82 <HAL_GPIO_Init+0xfa>
 8000ee8:	4a92      	ldr	r2, [pc, #584]	; (8001134 <HAL_GPIO_Init+0x2ac>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d863      	bhi.n	8000fb6 <HAL_GPIO_Init+0x12e>
 8000eee:	4a92      	ldr	r2, [pc, #584]	; (8001138 <HAL_GPIO_Init+0x2b0>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d046      	beq.n	8000f82 <HAL_GPIO_Init+0xfa>
 8000ef4:	4a90      	ldr	r2, [pc, #576]	; (8001138 <HAL_GPIO_Init+0x2b0>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d85d      	bhi.n	8000fb6 <HAL_GPIO_Init+0x12e>
 8000efa:	2b12      	cmp	r3, #18
 8000efc:	d82a      	bhi.n	8000f54 <HAL_GPIO_Init+0xcc>
 8000efe:	2b12      	cmp	r3, #18
 8000f00:	d859      	bhi.n	8000fb6 <HAL_GPIO_Init+0x12e>
 8000f02:	a201      	add	r2, pc, #4	; (adr r2, 8000f08 <HAL_GPIO_Init+0x80>)
 8000f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f08:	08000f83 	.word	0x08000f83
 8000f0c:	08000f5d 	.word	0x08000f5d
 8000f10:	08000f6f 	.word	0x08000f6f
 8000f14:	08000fb1 	.word	0x08000fb1
 8000f18:	08000fb7 	.word	0x08000fb7
 8000f1c:	08000fb7 	.word	0x08000fb7
 8000f20:	08000fb7 	.word	0x08000fb7
 8000f24:	08000fb7 	.word	0x08000fb7
 8000f28:	08000fb7 	.word	0x08000fb7
 8000f2c:	08000fb7 	.word	0x08000fb7
 8000f30:	08000fb7 	.word	0x08000fb7
 8000f34:	08000fb7 	.word	0x08000fb7
 8000f38:	08000fb7 	.word	0x08000fb7
 8000f3c:	08000fb7 	.word	0x08000fb7
 8000f40:	08000fb7 	.word	0x08000fb7
 8000f44:	08000fb7 	.word	0x08000fb7
 8000f48:	08000fb7 	.word	0x08000fb7
 8000f4c:	08000f65 	.word	0x08000f65
 8000f50:	08000f79 	.word	0x08000f79
 8000f54:	4a79      	ldr	r2, [pc, #484]	; (800113c <HAL_GPIO_Init+0x2b4>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d013      	beq.n	8000f82 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f5a:	e02c      	b.n	8000fb6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	623b      	str	r3, [r7, #32]
          break;
 8000f62:	e029      	b.n	8000fb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	3304      	adds	r3, #4
 8000f6a:	623b      	str	r3, [r7, #32]
          break;
 8000f6c:	e024      	b.n	8000fb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	68db      	ldr	r3, [r3, #12]
 8000f72:	3308      	adds	r3, #8
 8000f74:	623b      	str	r3, [r7, #32]
          break;
 8000f76:	e01f      	b.n	8000fb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	330c      	adds	r3, #12
 8000f7e:	623b      	str	r3, [r7, #32]
          break;
 8000f80:	e01a      	b.n	8000fb8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d102      	bne.n	8000f90 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f8a:	2304      	movs	r3, #4
 8000f8c:	623b      	str	r3, [r7, #32]
          break;
 8000f8e:	e013      	b.n	8000fb8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d105      	bne.n	8000fa4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f98:	2308      	movs	r3, #8
 8000f9a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	69fa      	ldr	r2, [r7, #28]
 8000fa0:	611a      	str	r2, [r3, #16]
          break;
 8000fa2:	e009      	b.n	8000fb8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fa4:	2308      	movs	r3, #8
 8000fa6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	69fa      	ldr	r2, [r7, #28]
 8000fac:	615a      	str	r2, [r3, #20]
          break;
 8000fae:	e003      	b.n	8000fb8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	623b      	str	r3, [r7, #32]
          break;
 8000fb4:	e000      	b.n	8000fb8 <HAL_GPIO_Init+0x130>
          break;
 8000fb6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	2bff      	cmp	r3, #255	; 0xff
 8000fbc:	d801      	bhi.n	8000fc2 <HAL_GPIO_Init+0x13a>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	e001      	b.n	8000fc6 <HAL_GPIO_Init+0x13e>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	3304      	adds	r3, #4
 8000fc6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	2bff      	cmp	r3, #255	; 0xff
 8000fcc:	d802      	bhi.n	8000fd4 <HAL_GPIO_Init+0x14c>
 8000fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	e002      	b.n	8000fda <HAL_GPIO_Init+0x152>
 8000fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd6:	3b08      	subs	r3, #8
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	210f      	movs	r1, #15
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	401a      	ands	r2, r3
 8000fec:	6a39      	ldr	r1, [r7, #32]
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff4:	431a      	orrs	r2, r3
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001002:	2b00      	cmp	r3, #0
 8001004:	f000 80b1 	beq.w	800116a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001008:	4b4d      	ldr	r3, [pc, #308]	; (8001140 <HAL_GPIO_Init+0x2b8>)
 800100a:	699b      	ldr	r3, [r3, #24]
 800100c:	4a4c      	ldr	r2, [pc, #304]	; (8001140 <HAL_GPIO_Init+0x2b8>)
 800100e:	f043 0301 	orr.w	r3, r3, #1
 8001012:	6193      	str	r3, [r2, #24]
 8001014:	4b4a      	ldr	r3, [pc, #296]	; (8001140 <HAL_GPIO_Init+0x2b8>)
 8001016:	699b      	ldr	r3, [r3, #24]
 8001018:	f003 0301 	and.w	r3, r3, #1
 800101c:	60bb      	str	r3, [r7, #8]
 800101e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001020:	4a48      	ldr	r2, [pc, #288]	; (8001144 <HAL_GPIO_Init+0x2bc>)
 8001022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001024:	089b      	lsrs	r3, r3, #2
 8001026:	3302      	adds	r3, #2
 8001028:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800102c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800102e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001030:	f003 0303 	and.w	r3, r3, #3
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	220f      	movs	r2, #15
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	43db      	mvns	r3, r3
 800103e:	68fa      	ldr	r2, [r7, #12]
 8001040:	4013      	ands	r3, r2
 8001042:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	4a40      	ldr	r2, [pc, #256]	; (8001148 <HAL_GPIO_Init+0x2c0>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d013      	beq.n	8001074 <HAL_GPIO_Init+0x1ec>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	4a3f      	ldr	r2, [pc, #252]	; (800114c <HAL_GPIO_Init+0x2c4>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d00d      	beq.n	8001070 <HAL_GPIO_Init+0x1e8>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	4a3e      	ldr	r2, [pc, #248]	; (8001150 <HAL_GPIO_Init+0x2c8>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d007      	beq.n	800106c <HAL_GPIO_Init+0x1e4>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4a3d      	ldr	r2, [pc, #244]	; (8001154 <HAL_GPIO_Init+0x2cc>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d101      	bne.n	8001068 <HAL_GPIO_Init+0x1e0>
 8001064:	2303      	movs	r3, #3
 8001066:	e006      	b.n	8001076 <HAL_GPIO_Init+0x1ee>
 8001068:	2304      	movs	r3, #4
 800106a:	e004      	b.n	8001076 <HAL_GPIO_Init+0x1ee>
 800106c:	2302      	movs	r3, #2
 800106e:	e002      	b.n	8001076 <HAL_GPIO_Init+0x1ee>
 8001070:	2301      	movs	r3, #1
 8001072:	e000      	b.n	8001076 <HAL_GPIO_Init+0x1ee>
 8001074:	2300      	movs	r3, #0
 8001076:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001078:	f002 0203 	and.w	r2, r2, #3
 800107c:	0092      	lsls	r2, r2, #2
 800107e:	4093      	lsls	r3, r2
 8001080:	68fa      	ldr	r2, [r7, #12]
 8001082:	4313      	orrs	r3, r2
 8001084:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001086:	492f      	ldr	r1, [pc, #188]	; (8001144 <HAL_GPIO_Init+0x2bc>)
 8001088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108a:	089b      	lsrs	r3, r3, #2
 800108c:	3302      	adds	r3, #2
 800108e:	68fa      	ldr	r2, [r7, #12]
 8001090:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800109c:	2b00      	cmp	r3, #0
 800109e:	d006      	beq.n	80010ae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80010a0:	4b2d      	ldr	r3, [pc, #180]	; (8001158 <HAL_GPIO_Init+0x2d0>)
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	492c      	ldr	r1, [pc, #176]	; (8001158 <HAL_GPIO_Init+0x2d0>)
 80010a6:	69bb      	ldr	r3, [r7, #24]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	600b      	str	r3, [r1, #0]
 80010ac:	e006      	b.n	80010bc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010ae:	4b2a      	ldr	r3, [pc, #168]	; (8001158 <HAL_GPIO_Init+0x2d0>)
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	69bb      	ldr	r3, [r7, #24]
 80010b4:	43db      	mvns	r3, r3
 80010b6:	4928      	ldr	r1, [pc, #160]	; (8001158 <HAL_GPIO_Init+0x2d0>)
 80010b8:	4013      	ands	r3, r2
 80010ba:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d006      	beq.n	80010d6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80010c8:	4b23      	ldr	r3, [pc, #140]	; (8001158 <HAL_GPIO_Init+0x2d0>)
 80010ca:	685a      	ldr	r2, [r3, #4]
 80010cc:	4922      	ldr	r1, [pc, #136]	; (8001158 <HAL_GPIO_Init+0x2d0>)
 80010ce:	69bb      	ldr	r3, [r7, #24]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	604b      	str	r3, [r1, #4]
 80010d4:	e006      	b.n	80010e4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80010d6:	4b20      	ldr	r3, [pc, #128]	; (8001158 <HAL_GPIO_Init+0x2d0>)
 80010d8:	685a      	ldr	r2, [r3, #4]
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	43db      	mvns	r3, r3
 80010de:	491e      	ldr	r1, [pc, #120]	; (8001158 <HAL_GPIO_Init+0x2d0>)
 80010e0:	4013      	ands	r3, r2
 80010e2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d006      	beq.n	80010fe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80010f0:	4b19      	ldr	r3, [pc, #100]	; (8001158 <HAL_GPIO_Init+0x2d0>)
 80010f2:	689a      	ldr	r2, [r3, #8]
 80010f4:	4918      	ldr	r1, [pc, #96]	; (8001158 <HAL_GPIO_Init+0x2d0>)
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	608b      	str	r3, [r1, #8]
 80010fc:	e006      	b.n	800110c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80010fe:	4b16      	ldr	r3, [pc, #88]	; (8001158 <HAL_GPIO_Init+0x2d0>)
 8001100:	689a      	ldr	r2, [r3, #8]
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	43db      	mvns	r3, r3
 8001106:	4914      	ldr	r1, [pc, #80]	; (8001158 <HAL_GPIO_Init+0x2d0>)
 8001108:	4013      	ands	r3, r2
 800110a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001114:	2b00      	cmp	r3, #0
 8001116:	d021      	beq.n	800115c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001118:	4b0f      	ldr	r3, [pc, #60]	; (8001158 <HAL_GPIO_Init+0x2d0>)
 800111a:	68da      	ldr	r2, [r3, #12]
 800111c:	490e      	ldr	r1, [pc, #56]	; (8001158 <HAL_GPIO_Init+0x2d0>)
 800111e:	69bb      	ldr	r3, [r7, #24]
 8001120:	4313      	orrs	r3, r2
 8001122:	60cb      	str	r3, [r1, #12]
 8001124:	e021      	b.n	800116a <HAL_GPIO_Init+0x2e2>
 8001126:	bf00      	nop
 8001128:	10320000 	.word	0x10320000
 800112c:	10310000 	.word	0x10310000
 8001130:	10220000 	.word	0x10220000
 8001134:	10210000 	.word	0x10210000
 8001138:	10120000 	.word	0x10120000
 800113c:	10110000 	.word	0x10110000
 8001140:	40021000 	.word	0x40021000
 8001144:	40010000 	.word	0x40010000
 8001148:	40010800 	.word	0x40010800
 800114c:	40010c00 	.word	0x40010c00
 8001150:	40011000 	.word	0x40011000
 8001154:	40011400 	.word	0x40011400
 8001158:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800115c:	4b0b      	ldr	r3, [pc, #44]	; (800118c <HAL_GPIO_Init+0x304>)
 800115e:	68da      	ldr	r2, [r3, #12]
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	43db      	mvns	r3, r3
 8001164:	4909      	ldr	r1, [pc, #36]	; (800118c <HAL_GPIO_Init+0x304>)
 8001166:	4013      	ands	r3, r2
 8001168:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800116a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800116c:	3301      	adds	r3, #1
 800116e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001176:	fa22 f303 	lsr.w	r3, r2, r3
 800117a:	2b00      	cmp	r3, #0
 800117c:	f47f ae8e 	bne.w	8000e9c <HAL_GPIO_Init+0x14>
  }
}
 8001180:	bf00      	nop
 8001182:	bf00      	nop
 8001184:	372c      	adds	r7, #44	; 0x2c
 8001186:	46bd      	mov	sp, r7
 8001188:	bc80      	pop	{r7}
 800118a:	4770      	bx	lr
 800118c:	40010400 	.word	0x40010400

08001190 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	460b      	mov	r3, r1
 800119a:	807b      	strh	r3, [r7, #2]
 800119c:	4613      	mov	r3, r2
 800119e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011a0:	787b      	ldrb	r3, [r7, #1]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d003      	beq.n	80011ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011a6:	887a      	ldrh	r2, [r7, #2]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80011ac:	e003      	b.n	80011b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011ae:	887b      	ldrh	r3, [r7, #2]
 80011b0:	041a      	lsls	r2, r3, #16
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	611a      	str	r2, [r3, #16]
}
 80011b6:	bf00      	nop
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bc80      	pop	{r7}
 80011be:	4770      	bx	lr

080011c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d101      	bne.n	80011d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e272      	b.n	80016b8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f003 0301 	and.w	r3, r3, #1
 80011da:	2b00      	cmp	r3, #0
 80011dc:	f000 8087 	beq.w	80012ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80011e0:	4b92      	ldr	r3, [pc, #584]	; (800142c <HAL_RCC_OscConfig+0x26c>)
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f003 030c 	and.w	r3, r3, #12
 80011e8:	2b04      	cmp	r3, #4
 80011ea:	d00c      	beq.n	8001206 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011ec:	4b8f      	ldr	r3, [pc, #572]	; (800142c <HAL_RCC_OscConfig+0x26c>)
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f003 030c 	and.w	r3, r3, #12
 80011f4:	2b08      	cmp	r3, #8
 80011f6:	d112      	bne.n	800121e <HAL_RCC_OscConfig+0x5e>
 80011f8:	4b8c      	ldr	r3, [pc, #560]	; (800142c <HAL_RCC_OscConfig+0x26c>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001200:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001204:	d10b      	bne.n	800121e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001206:	4b89      	ldr	r3, [pc, #548]	; (800142c <HAL_RCC_OscConfig+0x26c>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d06c      	beq.n	80012ec <HAL_RCC_OscConfig+0x12c>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d168      	bne.n	80012ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e24c      	b.n	80016b8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001226:	d106      	bne.n	8001236 <HAL_RCC_OscConfig+0x76>
 8001228:	4b80      	ldr	r3, [pc, #512]	; (800142c <HAL_RCC_OscConfig+0x26c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a7f      	ldr	r2, [pc, #508]	; (800142c <HAL_RCC_OscConfig+0x26c>)
 800122e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001232:	6013      	str	r3, [r2, #0]
 8001234:	e02e      	b.n	8001294 <HAL_RCC_OscConfig+0xd4>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d10c      	bne.n	8001258 <HAL_RCC_OscConfig+0x98>
 800123e:	4b7b      	ldr	r3, [pc, #492]	; (800142c <HAL_RCC_OscConfig+0x26c>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a7a      	ldr	r2, [pc, #488]	; (800142c <HAL_RCC_OscConfig+0x26c>)
 8001244:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001248:	6013      	str	r3, [r2, #0]
 800124a:	4b78      	ldr	r3, [pc, #480]	; (800142c <HAL_RCC_OscConfig+0x26c>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a77      	ldr	r2, [pc, #476]	; (800142c <HAL_RCC_OscConfig+0x26c>)
 8001250:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001254:	6013      	str	r3, [r2, #0]
 8001256:	e01d      	b.n	8001294 <HAL_RCC_OscConfig+0xd4>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001260:	d10c      	bne.n	800127c <HAL_RCC_OscConfig+0xbc>
 8001262:	4b72      	ldr	r3, [pc, #456]	; (800142c <HAL_RCC_OscConfig+0x26c>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a71      	ldr	r2, [pc, #452]	; (800142c <HAL_RCC_OscConfig+0x26c>)
 8001268:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800126c:	6013      	str	r3, [r2, #0]
 800126e:	4b6f      	ldr	r3, [pc, #444]	; (800142c <HAL_RCC_OscConfig+0x26c>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a6e      	ldr	r2, [pc, #440]	; (800142c <HAL_RCC_OscConfig+0x26c>)
 8001274:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001278:	6013      	str	r3, [r2, #0]
 800127a:	e00b      	b.n	8001294 <HAL_RCC_OscConfig+0xd4>
 800127c:	4b6b      	ldr	r3, [pc, #428]	; (800142c <HAL_RCC_OscConfig+0x26c>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a6a      	ldr	r2, [pc, #424]	; (800142c <HAL_RCC_OscConfig+0x26c>)
 8001282:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001286:	6013      	str	r3, [r2, #0]
 8001288:	4b68      	ldr	r3, [pc, #416]	; (800142c <HAL_RCC_OscConfig+0x26c>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a67      	ldr	r2, [pc, #412]	; (800142c <HAL_RCC_OscConfig+0x26c>)
 800128e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001292:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d013      	beq.n	80012c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800129c:	f7ff faca 	bl	8000834 <HAL_GetTick>
 80012a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012a2:	e008      	b.n	80012b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012a4:	f7ff fac6 	bl	8000834 <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	2b64      	cmp	r3, #100	; 0x64
 80012b0:	d901      	bls.n	80012b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	e200      	b.n	80016b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012b6:	4b5d      	ldr	r3, [pc, #372]	; (800142c <HAL_RCC_OscConfig+0x26c>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d0f0      	beq.n	80012a4 <HAL_RCC_OscConfig+0xe4>
 80012c2:	e014      	b.n	80012ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c4:	f7ff fab6 	bl	8000834 <HAL_GetTick>
 80012c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ca:	e008      	b.n	80012de <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012cc:	f7ff fab2 	bl	8000834 <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	2b64      	cmp	r3, #100	; 0x64
 80012d8:	d901      	bls.n	80012de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e1ec      	b.n	80016b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012de:	4b53      	ldr	r3, [pc, #332]	; (800142c <HAL_RCC_OscConfig+0x26c>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d1f0      	bne.n	80012cc <HAL_RCC_OscConfig+0x10c>
 80012ea:	e000      	b.n	80012ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 0302 	and.w	r3, r3, #2
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d063      	beq.n	80013c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012fa:	4b4c      	ldr	r3, [pc, #304]	; (800142c <HAL_RCC_OscConfig+0x26c>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f003 030c 	and.w	r3, r3, #12
 8001302:	2b00      	cmp	r3, #0
 8001304:	d00b      	beq.n	800131e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001306:	4b49      	ldr	r3, [pc, #292]	; (800142c <HAL_RCC_OscConfig+0x26c>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f003 030c 	and.w	r3, r3, #12
 800130e:	2b08      	cmp	r3, #8
 8001310:	d11c      	bne.n	800134c <HAL_RCC_OscConfig+0x18c>
 8001312:	4b46      	ldr	r3, [pc, #280]	; (800142c <HAL_RCC_OscConfig+0x26c>)
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d116      	bne.n	800134c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800131e:	4b43      	ldr	r3, [pc, #268]	; (800142c <HAL_RCC_OscConfig+0x26c>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	2b00      	cmp	r3, #0
 8001328:	d005      	beq.n	8001336 <HAL_RCC_OscConfig+0x176>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	691b      	ldr	r3, [r3, #16]
 800132e:	2b01      	cmp	r3, #1
 8001330:	d001      	beq.n	8001336 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e1c0      	b.n	80016b8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001336:	4b3d      	ldr	r3, [pc, #244]	; (800142c <HAL_RCC_OscConfig+0x26c>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	695b      	ldr	r3, [r3, #20]
 8001342:	00db      	lsls	r3, r3, #3
 8001344:	4939      	ldr	r1, [pc, #228]	; (800142c <HAL_RCC_OscConfig+0x26c>)
 8001346:	4313      	orrs	r3, r2
 8001348:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800134a:	e03a      	b.n	80013c2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	691b      	ldr	r3, [r3, #16]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d020      	beq.n	8001396 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001354:	4b36      	ldr	r3, [pc, #216]	; (8001430 <HAL_RCC_OscConfig+0x270>)
 8001356:	2201      	movs	r2, #1
 8001358:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800135a:	f7ff fa6b 	bl	8000834 <HAL_GetTick>
 800135e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001360:	e008      	b.n	8001374 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001362:	f7ff fa67 	bl	8000834 <HAL_GetTick>
 8001366:	4602      	mov	r2, r0
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	2b02      	cmp	r3, #2
 800136e:	d901      	bls.n	8001374 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001370:	2303      	movs	r3, #3
 8001372:	e1a1      	b.n	80016b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001374:	4b2d      	ldr	r3, [pc, #180]	; (800142c <HAL_RCC_OscConfig+0x26c>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 0302 	and.w	r3, r3, #2
 800137c:	2b00      	cmp	r3, #0
 800137e:	d0f0      	beq.n	8001362 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001380:	4b2a      	ldr	r3, [pc, #168]	; (800142c <HAL_RCC_OscConfig+0x26c>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	695b      	ldr	r3, [r3, #20]
 800138c:	00db      	lsls	r3, r3, #3
 800138e:	4927      	ldr	r1, [pc, #156]	; (800142c <HAL_RCC_OscConfig+0x26c>)
 8001390:	4313      	orrs	r3, r2
 8001392:	600b      	str	r3, [r1, #0]
 8001394:	e015      	b.n	80013c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001396:	4b26      	ldr	r3, [pc, #152]	; (8001430 <HAL_RCC_OscConfig+0x270>)
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800139c:	f7ff fa4a 	bl	8000834 <HAL_GetTick>
 80013a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013a2:	e008      	b.n	80013b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013a4:	f7ff fa46 	bl	8000834 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d901      	bls.n	80013b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80013b2:	2303      	movs	r3, #3
 80013b4:	e180      	b.n	80016b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013b6:	4b1d      	ldr	r3, [pc, #116]	; (800142c <HAL_RCC_OscConfig+0x26c>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d1f0      	bne.n	80013a4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0308 	and.w	r3, r3, #8
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d03a      	beq.n	8001444 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	699b      	ldr	r3, [r3, #24]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d019      	beq.n	800140a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013d6:	4b17      	ldr	r3, [pc, #92]	; (8001434 <HAL_RCC_OscConfig+0x274>)
 80013d8:	2201      	movs	r2, #1
 80013da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013dc:	f7ff fa2a 	bl	8000834 <HAL_GetTick>
 80013e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013e2:	e008      	b.n	80013f6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013e4:	f7ff fa26 	bl	8000834 <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d901      	bls.n	80013f6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e160      	b.n	80016b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013f6:	4b0d      	ldr	r3, [pc, #52]	; (800142c <HAL_RCC_OscConfig+0x26c>)
 80013f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d0f0      	beq.n	80013e4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001402:	2001      	movs	r0, #1
 8001404:	f000 fad8 	bl	80019b8 <RCC_Delay>
 8001408:	e01c      	b.n	8001444 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800140a:	4b0a      	ldr	r3, [pc, #40]	; (8001434 <HAL_RCC_OscConfig+0x274>)
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001410:	f7ff fa10 	bl	8000834 <HAL_GetTick>
 8001414:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001416:	e00f      	b.n	8001438 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001418:	f7ff fa0c 	bl	8000834 <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	2b02      	cmp	r3, #2
 8001424:	d908      	bls.n	8001438 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001426:	2303      	movs	r3, #3
 8001428:	e146      	b.n	80016b8 <HAL_RCC_OscConfig+0x4f8>
 800142a:	bf00      	nop
 800142c:	40021000 	.word	0x40021000
 8001430:	42420000 	.word	0x42420000
 8001434:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001438:	4b92      	ldr	r3, [pc, #584]	; (8001684 <HAL_RCC_OscConfig+0x4c4>)
 800143a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800143c:	f003 0302 	and.w	r3, r3, #2
 8001440:	2b00      	cmp	r3, #0
 8001442:	d1e9      	bne.n	8001418 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0304 	and.w	r3, r3, #4
 800144c:	2b00      	cmp	r3, #0
 800144e:	f000 80a6 	beq.w	800159e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001452:	2300      	movs	r3, #0
 8001454:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001456:	4b8b      	ldr	r3, [pc, #556]	; (8001684 <HAL_RCC_OscConfig+0x4c4>)
 8001458:	69db      	ldr	r3, [r3, #28]
 800145a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d10d      	bne.n	800147e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001462:	4b88      	ldr	r3, [pc, #544]	; (8001684 <HAL_RCC_OscConfig+0x4c4>)
 8001464:	69db      	ldr	r3, [r3, #28]
 8001466:	4a87      	ldr	r2, [pc, #540]	; (8001684 <HAL_RCC_OscConfig+0x4c4>)
 8001468:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800146c:	61d3      	str	r3, [r2, #28]
 800146e:	4b85      	ldr	r3, [pc, #532]	; (8001684 <HAL_RCC_OscConfig+0x4c4>)
 8001470:	69db      	ldr	r3, [r3, #28]
 8001472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001476:	60bb      	str	r3, [r7, #8]
 8001478:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800147a:	2301      	movs	r3, #1
 800147c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800147e:	4b82      	ldr	r3, [pc, #520]	; (8001688 <HAL_RCC_OscConfig+0x4c8>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001486:	2b00      	cmp	r3, #0
 8001488:	d118      	bne.n	80014bc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800148a:	4b7f      	ldr	r3, [pc, #508]	; (8001688 <HAL_RCC_OscConfig+0x4c8>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a7e      	ldr	r2, [pc, #504]	; (8001688 <HAL_RCC_OscConfig+0x4c8>)
 8001490:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001494:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001496:	f7ff f9cd 	bl	8000834 <HAL_GetTick>
 800149a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800149c:	e008      	b.n	80014b0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800149e:	f7ff f9c9 	bl	8000834 <HAL_GetTick>
 80014a2:	4602      	mov	r2, r0
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	1ad3      	subs	r3, r2, r3
 80014a8:	2b64      	cmp	r3, #100	; 0x64
 80014aa:	d901      	bls.n	80014b0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80014ac:	2303      	movs	r3, #3
 80014ae:	e103      	b.n	80016b8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014b0:	4b75      	ldr	r3, [pc, #468]	; (8001688 <HAL_RCC_OscConfig+0x4c8>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d0f0      	beq.n	800149e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d106      	bne.n	80014d2 <HAL_RCC_OscConfig+0x312>
 80014c4:	4b6f      	ldr	r3, [pc, #444]	; (8001684 <HAL_RCC_OscConfig+0x4c4>)
 80014c6:	6a1b      	ldr	r3, [r3, #32]
 80014c8:	4a6e      	ldr	r2, [pc, #440]	; (8001684 <HAL_RCC_OscConfig+0x4c4>)
 80014ca:	f043 0301 	orr.w	r3, r3, #1
 80014ce:	6213      	str	r3, [r2, #32]
 80014d0:	e02d      	b.n	800152e <HAL_RCC_OscConfig+0x36e>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	68db      	ldr	r3, [r3, #12]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d10c      	bne.n	80014f4 <HAL_RCC_OscConfig+0x334>
 80014da:	4b6a      	ldr	r3, [pc, #424]	; (8001684 <HAL_RCC_OscConfig+0x4c4>)
 80014dc:	6a1b      	ldr	r3, [r3, #32]
 80014de:	4a69      	ldr	r2, [pc, #420]	; (8001684 <HAL_RCC_OscConfig+0x4c4>)
 80014e0:	f023 0301 	bic.w	r3, r3, #1
 80014e4:	6213      	str	r3, [r2, #32]
 80014e6:	4b67      	ldr	r3, [pc, #412]	; (8001684 <HAL_RCC_OscConfig+0x4c4>)
 80014e8:	6a1b      	ldr	r3, [r3, #32]
 80014ea:	4a66      	ldr	r2, [pc, #408]	; (8001684 <HAL_RCC_OscConfig+0x4c4>)
 80014ec:	f023 0304 	bic.w	r3, r3, #4
 80014f0:	6213      	str	r3, [r2, #32]
 80014f2:	e01c      	b.n	800152e <HAL_RCC_OscConfig+0x36e>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	2b05      	cmp	r3, #5
 80014fa:	d10c      	bne.n	8001516 <HAL_RCC_OscConfig+0x356>
 80014fc:	4b61      	ldr	r3, [pc, #388]	; (8001684 <HAL_RCC_OscConfig+0x4c4>)
 80014fe:	6a1b      	ldr	r3, [r3, #32]
 8001500:	4a60      	ldr	r2, [pc, #384]	; (8001684 <HAL_RCC_OscConfig+0x4c4>)
 8001502:	f043 0304 	orr.w	r3, r3, #4
 8001506:	6213      	str	r3, [r2, #32]
 8001508:	4b5e      	ldr	r3, [pc, #376]	; (8001684 <HAL_RCC_OscConfig+0x4c4>)
 800150a:	6a1b      	ldr	r3, [r3, #32]
 800150c:	4a5d      	ldr	r2, [pc, #372]	; (8001684 <HAL_RCC_OscConfig+0x4c4>)
 800150e:	f043 0301 	orr.w	r3, r3, #1
 8001512:	6213      	str	r3, [r2, #32]
 8001514:	e00b      	b.n	800152e <HAL_RCC_OscConfig+0x36e>
 8001516:	4b5b      	ldr	r3, [pc, #364]	; (8001684 <HAL_RCC_OscConfig+0x4c4>)
 8001518:	6a1b      	ldr	r3, [r3, #32]
 800151a:	4a5a      	ldr	r2, [pc, #360]	; (8001684 <HAL_RCC_OscConfig+0x4c4>)
 800151c:	f023 0301 	bic.w	r3, r3, #1
 8001520:	6213      	str	r3, [r2, #32]
 8001522:	4b58      	ldr	r3, [pc, #352]	; (8001684 <HAL_RCC_OscConfig+0x4c4>)
 8001524:	6a1b      	ldr	r3, [r3, #32]
 8001526:	4a57      	ldr	r2, [pc, #348]	; (8001684 <HAL_RCC_OscConfig+0x4c4>)
 8001528:	f023 0304 	bic.w	r3, r3, #4
 800152c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	68db      	ldr	r3, [r3, #12]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d015      	beq.n	8001562 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001536:	f7ff f97d 	bl	8000834 <HAL_GetTick>
 800153a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800153c:	e00a      	b.n	8001554 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800153e:	f7ff f979 	bl	8000834 <HAL_GetTick>
 8001542:	4602      	mov	r2, r0
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	f241 3288 	movw	r2, #5000	; 0x1388
 800154c:	4293      	cmp	r3, r2
 800154e:	d901      	bls.n	8001554 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001550:	2303      	movs	r3, #3
 8001552:	e0b1      	b.n	80016b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001554:	4b4b      	ldr	r3, [pc, #300]	; (8001684 <HAL_RCC_OscConfig+0x4c4>)
 8001556:	6a1b      	ldr	r3, [r3, #32]
 8001558:	f003 0302 	and.w	r3, r3, #2
 800155c:	2b00      	cmp	r3, #0
 800155e:	d0ee      	beq.n	800153e <HAL_RCC_OscConfig+0x37e>
 8001560:	e014      	b.n	800158c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001562:	f7ff f967 	bl	8000834 <HAL_GetTick>
 8001566:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001568:	e00a      	b.n	8001580 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800156a:	f7ff f963 	bl	8000834 <HAL_GetTick>
 800156e:	4602      	mov	r2, r0
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	f241 3288 	movw	r2, #5000	; 0x1388
 8001578:	4293      	cmp	r3, r2
 800157a:	d901      	bls.n	8001580 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800157c:	2303      	movs	r3, #3
 800157e:	e09b      	b.n	80016b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001580:	4b40      	ldr	r3, [pc, #256]	; (8001684 <HAL_RCC_OscConfig+0x4c4>)
 8001582:	6a1b      	ldr	r3, [r3, #32]
 8001584:	f003 0302 	and.w	r3, r3, #2
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1ee      	bne.n	800156a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800158c:	7dfb      	ldrb	r3, [r7, #23]
 800158e:	2b01      	cmp	r3, #1
 8001590:	d105      	bne.n	800159e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001592:	4b3c      	ldr	r3, [pc, #240]	; (8001684 <HAL_RCC_OscConfig+0x4c4>)
 8001594:	69db      	ldr	r3, [r3, #28]
 8001596:	4a3b      	ldr	r2, [pc, #236]	; (8001684 <HAL_RCC_OscConfig+0x4c4>)
 8001598:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800159c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	69db      	ldr	r3, [r3, #28]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f000 8087 	beq.w	80016b6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015a8:	4b36      	ldr	r3, [pc, #216]	; (8001684 <HAL_RCC_OscConfig+0x4c4>)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f003 030c 	and.w	r3, r3, #12
 80015b0:	2b08      	cmp	r3, #8
 80015b2:	d061      	beq.n	8001678 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	69db      	ldr	r3, [r3, #28]
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d146      	bne.n	800164a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015bc:	4b33      	ldr	r3, [pc, #204]	; (800168c <HAL_RCC_OscConfig+0x4cc>)
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c2:	f7ff f937 	bl	8000834 <HAL_GetTick>
 80015c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015c8:	e008      	b.n	80015dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015ca:	f7ff f933 	bl	8000834 <HAL_GetTick>
 80015ce:	4602      	mov	r2, r0
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d901      	bls.n	80015dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e06d      	b.n	80016b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015dc:	4b29      	ldr	r3, [pc, #164]	; (8001684 <HAL_RCC_OscConfig+0x4c4>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d1f0      	bne.n	80015ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6a1b      	ldr	r3, [r3, #32]
 80015ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015f0:	d108      	bne.n	8001604 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80015f2:	4b24      	ldr	r3, [pc, #144]	; (8001684 <HAL_RCC_OscConfig+0x4c4>)
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	4921      	ldr	r1, [pc, #132]	; (8001684 <HAL_RCC_OscConfig+0x4c4>)
 8001600:	4313      	orrs	r3, r2
 8001602:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001604:	4b1f      	ldr	r3, [pc, #124]	; (8001684 <HAL_RCC_OscConfig+0x4c4>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6a19      	ldr	r1, [r3, #32]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001614:	430b      	orrs	r3, r1
 8001616:	491b      	ldr	r1, [pc, #108]	; (8001684 <HAL_RCC_OscConfig+0x4c4>)
 8001618:	4313      	orrs	r3, r2
 800161a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800161c:	4b1b      	ldr	r3, [pc, #108]	; (800168c <HAL_RCC_OscConfig+0x4cc>)
 800161e:	2201      	movs	r2, #1
 8001620:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001622:	f7ff f907 	bl	8000834 <HAL_GetTick>
 8001626:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001628:	e008      	b.n	800163c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800162a:	f7ff f903 	bl	8000834 <HAL_GetTick>
 800162e:	4602      	mov	r2, r0
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	2b02      	cmp	r3, #2
 8001636:	d901      	bls.n	800163c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001638:	2303      	movs	r3, #3
 800163a:	e03d      	b.n	80016b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800163c:	4b11      	ldr	r3, [pc, #68]	; (8001684 <HAL_RCC_OscConfig+0x4c4>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d0f0      	beq.n	800162a <HAL_RCC_OscConfig+0x46a>
 8001648:	e035      	b.n	80016b6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800164a:	4b10      	ldr	r3, [pc, #64]	; (800168c <HAL_RCC_OscConfig+0x4cc>)
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001650:	f7ff f8f0 	bl	8000834 <HAL_GetTick>
 8001654:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001656:	e008      	b.n	800166a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001658:	f7ff f8ec 	bl	8000834 <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	2b02      	cmp	r3, #2
 8001664:	d901      	bls.n	800166a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e026      	b.n	80016b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800166a:	4b06      	ldr	r3, [pc, #24]	; (8001684 <HAL_RCC_OscConfig+0x4c4>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d1f0      	bne.n	8001658 <HAL_RCC_OscConfig+0x498>
 8001676:	e01e      	b.n	80016b6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	69db      	ldr	r3, [r3, #28]
 800167c:	2b01      	cmp	r3, #1
 800167e:	d107      	bne.n	8001690 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e019      	b.n	80016b8 <HAL_RCC_OscConfig+0x4f8>
 8001684:	40021000 	.word	0x40021000
 8001688:	40007000 	.word	0x40007000
 800168c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001690:	4b0b      	ldr	r3, [pc, #44]	; (80016c0 <HAL_RCC_OscConfig+0x500>)
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a1b      	ldr	r3, [r3, #32]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d106      	bne.n	80016b2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d001      	beq.n	80016b6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e000      	b.n	80016b8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80016b6:	2300      	movs	r3, #0
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3718      	adds	r7, #24
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	40021000 	.word	0x40021000

080016c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d101      	bne.n	80016d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e0d0      	b.n	800187a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016d8:	4b6a      	ldr	r3, [pc, #424]	; (8001884 <HAL_RCC_ClockConfig+0x1c0>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 0307 	and.w	r3, r3, #7
 80016e0:	683a      	ldr	r2, [r7, #0]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d910      	bls.n	8001708 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016e6:	4b67      	ldr	r3, [pc, #412]	; (8001884 <HAL_RCC_ClockConfig+0x1c0>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f023 0207 	bic.w	r2, r3, #7
 80016ee:	4965      	ldr	r1, [pc, #404]	; (8001884 <HAL_RCC_ClockConfig+0x1c0>)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016f6:	4b63      	ldr	r3, [pc, #396]	; (8001884 <HAL_RCC_ClockConfig+0x1c0>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0307 	and.w	r3, r3, #7
 80016fe:	683a      	ldr	r2, [r7, #0]
 8001700:	429a      	cmp	r2, r3
 8001702:	d001      	beq.n	8001708 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e0b8      	b.n	800187a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0302 	and.w	r3, r3, #2
 8001710:	2b00      	cmp	r3, #0
 8001712:	d020      	beq.n	8001756 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0304 	and.w	r3, r3, #4
 800171c:	2b00      	cmp	r3, #0
 800171e:	d005      	beq.n	800172c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001720:	4b59      	ldr	r3, [pc, #356]	; (8001888 <HAL_RCC_ClockConfig+0x1c4>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	4a58      	ldr	r2, [pc, #352]	; (8001888 <HAL_RCC_ClockConfig+0x1c4>)
 8001726:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800172a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0308 	and.w	r3, r3, #8
 8001734:	2b00      	cmp	r3, #0
 8001736:	d005      	beq.n	8001744 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001738:	4b53      	ldr	r3, [pc, #332]	; (8001888 <HAL_RCC_ClockConfig+0x1c4>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	4a52      	ldr	r2, [pc, #328]	; (8001888 <HAL_RCC_ClockConfig+0x1c4>)
 800173e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001742:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001744:	4b50      	ldr	r3, [pc, #320]	; (8001888 <HAL_RCC_ClockConfig+0x1c4>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	494d      	ldr	r1, [pc, #308]	; (8001888 <HAL_RCC_ClockConfig+0x1c4>)
 8001752:	4313      	orrs	r3, r2
 8001754:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	2b00      	cmp	r3, #0
 8001760:	d040      	beq.n	80017e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	2b01      	cmp	r3, #1
 8001768:	d107      	bne.n	800177a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800176a:	4b47      	ldr	r3, [pc, #284]	; (8001888 <HAL_RCC_ClockConfig+0x1c4>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d115      	bne.n	80017a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e07f      	b.n	800187a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	2b02      	cmp	r3, #2
 8001780:	d107      	bne.n	8001792 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001782:	4b41      	ldr	r3, [pc, #260]	; (8001888 <HAL_RCC_ClockConfig+0x1c4>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d109      	bne.n	80017a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e073      	b.n	800187a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001792:	4b3d      	ldr	r3, [pc, #244]	; (8001888 <HAL_RCC_ClockConfig+0x1c4>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	2b00      	cmp	r3, #0
 800179c:	d101      	bne.n	80017a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e06b      	b.n	800187a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017a2:	4b39      	ldr	r3, [pc, #228]	; (8001888 <HAL_RCC_ClockConfig+0x1c4>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f023 0203 	bic.w	r2, r3, #3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	4936      	ldr	r1, [pc, #216]	; (8001888 <HAL_RCC_ClockConfig+0x1c4>)
 80017b0:	4313      	orrs	r3, r2
 80017b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017b4:	f7ff f83e 	bl	8000834 <HAL_GetTick>
 80017b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ba:	e00a      	b.n	80017d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017bc:	f7ff f83a 	bl	8000834 <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e053      	b.n	800187a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017d2:	4b2d      	ldr	r3, [pc, #180]	; (8001888 <HAL_RCC_ClockConfig+0x1c4>)
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f003 020c 	and.w	r2, r3, #12
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d1eb      	bne.n	80017bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017e4:	4b27      	ldr	r3, [pc, #156]	; (8001884 <HAL_RCC_ClockConfig+0x1c0>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0307 	and.w	r3, r3, #7
 80017ec:	683a      	ldr	r2, [r7, #0]
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d210      	bcs.n	8001814 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017f2:	4b24      	ldr	r3, [pc, #144]	; (8001884 <HAL_RCC_ClockConfig+0x1c0>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f023 0207 	bic.w	r2, r3, #7
 80017fa:	4922      	ldr	r1, [pc, #136]	; (8001884 <HAL_RCC_ClockConfig+0x1c0>)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	4313      	orrs	r3, r2
 8001800:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001802:	4b20      	ldr	r3, [pc, #128]	; (8001884 <HAL_RCC_ClockConfig+0x1c0>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0307 	and.w	r3, r3, #7
 800180a:	683a      	ldr	r2, [r7, #0]
 800180c:	429a      	cmp	r2, r3
 800180e:	d001      	beq.n	8001814 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e032      	b.n	800187a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0304 	and.w	r3, r3, #4
 800181c:	2b00      	cmp	r3, #0
 800181e:	d008      	beq.n	8001832 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001820:	4b19      	ldr	r3, [pc, #100]	; (8001888 <HAL_RCC_ClockConfig+0x1c4>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	4916      	ldr	r1, [pc, #88]	; (8001888 <HAL_RCC_ClockConfig+0x1c4>)
 800182e:	4313      	orrs	r3, r2
 8001830:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0308 	and.w	r3, r3, #8
 800183a:	2b00      	cmp	r3, #0
 800183c:	d009      	beq.n	8001852 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800183e:	4b12      	ldr	r3, [pc, #72]	; (8001888 <HAL_RCC_ClockConfig+0x1c4>)
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	691b      	ldr	r3, [r3, #16]
 800184a:	00db      	lsls	r3, r3, #3
 800184c:	490e      	ldr	r1, [pc, #56]	; (8001888 <HAL_RCC_ClockConfig+0x1c4>)
 800184e:	4313      	orrs	r3, r2
 8001850:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001852:	f000 f821 	bl	8001898 <HAL_RCC_GetSysClockFreq>
 8001856:	4602      	mov	r2, r0
 8001858:	4b0b      	ldr	r3, [pc, #44]	; (8001888 <HAL_RCC_ClockConfig+0x1c4>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	091b      	lsrs	r3, r3, #4
 800185e:	f003 030f 	and.w	r3, r3, #15
 8001862:	490a      	ldr	r1, [pc, #40]	; (800188c <HAL_RCC_ClockConfig+0x1c8>)
 8001864:	5ccb      	ldrb	r3, [r1, r3]
 8001866:	fa22 f303 	lsr.w	r3, r2, r3
 800186a:	4a09      	ldr	r2, [pc, #36]	; (8001890 <HAL_RCC_ClockConfig+0x1cc>)
 800186c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800186e:	4b09      	ldr	r3, [pc, #36]	; (8001894 <HAL_RCC_ClockConfig+0x1d0>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4618      	mov	r0, r3
 8001874:	f7fe ff9c 	bl	80007b0 <HAL_InitTick>

  return HAL_OK;
 8001878:	2300      	movs	r3, #0
}
 800187a:	4618      	mov	r0, r3
 800187c:	3710      	adds	r7, #16
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40022000 	.word	0x40022000
 8001888:	40021000 	.word	0x40021000
 800188c:	08002c60 	.word	0x08002c60
 8001890:	20000000 	.word	0x20000000
 8001894:	20000004 	.word	0x20000004

08001898 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001898:	b490      	push	{r4, r7}
 800189a:	b08a      	sub	sp, #40	; 0x28
 800189c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800189e:	4b29      	ldr	r3, [pc, #164]	; (8001944 <HAL_RCC_GetSysClockFreq+0xac>)
 80018a0:	1d3c      	adds	r4, r7, #4
 80018a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80018a8:	f240 2301 	movw	r3, #513	; 0x201
 80018ac:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80018ae:	2300      	movs	r3, #0
 80018b0:	61fb      	str	r3, [r7, #28]
 80018b2:	2300      	movs	r3, #0
 80018b4:	61bb      	str	r3, [r7, #24]
 80018b6:	2300      	movs	r3, #0
 80018b8:	627b      	str	r3, [r7, #36]	; 0x24
 80018ba:	2300      	movs	r3, #0
 80018bc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80018be:	2300      	movs	r3, #0
 80018c0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80018c2:	4b21      	ldr	r3, [pc, #132]	; (8001948 <HAL_RCC_GetSysClockFreq+0xb0>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	f003 030c 	and.w	r3, r3, #12
 80018ce:	2b04      	cmp	r3, #4
 80018d0:	d002      	beq.n	80018d8 <HAL_RCC_GetSysClockFreq+0x40>
 80018d2:	2b08      	cmp	r3, #8
 80018d4:	d003      	beq.n	80018de <HAL_RCC_GetSysClockFreq+0x46>
 80018d6:	e02b      	b.n	8001930 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018d8:	4b1c      	ldr	r3, [pc, #112]	; (800194c <HAL_RCC_GetSysClockFreq+0xb4>)
 80018da:	623b      	str	r3, [r7, #32]
      break;
 80018dc:	e02b      	b.n	8001936 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	0c9b      	lsrs	r3, r3, #18
 80018e2:	f003 030f 	and.w	r3, r3, #15
 80018e6:	3328      	adds	r3, #40	; 0x28
 80018e8:	443b      	add	r3, r7
 80018ea:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80018ee:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d012      	beq.n	8001920 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80018fa:	4b13      	ldr	r3, [pc, #76]	; (8001948 <HAL_RCC_GetSysClockFreq+0xb0>)
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	0c5b      	lsrs	r3, r3, #17
 8001900:	f003 0301 	and.w	r3, r3, #1
 8001904:	3328      	adds	r3, #40	; 0x28
 8001906:	443b      	add	r3, r7
 8001908:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800190c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	4a0e      	ldr	r2, [pc, #56]	; (800194c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001912:	fb03 f202 	mul.w	r2, r3, r2
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	fbb2 f3f3 	udiv	r3, r2, r3
 800191c:	627b      	str	r3, [r7, #36]	; 0x24
 800191e:	e004      	b.n	800192a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	4a0b      	ldr	r2, [pc, #44]	; (8001950 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001924:	fb02 f303 	mul.w	r3, r2, r3
 8001928:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800192a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192c:	623b      	str	r3, [r7, #32]
      break;
 800192e:	e002      	b.n	8001936 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001930:	4b06      	ldr	r3, [pc, #24]	; (800194c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001932:	623b      	str	r3, [r7, #32]
      break;
 8001934:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001936:	6a3b      	ldr	r3, [r7, #32]
}
 8001938:	4618      	mov	r0, r3
 800193a:	3728      	adds	r7, #40	; 0x28
 800193c:	46bd      	mov	sp, r7
 800193e:	bc90      	pop	{r4, r7}
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	08002c50 	.word	0x08002c50
 8001948:	40021000 	.word	0x40021000
 800194c:	007a1200 	.word	0x007a1200
 8001950:	003d0900 	.word	0x003d0900

08001954 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001958:	4b02      	ldr	r3, [pc, #8]	; (8001964 <HAL_RCC_GetHCLKFreq+0x10>)
 800195a:	681b      	ldr	r3, [r3, #0]
}
 800195c:	4618      	mov	r0, r3
 800195e:	46bd      	mov	sp, r7
 8001960:	bc80      	pop	{r7}
 8001962:	4770      	bx	lr
 8001964:	20000000 	.word	0x20000000

08001968 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800196c:	f7ff fff2 	bl	8001954 <HAL_RCC_GetHCLKFreq>
 8001970:	4602      	mov	r2, r0
 8001972:	4b05      	ldr	r3, [pc, #20]	; (8001988 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	0a1b      	lsrs	r3, r3, #8
 8001978:	f003 0307 	and.w	r3, r3, #7
 800197c:	4903      	ldr	r1, [pc, #12]	; (800198c <HAL_RCC_GetPCLK1Freq+0x24>)
 800197e:	5ccb      	ldrb	r3, [r1, r3]
 8001980:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001984:	4618      	mov	r0, r3
 8001986:	bd80      	pop	{r7, pc}
 8001988:	40021000 	.word	0x40021000
 800198c:	08002c70 	.word	0x08002c70

08001990 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001994:	f7ff ffde 	bl	8001954 <HAL_RCC_GetHCLKFreq>
 8001998:	4602      	mov	r2, r0
 800199a:	4b05      	ldr	r3, [pc, #20]	; (80019b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	0adb      	lsrs	r3, r3, #11
 80019a0:	f003 0307 	and.w	r3, r3, #7
 80019a4:	4903      	ldr	r1, [pc, #12]	; (80019b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019a6:	5ccb      	ldrb	r3, [r1, r3]
 80019a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40021000 	.word	0x40021000
 80019b4:	08002c70 	.word	0x08002c70

080019b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b085      	sub	sp, #20
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80019c0:	4b0a      	ldr	r3, [pc, #40]	; (80019ec <RCC_Delay+0x34>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a0a      	ldr	r2, [pc, #40]	; (80019f0 <RCC_Delay+0x38>)
 80019c6:	fba2 2303 	umull	r2, r3, r2, r3
 80019ca:	0a5b      	lsrs	r3, r3, #9
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	fb02 f303 	mul.w	r3, r2, r3
 80019d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80019d4:	bf00      	nop
  }
  while (Delay --);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	1e5a      	subs	r2, r3, #1
 80019da:	60fa      	str	r2, [r7, #12]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d1f9      	bne.n	80019d4 <RCC_Delay+0x1c>
}
 80019e0:	bf00      	nop
 80019e2:	bf00      	nop
 80019e4:	3714      	adds	r7, #20
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bc80      	pop	{r7}
 80019ea:	4770      	bx	lr
 80019ec:	20000000 	.word	0x20000000
 80019f0:	10624dd3 	.word	0x10624dd3

080019f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d101      	bne.n	8001a06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e076      	b.n	8001af4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d108      	bne.n	8001a20 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001a16:	d009      	beq.n	8001a2c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	61da      	str	r2, [r3, #28]
 8001a1e:	e005      	b.n	8001a2c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d106      	bne.n	8001a4c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f7fe fcec 	bl	8000424 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2202      	movs	r2, #2
 8001a50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a62:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001a74:	431a      	orrs	r2, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a7e:	431a      	orrs	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	691b      	ldr	r3, [r3, #16]
 8001a84:	f003 0302 	and.w	r3, r3, #2
 8001a88:	431a      	orrs	r2, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	695b      	ldr	r3, [r3, #20]
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	431a      	orrs	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a9c:	431a      	orrs	r2, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	69db      	ldr	r3, [r3, #28]
 8001aa2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001aa6:	431a      	orrs	r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a1b      	ldr	r3, [r3, #32]
 8001aac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ab0:	ea42 0103 	orr.w	r1, r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	699b      	ldr	r3, [r3, #24]
 8001ac8:	0c1a      	lsrs	r2, r3, #16
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f002 0204 	and.w	r2, r2, #4
 8001ad2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	69da      	ldr	r2, [r3, #28]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ae2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2201      	movs	r2, #1
 8001aee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3708      	adds	r7, #8
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b086      	sub	sp, #24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	4613      	mov	r3, r2
 8001b08:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d101      	bne.n	8001b1c <HAL_SPI_Transmit_DMA+0x20>
 8001b18:	2302      	movs	r3, #2
 8001b1a:	e09b      	b.n	8001c54 <HAL_SPI_Transmit_DMA+0x158>
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d002      	beq.n	8001b36 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8001b30:	2302      	movs	r3, #2
 8001b32:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001b34:	e089      	b.n	8001c4a <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d002      	beq.n	8001b42 <HAL_SPI_Transmit_DMA+0x46>
 8001b3c:	88fb      	ldrh	r3, [r7, #6]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d102      	bne.n	8001b48 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001b46:	e080      	b.n	8001c4a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2203      	movs	r2, #3
 8001b4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2200      	movs	r2, #0
 8001b54:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	68ba      	ldr	r2, [r7, #8]
 8001b5a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	88fa      	ldrh	r2, [r7, #6]
 8001b60:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	88fa      	ldrh	r2, [r7, #6]
 8001b66:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2200      	movs	r2, #0
 8001b72:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2200      	movs	r2, #0
 8001b78:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2200      	movs	r2, #0
 8001b84:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b8e:	d10f      	bne.n	8001bb0 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b9e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001bae:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bb4:	4a29      	ldr	r2, [pc, #164]	; (8001c5c <HAL_SPI_Transmit_DMA+0x160>)
 8001bb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bbc:	4a28      	ldr	r2, [pc, #160]	; (8001c60 <HAL_SPI_Transmit_DMA+0x164>)
 8001bbe:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bc4:	4a27      	ldr	r2, [pc, #156]	; (8001c64 <HAL_SPI_Transmit_DMA+0x168>)
 8001bc6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bcc:	2200      	movs	r2, #0
 8001bce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd8:	4619      	mov	r1, r3
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	330c      	adds	r3, #12
 8001be0:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001be6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8001be8:	f7fe ffba 	bl	8000b60 <HAL_DMA_Start_IT>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d00c      	beq.n	8001c0c <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bf6:	f043 0210 	orr.w	r2, r3, #16
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2201      	movs	r2, #1
 8001c06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8001c0a:	e01e      	b.n	8001c4a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c16:	2b40      	cmp	r3, #64	; 0x40
 8001c18:	d007      	beq.n	8001c2a <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c28:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	685a      	ldr	r2, [r3, #4]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f042 0220 	orr.w	r2, r2, #32
 8001c38:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	685a      	ldr	r2, [r3, #4]
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f042 0202 	orr.w	r2, r2, #2
 8001c48:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001c52:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3718      	adds	r7, #24
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	08001d33 	.word	0x08001d33
 8001c60:	08001c8d 	.word	0x08001c8d
 8001c64:	08001d4f 	.word	0x08001d4f

08001c68 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8001c70:	bf00      	nop
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bc80      	pop	{r7}
 8001c78:	4770      	bx	lr

08001c7a <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	b083      	sub	sp, #12
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8001c82:	bf00      	nop
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bc80      	pop	{r7}
 8001c8a:	4770      	bx	lr

08001c8c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b086      	sub	sp, #24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c98:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001c9a:	f7fe fdcb 	bl	8000834 <HAL_GetTick>
 8001c9e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0320 	and.w	r3, r3, #32
 8001caa:	2b20      	cmp	r3, #32
 8001cac:	d03b      	beq.n	8001d26 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	685a      	ldr	r2, [r3, #4]
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f022 0220 	bic.w	r2, r2, #32
 8001cbc:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	685a      	ldr	r2, [r3, #4]
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f022 0202 	bic.w	r2, r2, #2
 8001ccc:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	2164      	movs	r1, #100	; 0x64
 8001cd2:	6978      	ldr	r0, [r7, #20]
 8001cd4:	f000 f8e4 	bl	8001ea0 <SPI_EndRxTxTransaction>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d005      	beq.n	8001cea <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ce2:	f043 0220 	orr.w	r2, r3, #32
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d10a      	bne.n	8001d08 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	60fb      	str	r3, [r7, #12]
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	60fb      	str	r3, [r7, #12]
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	60fb      	str	r3, [r7, #12]
 8001d06:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	2201      	movs	r2, #1
 8001d12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d003      	beq.n	8001d26 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8001d1e:	6978      	ldr	r0, [r7, #20]
 8001d20:	f7ff ffab 	bl	8001c7a <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8001d24:	e002      	b.n	8001d2c <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8001d26:	6978      	ldr	r0, [r7, #20]
 8001d28:	f7fe fb2a 	bl	8000380 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8001d2c:	3718      	adds	r7, #24
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b084      	sub	sp, #16
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8001d40:	68f8      	ldr	r0, [r7, #12]
 8001d42:	f7ff ff91 	bl	8001c68 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8001d46:	bf00      	nop
 8001d48:	3710      	adds	r7, #16
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b084      	sub	sp, #16
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5a:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	685a      	ldr	r2, [r3, #4]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f022 0203 	bic.w	r2, r2, #3
 8001d6a:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d70:	f043 0210 	orr.w	r2, r3, #16
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8001d80:	68f8      	ldr	r0, [r7, #12]
 8001d82:	f7ff ff7a 	bl	8001c7a <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8001d86:	bf00      	nop
 8001d88:	3710      	adds	r7, #16
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
	...

08001d90 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b088      	sub	sp, #32
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	603b      	str	r3, [r7, #0]
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001da0:	f7fe fd48 	bl	8000834 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001da8:	1a9b      	subs	r3, r3, r2
 8001daa:	683a      	ldr	r2, [r7, #0]
 8001dac:	4413      	add	r3, r2
 8001dae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001db0:	f7fe fd40 	bl	8000834 <HAL_GetTick>
 8001db4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001db6:	4b39      	ldr	r3, [pc, #228]	; (8001e9c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	015b      	lsls	r3, r3, #5
 8001dbc:	0d1b      	lsrs	r3, r3, #20
 8001dbe:	69fa      	ldr	r2, [r7, #28]
 8001dc0:	fb02 f303 	mul.w	r3, r2, r3
 8001dc4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001dc6:	e054      	b.n	8001e72 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dce:	d050      	beq.n	8001e72 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001dd0:	f7fe fd30 	bl	8000834 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	69fa      	ldr	r2, [r7, #28]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d902      	bls.n	8001de6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d13d      	bne.n	8001e62 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	685a      	ldr	r2, [r3, #4]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001df4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001dfe:	d111      	bne.n	8001e24 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e08:	d004      	beq.n	8001e14 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e12:	d107      	bne.n	8001e24 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e22:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e2c:	d10f      	bne.n	8001e4e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e3c:	601a      	str	r2, [r3, #0]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e4c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2201      	movs	r2, #1
 8001e52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e017      	b.n	8001e92 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d101      	bne.n	8001e6c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	689a      	ldr	r2, [r3, #8]
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	68ba      	ldr	r2, [r7, #8]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	bf0c      	ite	eq
 8001e82:	2301      	moveq	r3, #1
 8001e84:	2300      	movne	r3, #0
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	461a      	mov	r2, r3
 8001e8a:	79fb      	ldrb	r3, [r7, #7]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d19b      	bne.n	8001dc8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3720      	adds	r7, #32
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	20000000 	.word	0x20000000

08001ea0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af02      	add	r7, sp, #8
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	9300      	str	r3, [sp, #0]
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	2180      	movs	r1, #128	; 0x80
 8001eb6:	68f8      	ldr	r0, [r7, #12]
 8001eb8:	f7ff ff6a 	bl	8001d90 <SPI_WaitFlagStateUntilTimeout>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d007      	beq.n	8001ed2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ec6:	f043 0220 	orr.w	r2, r3, #32
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e000      	b.n	8001ed4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8001ed2:	2300      	movs	r3, #0
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3710      	adds	r7, #16
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d101      	bne.n	8001eee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e03f      	b.n	8001f6e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d106      	bne.n	8001f08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f7fe fbcc 	bl	80006a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2224      	movs	r2, #36	; 0x24
 8001f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	68da      	ldr	r2, [r3, #12]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f000 f905 	bl	8002130 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	691a      	ldr	r2, [r3, #16]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	695a      	ldr	r2, [r3, #20]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	68da      	ldr	r2, [r3, #12]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2220      	movs	r2, #32
 8001f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2220      	movs	r2, #32
 8001f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b08a      	sub	sp, #40	; 0x28
 8001f7a:	af02      	add	r7, sp, #8
 8001f7c:	60f8      	str	r0, [r7, #12]
 8001f7e:	60b9      	str	r1, [r7, #8]
 8001f80:	603b      	str	r3, [r7, #0]
 8001f82:	4613      	mov	r3, r2
 8001f84:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001f86:	2300      	movs	r3, #0
 8001f88:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	2b20      	cmp	r3, #32
 8001f94:	d17c      	bne.n	8002090 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d002      	beq.n	8001fa2 <HAL_UART_Transmit+0x2c>
 8001f9c:	88fb      	ldrh	r3, [r7, #6]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d101      	bne.n	8001fa6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e075      	b.n	8002092 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d101      	bne.n	8001fb4 <HAL_UART_Transmit+0x3e>
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	e06e      	b.n	8002092 <HAL_UART_Transmit+0x11c>
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2221      	movs	r2, #33	; 0x21
 8001fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001fca:	f7fe fc33 	bl	8000834 <HAL_GetTick>
 8001fce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	88fa      	ldrh	r2, [r7, #6]
 8001fd4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	88fa      	ldrh	r2, [r7, #6]
 8001fda:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fe4:	d108      	bne.n	8001ff8 <HAL_UART_Transmit+0x82>
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	691b      	ldr	r3, [r3, #16]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d104      	bne.n	8001ff8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	61bb      	str	r3, [r7, #24]
 8001ff6:	e003      	b.n	8002000 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2200      	movs	r2, #0
 8002004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002008:	e02a      	b.n	8002060 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	9300      	str	r3, [sp, #0]
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	2200      	movs	r2, #0
 8002012:	2180      	movs	r1, #128	; 0x80
 8002014:	68f8      	ldr	r0, [r7, #12]
 8002016:	f000 f840 	bl	800209a <UART_WaitOnFlagUntilTimeout>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d001      	beq.n	8002024 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e036      	b.n	8002092 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d10b      	bne.n	8002042 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	881b      	ldrh	r3, [r3, #0]
 800202e:	461a      	mov	r2, r3
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002038:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	3302      	adds	r3, #2
 800203e:	61bb      	str	r3, [r7, #24]
 8002040:	e007      	b.n	8002052 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	781a      	ldrb	r2, [r3, #0]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	3301      	adds	r3, #1
 8002050:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002056:	b29b      	uxth	r3, r3
 8002058:	3b01      	subs	r3, #1
 800205a:	b29a      	uxth	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002064:	b29b      	uxth	r3, r3
 8002066:	2b00      	cmp	r3, #0
 8002068:	d1cf      	bne.n	800200a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	9300      	str	r3, [sp, #0]
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	2200      	movs	r2, #0
 8002072:	2140      	movs	r1, #64	; 0x40
 8002074:	68f8      	ldr	r0, [r7, #12]
 8002076:	f000 f810 	bl	800209a <UART_WaitOnFlagUntilTimeout>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e006      	b.n	8002092 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2220      	movs	r2, #32
 8002088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800208c:	2300      	movs	r3, #0
 800208e:	e000      	b.n	8002092 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002090:	2302      	movs	r3, #2
  }
}
 8002092:	4618      	mov	r0, r3
 8002094:	3720      	adds	r7, #32
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b084      	sub	sp, #16
 800209e:	af00      	add	r7, sp, #0
 80020a0:	60f8      	str	r0, [r7, #12]
 80020a2:	60b9      	str	r1, [r7, #8]
 80020a4:	603b      	str	r3, [r7, #0]
 80020a6:	4613      	mov	r3, r2
 80020a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020aa:	e02c      	b.n	8002106 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020b2:	d028      	beq.n	8002106 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d007      	beq.n	80020ca <UART_WaitOnFlagUntilTimeout+0x30>
 80020ba:	f7fe fbbb 	bl	8000834 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d21d      	bcs.n	8002106 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	68da      	ldr	r2, [r3, #12]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80020d8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	695a      	ldr	r2, [r3, #20]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f022 0201 	bic.w	r2, r2, #1
 80020e8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2220      	movs	r2, #32
 80020ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2220      	movs	r2, #32
 80020f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e00f      	b.n	8002126 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	4013      	ands	r3, r2
 8002110:	68ba      	ldr	r2, [r7, #8]
 8002112:	429a      	cmp	r2, r3
 8002114:	bf0c      	ite	eq
 8002116:	2301      	moveq	r3, #1
 8002118:	2300      	movne	r3, #0
 800211a:	b2db      	uxtb	r3, r3
 800211c:	461a      	mov	r2, r3
 800211e:	79fb      	ldrb	r3, [r7, #7]
 8002120:	429a      	cmp	r2, r3
 8002122:	d0c3      	beq.n	80020ac <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3710      	adds	r7, #16
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
	...

08002130 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	68da      	ldr	r2, [r3, #12]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	430a      	orrs	r2, r1
 800214c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	689a      	ldr	r2, [r3, #8]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	431a      	orrs	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	695b      	ldr	r3, [r3, #20]
 800215c:	4313      	orrs	r3, r2
 800215e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800216a:	f023 030c 	bic.w	r3, r3, #12
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	6812      	ldr	r2, [r2, #0]
 8002172:	68b9      	ldr	r1, [r7, #8]
 8002174:	430b      	orrs	r3, r1
 8002176:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	695b      	ldr	r3, [r3, #20]
 800217e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	699a      	ldr	r2, [r3, #24]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	430a      	orrs	r2, r1
 800218c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a2c      	ldr	r2, [pc, #176]	; (8002244 <UART_SetConfig+0x114>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d103      	bne.n	80021a0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002198:	f7ff fbfa 	bl	8001990 <HAL_RCC_GetPCLK2Freq>
 800219c:	60f8      	str	r0, [r7, #12]
 800219e:	e002      	b.n	80021a6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80021a0:	f7ff fbe2 	bl	8001968 <HAL_RCC_GetPCLK1Freq>
 80021a4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80021a6:	68fa      	ldr	r2, [r7, #12]
 80021a8:	4613      	mov	r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	4413      	add	r3, r2
 80021ae:	009a      	lsls	r2, r3, #2
 80021b0:	441a      	add	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021bc:	4a22      	ldr	r2, [pc, #136]	; (8002248 <UART_SetConfig+0x118>)
 80021be:	fba2 2303 	umull	r2, r3, r2, r3
 80021c2:	095b      	lsrs	r3, r3, #5
 80021c4:	0119      	lsls	r1, r3, #4
 80021c6:	68fa      	ldr	r2, [r7, #12]
 80021c8:	4613      	mov	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	4413      	add	r3, r2
 80021ce:	009a      	lsls	r2, r3, #2
 80021d0:	441a      	add	r2, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80021dc:	4b1a      	ldr	r3, [pc, #104]	; (8002248 <UART_SetConfig+0x118>)
 80021de:	fba3 0302 	umull	r0, r3, r3, r2
 80021e2:	095b      	lsrs	r3, r3, #5
 80021e4:	2064      	movs	r0, #100	; 0x64
 80021e6:	fb00 f303 	mul.w	r3, r0, r3
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	011b      	lsls	r3, r3, #4
 80021ee:	3332      	adds	r3, #50	; 0x32
 80021f0:	4a15      	ldr	r2, [pc, #84]	; (8002248 <UART_SetConfig+0x118>)
 80021f2:	fba2 2303 	umull	r2, r3, r2, r3
 80021f6:	095b      	lsrs	r3, r3, #5
 80021f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021fc:	4419      	add	r1, r3
 80021fe:	68fa      	ldr	r2, [r7, #12]
 8002200:	4613      	mov	r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	4413      	add	r3, r2
 8002206:	009a      	lsls	r2, r3, #2
 8002208:	441a      	add	r2, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	fbb2 f2f3 	udiv	r2, r2, r3
 8002214:	4b0c      	ldr	r3, [pc, #48]	; (8002248 <UART_SetConfig+0x118>)
 8002216:	fba3 0302 	umull	r0, r3, r3, r2
 800221a:	095b      	lsrs	r3, r3, #5
 800221c:	2064      	movs	r0, #100	; 0x64
 800221e:	fb00 f303 	mul.w	r3, r0, r3
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	011b      	lsls	r3, r3, #4
 8002226:	3332      	adds	r3, #50	; 0x32
 8002228:	4a07      	ldr	r2, [pc, #28]	; (8002248 <UART_SetConfig+0x118>)
 800222a:	fba2 2303 	umull	r2, r3, r2, r3
 800222e:	095b      	lsrs	r3, r3, #5
 8002230:	f003 020f 	and.w	r2, r3, #15
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	440a      	add	r2, r1
 800223a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800223c:	bf00      	nop
 800223e:	3710      	adds	r7, #16
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	40013800 	.word	0x40013800
 8002248:	51eb851f 	.word	0x51eb851f

0800224c <__errno>:
 800224c:	4b01      	ldr	r3, [pc, #4]	; (8002254 <__errno+0x8>)
 800224e:	6818      	ldr	r0, [r3, #0]
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	2000000c 	.word	0x2000000c

08002258 <__libc_init_array>:
 8002258:	b570      	push	{r4, r5, r6, lr}
 800225a:	2600      	movs	r6, #0
 800225c:	4d0c      	ldr	r5, [pc, #48]	; (8002290 <__libc_init_array+0x38>)
 800225e:	4c0d      	ldr	r4, [pc, #52]	; (8002294 <__libc_init_array+0x3c>)
 8002260:	1b64      	subs	r4, r4, r5
 8002262:	10a4      	asrs	r4, r4, #2
 8002264:	42a6      	cmp	r6, r4
 8002266:	d109      	bne.n	800227c <__libc_init_array+0x24>
 8002268:	f000 fcd0 	bl	8002c0c <_init>
 800226c:	2600      	movs	r6, #0
 800226e:	4d0a      	ldr	r5, [pc, #40]	; (8002298 <__libc_init_array+0x40>)
 8002270:	4c0a      	ldr	r4, [pc, #40]	; (800229c <__libc_init_array+0x44>)
 8002272:	1b64      	subs	r4, r4, r5
 8002274:	10a4      	asrs	r4, r4, #2
 8002276:	42a6      	cmp	r6, r4
 8002278:	d105      	bne.n	8002286 <__libc_init_array+0x2e>
 800227a:	bd70      	pop	{r4, r5, r6, pc}
 800227c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002280:	4798      	blx	r3
 8002282:	3601      	adds	r6, #1
 8002284:	e7ee      	b.n	8002264 <__libc_init_array+0xc>
 8002286:	f855 3b04 	ldr.w	r3, [r5], #4
 800228a:	4798      	blx	r3
 800228c:	3601      	adds	r6, #1
 800228e:	e7f2      	b.n	8002276 <__libc_init_array+0x1e>
 8002290:	08002cac 	.word	0x08002cac
 8002294:	08002cac 	.word	0x08002cac
 8002298:	08002cac 	.word	0x08002cac
 800229c:	08002cb0 	.word	0x08002cb0

080022a0 <memset>:
 80022a0:	4603      	mov	r3, r0
 80022a2:	4402      	add	r2, r0
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d100      	bne.n	80022aa <memset+0xa>
 80022a8:	4770      	bx	lr
 80022aa:	f803 1b01 	strb.w	r1, [r3], #1
 80022ae:	e7f9      	b.n	80022a4 <memset+0x4>

080022b0 <sniprintf>:
 80022b0:	b40c      	push	{r2, r3}
 80022b2:	b530      	push	{r4, r5, lr}
 80022b4:	4b17      	ldr	r3, [pc, #92]	; (8002314 <sniprintf+0x64>)
 80022b6:	1e0c      	subs	r4, r1, #0
 80022b8:	681d      	ldr	r5, [r3, #0]
 80022ba:	b09d      	sub	sp, #116	; 0x74
 80022bc:	da08      	bge.n	80022d0 <sniprintf+0x20>
 80022be:	238b      	movs	r3, #139	; 0x8b
 80022c0:	f04f 30ff 	mov.w	r0, #4294967295
 80022c4:	602b      	str	r3, [r5, #0]
 80022c6:	b01d      	add	sp, #116	; 0x74
 80022c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80022cc:	b002      	add	sp, #8
 80022ce:	4770      	bx	lr
 80022d0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80022d4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80022d8:	bf0c      	ite	eq
 80022da:	4623      	moveq	r3, r4
 80022dc:	f104 33ff 	addne.w	r3, r4, #4294967295
 80022e0:	9304      	str	r3, [sp, #16]
 80022e2:	9307      	str	r3, [sp, #28]
 80022e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022e8:	9002      	str	r0, [sp, #8]
 80022ea:	9006      	str	r0, [sp, #24]
 80022ec:	f8ad 3016 	strh.w	r3, [sp, #22]
 80022f0:	4628      	mov	r0, r5
 80022f2:	ab21      	add	r3, sp, #132	; 0x84
 80022f4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80022f6:	a902      	add	r1, sp, #8
 80022f8:	9301      	str	r3, [sp, #4]
 80022fa:	f000 f889 	bl	8002410 <_svfiprintf_r>
 80022fe:	1c43      	adds	r3, r0, #1
 8002300:	bfbc      	itt	lt
 8002302:	238b      	movlt	r3, #139	; 0x8b
 8002304:	602b      	strlt	r3, [r5, #0]
 8002306:	2c00      	cmp	r4, #0
 8002308:	d0dd      	beq.n	80022c6 <sniprintf+0x16>
 800230a:	2200      	movs	r2, #0
 800230c:	9b02      	ldr	r3, [sp, #8]
 800230e:	701a      	strb	r2, [r3, #0]
 8002310:	e7d9      	b.n	80022c6 <sniprintf+0x16>
 8002312:	bf00      	nop
 8002314:	2000000c 	.word	0x2000000c

08002318 <siprintf>:
 8002318:	b40e      	push	{r1, r2, r3}
 800231a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800231e:	b500      	push	{lr}
 8002320:	b09c      	sub	sp, #112	; 0x70
 8002322:	ab1d      	add	r3, sp, #116	; 0x74
 8002324:	9002      	str	r0, [sp, #8]
 8002326:	9006      	str	r0, [sp, #24]
 8002328:	9107      	str	r1, [sp, #28]
 800232a:	9104      	str	r1, [sp, #16]
 800232c:	4808      	ldr	r0, [pc, #32]	; (8002350 <siprintf+0x38>)
 800232e:	4909      	ldr	r1, [pc, #36]	; (8002354 <siprintf+0x3c>)
 8002330:	f853 2b04 	ldr.w	r2, [r3], #4
 8002334:	9105      	str	r1, [sp, #20]
 8002336:	6800      	ldr	r0, [r0, #0]
 8002338:	a902      	add	r1, sp, #8
 800233a:	9301      	str	r3, [sp, #4]
 800233c:	f000 f868 	bl	8002410 <_svfiprintf_r>
 8002340:	2200      	movs	r2, #0
 8002342:	9b02      	ldr	r3, [sp, #8]
 8002344:	701a      	strb	r2, [r3, #0]
 8002346:	b01c      	add	sp, #112	; 0x70
 8002348:	f85d eb04 	ldr.w	lr, [sp], #4
 800234c:	b003      	add	sp, #12
 800234e:	4770      	bx	lr
 8002350:	2000000c 	.word	0x2000000c
 8002354:	ffff0208 	.word	0xffff0208

08002358 <__ssputs_r>:
 8002358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800235c:	688e      	ldr	r6, [r1, #8]
 800235e:	4682      	mov	sl, r0
 8002360:	429e      	cmp	r6, r3
 8002362:	460c      	mov	r4, r1
 8002364:	4690      	mov	r8, r2
 8002366:	461f      	mov	r7, r3
 8002368:	d838      	bhi.n	80023dc <__ssputs_r+0x84>
 800236a:	898a      	ldrh	r2, [r1, #12]
 800236c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002370:	d032      	beq.n	80023d8 <__ssputs_r+0x80>
 8002372:	6825      	ldr	r5, [r4, #0]
 8002374:	6909      	ldr	r1, [r1, #16]
 8002376:	3301      	adds	r3, #1
 8002378:	eba5 0901 	sub.w	r9, r5, r1
 800237c:	6965      	ldr	r5, [r4, #20]
 800237e:	444b      	add	r3, r9
 8002380:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002384:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002388:	106d      	asrs	r5, r5, #1
 800238a:	429d      	cmp	r5, r3
 800238c:	bf38      	it	cc
 800238e:	461d      	movcc	r5, r3
 8002390:	0553      	lsls	r3, r2, #21
 8002392:	d531      	bpl.n	80023f8 <__ssputs_r+0xa0>
 8002394:	4629      	mov	r1, r5
 8002396:	f000 fb6f 	bl	8002a78 <_malloc_r>
 800239a:	4606      	mov	r6, r0
 800239c:	b950      	cbnz	r0, 80023b4 <__ssputs_r+0x5c>
 800239e:	230c      	movs	r3, #12
 80023a0:	f04f 30ff 	mov.w	r0, #4294967295
 80023a4:	f8ca 3000 	str.w	r3, [sl]
 80023a8:	89a3      	ldrh	r3, [r4, #12]
 80023aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023ae:	81a3      	strh	r3, [r4, #12]
 80023b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80023b4:	464a      	mov	r2, r9
 80023b6:	6921      	ldr	r1, [r4, #16]
 80023b8:	f000 face 	bl	8002958 <memcpy>
 80023bc:	89a3      	ldrh	r3, [r4, #12]
 80023be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80023c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023c6:	81a3      	strh	r3, [r4, #12]
 80023c8:	6126      	str	r6, [r4, #16]
 80023ca:	444e      	add	r6, r9
 80023cc:	6026      	str	r6, [r4, #0]
 80023ce:	463e      	mov	r6, r7
 80023d0:	6165      	str	r5, [r4, #20]
 80023d2:	eba5 0509 	sub.w	r5, r5, r9
 80023d6:	60a5      	str	r5, [r4, #8]
 80023d8:	42be      	cmp	r6, r7
 80023da:	d900      	bls.n	80023de <__ssputs_r+0x86>
 80023dc:	463e      	mov	r6, r7
 80023de:	4632      	mov	r2, r6
 80023e0:	4641      	mov	r1, r8
 80023e2:	6820      	ldr	r0, [r4, #0]
 80023e4:	f000 fac6 	bl	8002974 <memmove>
 80023e8:	68a3      	ldr	r3, [r4, #8]
 80023ea:	2000      	movs	r0, #0
 80023ec:	1b9b      	subs	r3, r3, r6
 80023ee:	60a3      	str	r3, [r4, #8]
 80023f0:	6823      	ldr	r3, [r4, #0]
 80023f2:	4433      	add	r3, r6
 80023f4:	6023      	str	r3, [r4, #0]
 80023f6:	e7db      	b.n	80023b0 <__ssputs_r+0x58>
 80023f8:	462a      	mov	r2, r5
 80023fa:	f000 fbb1 	bl	8002b60 <_realloc_r>
 80023fe:	4606      	mov	r6, r0
 8002400:	2800      	cmp	r0, #0
 8002402:	d1e1      	bne.n	80023c8 <__ssputs_r+0x70>
 8002404:	4650      	mov	r0, sl
 8002406:	6921      	ldr	r1, [r4, #16]
 8002408:	f000 face 	bl	80029a8 <_free_r>
 800240c:	e7c7      	b.n	800239e <__ssputs_r+0x46>
	...

08002410 <_svfiprintf_r>:
 8002410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002414:	4698      	mov	r8, r3
 8002416:	898b      	ldrh	r3, [r1, #12]
 8002418:	4607      	mov	r7, r0
 800241a:	061b      	lsls	r3, r3, #24
 800241c:	460d      	mov	r5, r1
 800241e:	4614      	mov	r4, r2
 8002420:	b09d      	sub	sp, #116	; 0x74
 8002422:	d50e      	bpl.n	8002442 <_svfiprintf_r+0x32>
 8002424:	690b      	ldr	r3, [r1, #16]
 8002426:	b963      	cbnz	r3, 8002442 <_svfiprintf_r+0x32>
 8002428:	2140      	movs	r1, #64	; 0x40
 800242a:	f000 fb25 	bl	8002a78 <_malloc_r>
 800242e:	6028      	str	r0, [r5, #0]
 8002430:	6128      	str	r0, [r5, #16]
 8002432:	b920      	cbnz	r0, 800243e <_svfiprintf_r+0x2e>
 8002434:	230c      	movs	r3, #12
 8002436:	603b      	str	r3, [r7, #0]
 8002438:	f04f 30ff 	mov.w	r0, #4294967295
 800243c:	e0d1      	b.n	80025e2 <_svfiprintf_r+0x1d2>
 800243e:	2340      	movs	r3, #64	; 0x40
 8002440:	616b      	str	r3, [r5, #20]
 8002442:	2300      	movs	r3, #0
 8002444:	9309      	str	r3, [sp, #36]	; 0x24
 8002446:	2320      	movs	r3, #32
 8002448:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800244c:	2330      	movs	r3, #48	; 0x30
 800244e:	f04f 0901 	mov.w	r9, #1
 8002452:	f8cd 800c 	str.w	r8, [sp, #12]
 8002456:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80025fc <_svfiprintf_r+0x1ec>
 800245a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800245e:	4623      	mov	r3, r4
 8002460:	469a      	mov	sl, r3
 8002462:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002466:	b10a      	cbz	r2, 800246c <_svfiprintf_r+0x5c>
 8002468:	2a25      	cmp	r2, #37	; 0x25
 800246a:	d1f9      	bne.n	8002460 <_svfiprintf_r+0x50>
 800246c:	ebba 0b04 	subs.w	fp, sl, r4
 8002470:	d00b      	beq.n	800248a <_svfiprintf_r+0x7a>
 8002472:	465b      	mov	r3, fp
 8002474:	4622      	mov	r2, r4
 8002476:	4629      	mov	r1, r5
 8002478:	4638      	mov	r0, r7
 800247a:	f7ff ff6d 	bl	8002358 <__ssputs_r>
 800247e:	3001      	adds	r0, #1
 8002480:	f000 80aa 	beq.w	80025d8 <_svfiprintf_r+0x1c8>
 8002484:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002486:	445a      	add	r2, fp
 8002488:	9209      	str	r2, [sp, #36]	; 0x24
 800248a:	f89a 3000 	ldrb.w	r3, [sl]
 800248e:	2b00      	cmp	r3, #0
 8002490:	f000 80a2 	beq.w	80025d8 <_svfiprintf_r+0x1c8>
 8002494:	2300      	movs	r3, #0
 8002496:	f04f 32ff 	mov.w	r2, #4294967295
 800249a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800249e:	f10a 0a01 	add.w	sl, sl, #1
 80024a2:	9304      	str	r3, [sp, #16]
 80024a4:	9307      	str	r3, [sp, #28]
 80024a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80024aa:	931a      	str	r3, [sp, #104]	; 0x68
 80024ac:	4654      	mov	r4, sl
 80024ae:	2205      	movs	r2, #5
 80024b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80024b4:	4851      	ldr	r0, [pc, #324]	; (80025fc <_svfiprintf_r+0x1ec>)
 80024b6:	f000 fa41 	bl	800293c <memchr>
 80024ba:	9a04      	ldr	r2, [sp, #16]
 80024bc:	b9d8      	cbnz	r0, 80024f6 <_svfiprintf_r+0xe6>
 80024be:	06d0      	lsls	r0, r2, #27
 80024c0:	bf44      	itt	mi
 80024c2:	2320      	movmi	r3, #32
 80024c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80024c8:	0711      	lsls	r1, r2, #28
 80024ca:	bf44      	itt	mi
 80024cc:	232b      	movmi	r3, #43	; 0x2b
 80024ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80024d2:	f89a 3000 	ldrb.w	r3, [sl]
 80024d6:	2b2a      	cmp	r3, #42	; 0x2a
 80024d8:	d015      	beq.n	8002506 <_svfiprintf_r+0xf6>
 80024da:	4654      	mov	r4, sl
 80024dc:	2000      	movs	r0, #0
 80024de:	f04f 0c0a 	mov.w	ip, #10
 80024e2:	9a07      	ldr	r2, [sp, #28]
 80024e4:	4621      	mov	r1, r4
 80024e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80024ea:	3b30      	subs	r3, #48	; 0x30
 80024ec:	2b09      	cmp	r3, #9
 80024ee:	d94e      	bls.n	800258e <_svfiprintf_r+0x17e>
 80024f0:	b1b0      	cbz	r0, 8002520 <_svfiprintf_r+0x110>
 80024f2:	9207      	str	r2, [sp, #28]
 80024f4:	e014      	b.n	8002520 <_svfiprintf_r+0x110>
 80024f6:	eba0 0308 	sub.w	r3, r0, r8
 80024fa:	fa09 f303 	lsl.w	r3, r9, r3
 80024fe:	4313      	orrs	r3, r2
 8002500:	46a2      	mov	sl, r4
 8002502:	9304      	str	r3, [sp, #16]
 8002504:	e7d2      	b.n	80024ac <_svfiprintf_r+0x9c>
 8002506:	9b03      	ldr	r3, [sp, #12]
 8002508:	1d19      	adds	r1, r3, #4
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	9103      	str	r1, [sp, #12]
 800250e:	2b00      	cmp	r3, #0
 8002510:	bfbb      	ittet	lt
 8002512:	425b      	neglt	r3, r3
 8002514:	f042 0202 	orrlt.w	r2, r2, #2
 8002518:	9307      	strge	r3, [sp, #28]
 800251a:	9307      	strlt	r3, [sp, #28]
 800251c:	bfb8      	it	lt
 800251e:	9204      	strlt	r2, [sp, #16]
 8002520:	7823      	ldrb	r3, [r4, #0]
 8002522:	2b2e      	cmp	r3, #46	; 0x2e
 8002524:	d10c      	bne.n	8002540 <_svfiprintf_r+0x130>
 8002526:	7863      	ldrb	r3, [r4, #1]
 8002528:	2b2a      	cmp	r3, #42	; 0x2a
 800252a:	d135      	bne.n	8002598 <_svfiprintf_r+0x188>
 800252c:	9b03      	ldr	r3, [sp, #12]
 800252e:	3402      	adds	r4, #2
 8002530:	1d1a      	adds	r2, r3, #4
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	9203      	str	r2, [sp, #12]
 8002536:	2b00      	cmp	r3, #0
 8002538:	bfb8      	it	lt
 800253a:	f04f 33ff 	movlt.w	r3, #4294967295
 800253e:	9305      	str	r3, [sp, #20]
 8002540:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8002600 <_svfiprintf_r+0x1f0>
 8002544:	2203      	movs	r2, #3
 8002546:	4650      	mov	r0, sl
 8002548:	7821      	ldrb	r1, [r4, #0]
 800254a:	f000 f9f7 	bl	800293c <memchr>
 800254e:	b140      	cbz	r0, 8002562 <_svfiprintf_r+0x152>
 8002550:	2340      	movs	r3, #64	; 0x40
 8002552:	eba0 000a 	sub.w	r0, r0, sl
 8002556:	fa03 f000 	lsl.w	r0, r3, r0
 800255a:	9b04      	ldr	r3, [sp, #16]
 800255c:	3401      	adds	r4, #1
 800255e:	4303      	orrs	r3, r0
 8002560:	9304      	str	r3, [sp, #16]
 8002562:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002566:	2206      	movs	r2, #6
 8002568:	4826      	ldr	r0, [pc, #152]	; (8002604 <_svfiprintf_r+0x1f4>)
 800256a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800256e:	f000 f9e5 	bl	800293c <memchr>
 8002572:	2800      	cmp	r0, #0
 8002574:	d038      	beq.n	80025e8 <_svfiprintf_r+0x1d8>
 8002576:	4b24      	ldr	r3, [pc, #144]	; (8002608 <_svfiprintf_r+0x1f8>)
 8002578:	bb1b      	cbnz	r3, 80025c2 <_svfiprintf_r+0x1b2>
 800257a:	9b03      	ldr	r3, [sp, #12]
 800257c:	3307      	adds	r3, #7
 800257e:	f023 0307 	bic.w	r3, r3, #7
 8002582:	3308      	adds	r3, #8
 8002584:	9303      	str	r3, [sp, #12]
 8002586:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002588:	4433      	add	r3, r6
 800258a:	9309      	str	r3, [sp, #36]	; 0x24
 800258c:	e767      	b.n	800245e <_svfiprintf_r+0x4e>
 800258e:	460c      	mov	r4, r1
 8002590:	2001      	movs	r0, #1
 8002592:	fb0c 3202 	mla	r2, ip, r2, r3
 8002596:	e7a5      	b.n	80024e4 <_svfiprintf_r+0xd4>
 8002598:	2300      	movs	r3, #0
 800259a:	f04f 0c0a 	mov.w	ip, #10
 800259e:	4619      	mov	r1, r3
 80025a0:	3401      	adds	r4, #1
 80025a2:	9305      	str	r3, [sp, #20]
 80025a4:	4620      	mov	r0, r4
 80025a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80025aa:	3a30      	subs	r2, #48	; 0x30
 80025ac:	2a09      	cmp	r2, #9
 80025ae:	d903      	bls.n	80025b8 <_svfiprintf_r+0x1a8>
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d0c5      	beq.n	8002540 <_svfiprintf_r+0x130>
 80025b4:	9105      	str	r1, [sp, #20]
 80025b6:	e7c3      	b.n	8002540 <_svfiprintf_r+0x130>
 80025b8:	4604      	mov	r4, r0
 80025ba:	2301      	movs	r3, #1
 80025bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80025c0:	e7f0      	b.n	80025a4 <_svfiprintf_r+0x194>
 80025c2:	ab03      	add	r3, sp, #12
 80025c4:	9300      	str	r3, [sp, #0]
 80025c6:	462a      	mov	r2, r5
 80025c8:	4638      	mov	r0, r7
 80025ca:	4b10      	ldr	r3, [pc, #64]	; (800260c <_svfiprintf_r+0x1fc>)
 80025cc:	a904      	add	r1, sp, #16
 80025ce:	f3af 8000 	nop.w
 80025d2:	1c42      	adds	r2, r0, #1
 80025d4:	4606      	mov	r6, r0
 80025d6:	d1d6      	bne.n	8002586 <_svfiprintf_r+0x176>
 80025d8:	89ab      	ldrh	r3, [r5, #12]
 80025da:	065b      	lsls	r3, r3, #25
 80025dc:	f53f af2c 	bmi.w	8002438 <_svfiprintf_r+0x28>
 80025e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80025e2:	b01d      	add	sp, #116	; 0x74
 80025e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025e8:	ab03      	add	r3, sp, #12
 80025ea:	9300      	str	r3, [sp, #0]
 80025ec:	462a      	mov	r2, r5
 80025ee:	4638      	mov	r0, r7
 80025f0:	4b06      	ldr	r3, [pc, #24]	; (800260c <_svfiprintf_r+0x1fc>)
 80025f2:	a904      	add	r1, sp, #16
 80025f4:	f000 f87c 	bl	80026f0 <_printf_i>
 80025f8:	e7eb      	b.n	80025d2 <_svfiprintf_r+0x1c2>
 80025fa:	bf00      	nop
 80025fc:	08002c78 	.word	0x08002c78
 8002600:	08002c7e 	.word	0x08002c7e
 8002604:	08002c82 	.word	0x08002c82
 8002608:	00000000 	.word	0x00000000
 800260c:	08002359 	.word	0x08002359

08002610 <_printf_common>:
 8002610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002614:	4616      	mov	r6, r2
 8002616:	4699      	mov	r9, r3
 8002618:	688a      	ldr	r2, [r1, #8]
 800261a:	690b      	ldr	r3, [r1, #16]
 800261c:	4607      	mov	r7, r0
 800261e:	4293      	cmp	r3, r2
 8002620:	bfb8      	it	lt
 8002622:	4613      	movlt	r3, r2
 8002624:	6033      	str	r3, [r6, #0]
 8002626:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800262a:	460c      	mov	r4, r1
 800262c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002630:	b10a      	cbz	r2, 8002636 <_printf_common+0x26>
 8002632:	3301      	adds	r3, #1
 8002634:	6033      	str	r3, [r6, #0]
 8002636:	6823      	ldr	r3, [r4, #0]
 8002638:	0699      	lsls	r1, r3, #26
 800263a:	bf42      	ittt	mi
 800263c:	6833      	ldrmi	r3, [r6, #0]
 800263e:	3302      	addmi	r3, #2
 8002640:	6033      	strmi	r3, [r6, #0]
 8002642:	6825      	ldr	r5, [r4, #0]
 8002644:	f015 0506 	ands.w	r5, r5, #6
 8002648:	d106      	bne.n	8002658 <_printf_common+0x48>
 800264a:	f104 0a19 	add.w	sl, r4, #25
 800264e:	68e3      	ldr	r3, [r4, #12]
 8002650:	6832      	ldr	r2, [r6, #0]
 8002652:	1a9b      	subs	r3, r3, r2
 8002654:	42ab      	cmp	r3, r5
 8002656:	dc28      	bgt.n	80026aa <_printf_common+0x9a>
 8002658:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800265c:	1e13      	subs	r3, r2, #0
 800265e:	6822      	ldr	r2, [r4, #0]
 8002660:	bf18      	it	ne
 8002662:	2301      	movne	r3, #1
 8002664:	0692      	lsls	r2, r2, #26
 8002666:	d42d      	bmi.n	80026c4 <_printf_common+0xb4>
 8002668:	4649      	mov	r1, r9
 800266a:	4638      	mov	r0, r7
 800266c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002670:	47c0      	blx	r8
 8002672:	3001      	adds	r0, #1
 8002674:	d020      	beq.n	80026b8 <_printf_common+0xa8>
 8002676:	6823      	ldr	r3, [r4, #0]
 8002678:	68e5      	ldr	r5, [r4, #12]
 800267a:	f003 0306 	and.w	r3, r3, #6
 800267e:	2b04      	cmp	r3, #4
 8002680:	bf18      	it	ne
 8002682:	2500      	movne	r5, #0
 8002684:	6832      	ldr	r2, [r6, #0]
 8002686:	f04f 0600 	mov.w	r6, #0
 800268a:	68a3      	ldr	r3, [r4, #8]
 800268c:	bf08      	it	eq
 800268e:	1aad      	subeq	r5, r5, r2
 8002690:	6922      	ldr	r2, [r4, #16]
 8002692:	bf08      	it	eq
 8002694:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002698:	4293      	cmp	r3, r2
 800269a:	bfc4      	itt	gt
 800269c:	1a9b      	subgt	r3, r3, r2
 800269e:	18ed      	addgt	r5, r5, r3
 80026a0:	341a      	adds	r4, #26
 80026a2:	42b5      	cmp	r5, r6
 80026a4:	d11a      	bne.n	80026dc <_printf_common+0xcc>
 80026a6:	2000      	movs	r0, #0
 80026a8:	e008      	b.n	80026bc <_printf_common+0xac>
 80026aa:	2301      	movs	r3, #1
 80026ac:	4652      	mov	r2, sl
 80026ae:	4649      	mov	r1, r9
 80026b0:	4638      	mov	r0, r7
 80026b2:	47c0      	blx	r8
 80026b4:	3001      	adds	r0, #1
 80026b6:	d103      	bne.n	80026c0 <_printf_common+0xb0>
 80026b8:	f04f 30ff 	mov.w	r0, #4294967295
 80026bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026c0:	3501      	adds	r5, #1
 80026c2:	e7c4      	b.n	800264e <_printf_common+0x3e>
 80026c4:	2030      	movs	r0, #48	; 0x30
 80026c6:	18e1      	adds	r1, r4, r3
 80026c8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80026cc:	1c5a      	adds	r2, r3, #1
 80026ce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80026d2:	4422      	add	r2, r4
 80026d4:	3302      	adds	r3, #2
 80026d6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80026da:	e7c5      	b.n	8002668 <_printf_common+0x58>
 80026dc:	2301      	movs	r3, #1
 80026de:	4622      	mov	r2, r4
 80026e0:	4649      	mov	r1, r9
 80026e2:	4638      	mov	r0, r7
 80026e4:	47c0      	blx	r8
 80026e6:	3001      	adds	r0, #1
 80026e8:	d0e6      	beq.n	80026b8 <_printf_common+0xa8>
 80026ea:	3601      	adds	r6, #1
 80026ec:	e7d9      	b.n	80026a2 <_printf_common+0x92>
	...

080026f0 <_printf_i>:
 80026f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80026f4:	7e0f      	ldrb	r7, [r1, #24]
 80026f6:	4691      	mov	r9, r2
 80026f8:	2f78      	cmp	r7, #120	; 0x78
 80026fa:	4680      	mov	r8, r0
 80026fc:	460c      	mov	r4, r1
 80026fe:	469a      	mov	sl, r3
 8002700:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002702:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002706:	d807      	bhi.n	8002718 <_printf_i+0x28>
 8002708:	2f62      	cmp	r7, #98	; 0x62
 800270a:	d80a      	bhi.n	8002722 <_printf_i+0x32>
 800270c:	2f00      	cmp	r7, #0
 800270e:	f000 80d9 	beq.w	80028c4 <_printf_i+0x1d4>
 8002712:	2f58      	cmp	r7, #88	; 0x58
 8002714:	f000 80a4 	beq.w	8002860 <_printf_i+0x170>
 8002718:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800271c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002720:	e03a      	b.n	8002798 <_printf_i+0xa8>
 8002722:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002726:	2b15      	cmp	r3, #21
 8002728:	d8f6      	bhi.n	8002718 <_printf_i+0x28>
 800272a:	a101      	add	r1, pc, #4	; (adr r1, 8002730 <_printf_i+0x40>)
 800272c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002730:	08002789 	.word	0x08002789
 8002734:	0800279d 	.word	0x0800279d
 8002738:	08002719 	.word	0x08002719
 800273c:	08002719 	.word	0x08002719
 8002740:	08002719 	.word	0x08002719
 8002744:	08002719 	.word	0x08002719
 8002748:	0800279d 	.word	0x0800279d
 800274c:	08002719 	.word	0x08002719
 8002750:	08002719 	.word	0x08002719
 8002754:	08002719 	.word	0x08002719
 8002758:	08002719 	.word	0x08002719
 800275c:	080028ab 	.word	0x080028ab
 8002760:	080027cd 	.word	0x080027cd
 8002764:	0800288d 	.word	0x0800288d
 8002768:	08002719 	.word	0x08002719
 800276c:	08002719 	.word	0x08002719
 8002770:	080028cd 	.word	0x080028cd
 8002774:	08002719 	.word	0x08002719
 8002778:	080027cd 	.word	0x080027cd
 800277c:	08002719 	.word	0x08002719
 8002780:	08002719 	.word	0x08002719
 8002784:	08002895 	.word	0x08002895
 8002788:	682b      	ldr	r3, [r5, #0]
 800278a:	1d1a      	adds	r2, r3, #4
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	602a      	str	r2, [r5, #0]
 8002790:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002794:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002798:	2301      	movs	r3, #1
 800279a:	e0a4      	b.n	80028e6 <_printf_i+0x1f6>
 800279c:	6820      	ldr	r0, [r4, #0]
 800279e:	6829      	ldr	r1, [r5, #0]
 80027a0:	0606      	lsls	r6, r0, #24
 80027a2:	f101 0304 	add.w	r3, r1, #4
 80027a6:	d50a      	bpl.n	80027be <_printf_i+0xce>
 80027a8:	680e      	ldr	r6, [r1, #0]
 80027aa:	602b      	str	r3, [r5, #0]
 80027ac:	2e00      	cmp	r6, #0
 80027ae:	da03      	bge.n	80027b8 <_printf_i+0xc8>
 80027b0:	232d      	movs	r3, #45	; 0x2d
 80027b2:	4276      	negs	r6, r6
 80027b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80027b8:	230a      	movs	r3, #10
 80027ba:	485e      	ldr	r0, [pc, #376]	; (8002934 <_printf_i+0x244>)
 80027bc:	e019      	b.n	80027f2 <_printf_i+0x102>
 80027be:	680e      	ldr	r6, [r1, #0]
 80027c0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80027c4:	602b      	str	r3, [r5, #0]
 80027c6:	bf18      	it	ne
 80027c8:	b236      	sxthne	r6, r6
 80027ca:	e7ef      	b.n	80027ac <_printf_i+0xbc>
 80027cc:	682b      	ldr	r3, [r5, #0]
 80027ce:	6820      	ldr	r0, [r4, #0]
 80027d0:	1d19      	adds	r1, r3, #4
 80027d2:	6029      	str	r1, [r5, #0]
 80027d4:	0601      	lsls	r1, r0, #24
 80027d6:	d501      	bpl.n	80027dc <_printf_i+0xec>
 80027d8:	681e      	ldr	r6, [r3, #0]
 80027da:	e002      	b.n	80027e2 <_printf_i+0xf2>
 80027dc:	0646      	lsls	r6, r0, #25
 80027de:	d5fb      	bpl.n	80027d8 <_printf_i+0xe8>
 80027e0:	881e      	ldrh	r6, [r3, #0]
 80027e2:	2f6f      	cmp	r7, #111	; 0x6f
 80027e4:	bf0c      	ite	eq
 80027e6:	2308      	moveq	r3, #8
 80027e8:	230a      	movne	r3, #10
 80027ea:	4852      	ldr	r0, [pc, #328]	; (8002934 <_printf_i+0x244>)
 80027ec:	2100      	movs	r1, #0
 80027ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80027f2:	6865      	ldr	r5, [r4, #4]
 80027f4:	2d00      	cmp	r5, #0
 80027f6:	bfa8      	it	ge
 80027f8:	6821      	ldrge	r1, [r4, #0]
 80027fa:	60a5      	str	r5, [r4, #8]
 80027fc:	bfa4      	itt	ge
 80027fe:	f021 0104 	bicge.w	r1, r1, #4
 8002802:	6021      	strge	r1, [r4, #0]
 8002804:	b90e      	cbnz	r6, 800280a <_printf_i+0x11a>
 8002806:	2d00      	cmp	r5, #0
 8002808:	d04d      	beq.n	80028a6 <_printf_i+0x1b6>
 800280a:	4615      	mov	r5, r2
 800280c:	fbb6 f1f3 	udiv	r1, r6, r3
 8002810:	fb03 6711 	mls	r7, r3, r1, r6
 8002814:	5dc7      	ldrb	r7, [r0, r7]
 8002816:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800281a:	4637      	mov	r7, r6
 800281c:	42bb      	cmp	r3, r7
 800281e:	460e      	mov	r6, r1
 8002820:	d9f4      	bls.n	800280c <_printf_i+0x11c>
 8002822:	2b08      	cmp	r3, #8
 8002824:	d10b      	bne.n	800283e <_printf_i+0x14e>
 8002826:	6823      	ldr	r3, [r4, #0]
 8002828:	07de      	lsls	r6, r3, #31
 800282a:	d508      	bpl.n	800283e <_printf_i+0x14e>
 800282c:	6923      	ldr	r3, [r4, #16]
 800282e:	6861      	ldr	r1, [r4, #4]
 8002830:	4299      	cmp	r1, r3
 8002832:	bfde      	ittt	le
 8002834:	2330      	movle	r3, #48	; 0x30
 8002836:	f805 3c01 	strble.w	r3, [r5, #-1]
 800283a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800283e:	1b52      	subs	r2, r2, r5
 8002840:	6122      	str	r2, [r4, #16]
 8002842:	464b      	mov	r3, r9
 8002844:	4621      	mov	r1, r4
 8002846:	4640      	mov	r0, r8
 8002848:	f8cd a000 	str.w	sl, [sp]
 800284c:	aa03      	add	r2, sp, #12
 800284e:	f7ff fedf 	bl	8002610 <_printf_common>
 8002852:	3001      	adds	r0, #1
 8002854:	d14c      	bne.n	80028f0 <_printf_i+0x200>
 8002856:	f04f 30ff 	mov.w	r0, #4294967295
 800285a:	b004      	add	sp, #16
 800285c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002860:	4834      	ldr	r0, [pc, #208]	; (8002934 <_printf_i+0x244>)
 8002862:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002866:	6829      	ldr	r1, [r5, #0]
 8002868:	6823      	ldr	r3, [r4, #0]
 800286a:	f851 6b04 	ldr.w	r6, [r1], #4
 800286e:	6029      	str	r1, [r5, #0]
 8002870:	061d      	lsls	r5, r3, #24
 8002872:	d514      	bpl.n	800289e <_printf_i+0x1ae>
 8002874:	07df      	lsls	r7, r3, #31
 8002876:	bf44      	itt	mi
 8002878:	f043 0320 	orrmi.w	r3, r3, #32
 800287c:	6023      	strmi	r3, [r4, #0]
 800287e:	b91e      	cbnz	r6, 8002888 <_printf_i+0x198>
 8002880:	6823      	ldr	r3, [r4, #0]
 8002882:	f023 0320 	bic.w	r3, r3, #32
 8002886:	6023      	str	r3, [r4, #0]
 8002888:	2310      	movs	r3, #16
 800288a:	e7af      	b.n	80027ec <_printf_i+0xfc>
 800288c:	6823      	ldr	r3, [r4, #0]
 800288e:	f043 0320 	orr.w	r3, r3, #32
 8002892:	6023      	str	r3, [r4, #0]
 8002894:	2378      	movs	r3, #120	; 0x78
 8002896:	4828      	ldr	r0, [pc, #160]	; (8002938 <_printf_i+0x248>)
 8002898:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800289c:	e7e3      	b.n	8002866 <_printf_i+0x176>
 800289e:	0659      	lsls	r1, r3, #25
 80028a0:	bf48      	it	mi
 80028a2:	b2b6      	uxthmi	r6, r6
 80028a4:	e7e6      	b.n	8002874 <_printf_i+0x184>
 80028a6:	4615      	mov	r5, r2
 80028a8:	e7bb      	b.n	8002822 <_printf_i+0x132>
 80028aa:	682b      	ldr	r3, [r5, #0]
 80028ac:	6826      	ldr	r6, [r4, #0]
 80028ae:	1d18      	adds	r0, r3, #4
 80028b0:	6961      	ldr	r1, [r4, #20]
 80028b2:	6028      	str	r0, [r5, #0]
 80028b4:	0635      	lsls	r5, r6, #24
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	d501      	bpl.n	80028be <_printf_i+0x1ce>
 80028ba:	6019      	str	r1, [r3, #0]
 80028bc:	e002      	b.n	80028c4 <_printf_i+0x1d4>
 80028be:	0670      	lsls	r0, r6, #25
 80028c0:	d5fb      	bpl.n	80028ba <_printf_i+0x1ca>
 80028c2:	8019      	strh	r1, [r3, #0]
 80028c4:	2300      	movs	r3, #0
 80028c6:	4615      	mov	r5, r2
 80028c8:	6123      	str	r3, [r4, #16]
 80028ca:	e7ba      	b.n	8002842 <_printf_i+0x152>
 80028cc:	682b      	ldr	r3, [r5, #0]
 80028ce:	2100      	movs	r1, #0
 80028d0:	1d1a      	adds	r2, r3, #4
 80028d2:	602a      	str	r2, [r5, #0]
 80028d4:	681d      	ldr	r5, [r3, #0]
 80028d6:	6862      	ldr	r2, [r4, #4]
 80028d8:	4628      	mov	r0, r5
 80028da:	f000 f82f 	bl	800293c <memchr>
 80028de:	b108      	cbz	r0, 80028e4 <_printf_i+0x1f4>
 80028e0:	1b40      	subs	r0, r0, r5
 80028e2:	6060      	str	r0, [r4, #4]
 80028e4:	6863      	ldr	r3, [r4, #4]
 80028e6:	6123      	str	r3, [r4, #16]
 80028e8:	2300      	movs	r3, #0
 80028ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80028ee:	e7a8      	b.n	8002842 <_printf_i+0x152>
 80028f0:	462a      	mov	r2, r5
 80028f2:	4649      	mov	r1, r9
 80028f4:	4640      	mov	r0, r8
 80028f6:	6923      	ldr	r3, [r4, #16]
 80028f8:	47d0      	blx	sl
 80028fa:	3001      	adds	r0, #1
 80028fc:	d0ab      	beq.n	8002856 <_printf_i+0x166>
 80028fe:	6823      	ldr	r3, [r4, #0]
 8002900:	079b      	lsls	r3, r3, #30
 8002902:	d413      	bmi.n	800292c <_printf_i+0x23c>
 8002904:	68e0      	ldr	r0, [r4, #12]
 8002906:	9b03      	ldr	r3, [sp, #12]
 8002908:	4298      	cmp	r0, r3
 800290a:	bfb8      	it	lt
 800290c:	4618      	movlt	r0, r3
 800290e:	e7a4      	b.n	800285a <_printf_i+0x16a>
 8002910:	2301      	movs	r3, #1
 8002912:	4632      	mov	r2, r6
 8002914:	4649      	mov	r1, r9
 8002916:	4640      	mov	r0, r8
 8002918:	47d0      	blx	sl
 800291a:	3001      	adds	r0, #1
 800291c:	d09b      	beq.n	8002856 <_printf_i+0x166>
 800291e:	3501      	adds	r5, #1
 8002920:	68e3      	ldr	r3, [r4, #12]
 8002922:	9903      	ldr	r1, [sp, #12]
 8002924:	1a5b      	subs	r3, r3, r1
 8002926:	42ab      	cmp	r3, r5
 8002928:	dcf2      	bgt.n	8002910 <_printf_i+0x220>
 800292a:	e7eb      	b.n	8002904 <_printf_i+0x214>
 800292c:	2500      	movs	r5, #0
 800292e:	f104 0619 	add.w	r6, r4, #25
 8002932:	e7f5      	b.n	8002920 <_printf_i+0x230>
 8002934:	08002c89 	.word	0x08002c89
 8002938:	08002c9a 	.word	0x08002c9a

0800293c <memchr>:
 800293c:	4603      	mov	r3, r0
 800293e:	b510      	push	{r4, lr}
 8002940:	b2c9      	uxtb	r1, r1
 8002942:	4402      	add	r2, r0
 8002944:	4293      	cmp	r3, r2
 8002946:	4618      	mov	r0, r3
 8002948:	d101      	bne.n	800294e <memchr+0x12>
 800294a:	2000      	movs	r0, #0
 800294c:	e003      	b.n	8002956 <memchr+0x1a>
 800294e:	7804      	ldrb	r4, [r0, #0]
 8002950:	3301      	adds	r3, #1
 8002952:	428c      	cmp	r4, r1
 8002954:	d1f6      	bne.n	8002944 <memchr+0x8>
 8002956:	bd10      	pop	{r4, pc}

08002958 <memcpy>:
 8002958:	440a      	add	r2, r1
 800295a:	4291      	cmp	r1, r2
 800295c:	f100 33ff 	add.w	r3, r0, #4294967295
 8002960:	d100      	bne.n	8002964 <memcpy+0xc>
 8002962:	4770      	bx	lr
 8002964:	b510      	push	{r4, lr}
 8002966:	f811 4b01 	ldrb.w	r4, [r1], #1
 800296a:	4291      	cmp	r1, r2
 800296c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002970:	d1f9      	bne.n	8002966 <memcpy+0xe>
 8002972:	bd10      	pop	{r4, pc}

08002974 <memmove>:
 8002974:	4288      	cmp	r0, r1
 8002976:	b510      	push	{r4, lr}
 8002978:	eb01 0402 	add.w	r4, r1, r2
 800297c:	d902      	bls.n	8002984 <memmove+0x10>
 800297e:	4284      	cmp	r4, r0
 8002980:	4623      	mov	r3, r4
 8002982:	d807      	bhi.n	8002994 <memmove+0x20>
 8002984:	1e43      	subs	r3, r0, #1
 8002986:	42a1      	cmp	r1, r4
 8002988:	d008      	beq.n	800299c <memmove+0x28>
 800298a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800298e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002992:	e7f8      	b.n	8002986 <memmove+0x12>
 8002994:	4601      	mov	r1, r0
 8002996:	4402      	add	r2, r0
 8002998:	428a      	cmp	r2, r1
 800299a:	d100      	bne.n	800299e <memmove+0x2a>
 800299c:	bd10      	pop	{r4, pc}
 800299e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80029a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80029a6:	e7f7      	b.n	8002998 <memmove+0x24>

080029a8 <_free_r>:
 80029a8:	b538      	push	{r3, r4, r5, lr}
 80029aa:	4605      	mov	r5, r0
 80029ac:	2900      	cmp	r1, #0
 80029ae:	d040      	beq.n	8002a32 <_free_r+0x8a>
 80029b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80029b4:	1f0c      	subs	r4, r1, #4
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	bfb8      	it	lt
 80029ba:	18e4      	addlt	r4, r4, r3
 80029bc:	f000 f910 	bl	8002be0 <__malloc_lock>
 80029c0:	4a1c      	ldr	r2, [pc, #112]	; (8002a34 <_free_r+0x8c>)
 80029c2:	6813      	ldr	r3, [r2, #0]
 80029c4:	b933      	cbnz	r3, 80029d4 <_free_r+0x2c>
 80029c6:	6063      	str	r3, [r4, #4]
 80029c8:	6014      	str	r4, [r2, #0]
 80029ca:	4628      	mov	r0, r5
 80029cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80029d0:	f000 b90c 	b.w	8002bec <__malloc_unlock>
 80029d4:	42a3      	cmp	r3, r4
 80029d6:	d908      	bls.n	80029ea <_free_r+0x42>
 80029d8:	6820      	ldr	r0, [r4, #0]
 80029da:	1821      	adds	r1, r4, r0
 80029dc:	428b      	cmp	r3, r1
 80029de:	bf01      	itttt	eq
 80029e0:	6819      	ldreq	r1, [r3, #0]
 80029e2:	685b      	ldreq	r3, [r3, #4]
 80029e4:	1809      	addeq	r1, r1, r0
 80029e6:	6021      	streq	r1, [r4, #0]
 80029e8:	e7ed      	b.n	80029c6 <_free_r+0x1e>
 80029ea:	461a      	mov	r2, r3
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	b10b      	cbz	r3, 80029f4 <_free_r+0x4c>
 80029f0:	42a3      	cmp	r3, r4
 80029f2:	d9fa      	bls.n	80029ea <_free_r+0x42>
 80029f4:	6811      	ldr	r1, [r2, #0]
 80029f6:	1850      	adds	r0, r2, r1
 80029f8:	42a0      	cmp	r0, r4
 80029fa:	d10b      	bne.n	8002a14 <_free_r+0x6c>
 80029fc:	6820      	ldr	r0, [r4, #0]
 80029fe:	4401      	add	r1, r0
 8002a00:	1850      	adds	r0, r2, r1
 8002a02:	4283      	cmp	r3, r0
 8002a04:	6011      	str	r1, [r2, #0]
 8002a06:	d1e0      	bne.n	80029ca <_free_r+0x22>
 8002a08:	6818      	ldr	r0, [r3, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	4401      	add	r1, r0
 8002a0e:	6011      	str	r1, [r2, #0]
 8002a10:	6053      	str	r3, [r2, #4]
 8002a12:	e7da      	b.n	80029ca <_free_r+0x22>
 8002a14:	d902      	bls.n	8002a1c <_free_r+0x74>
 8002a16:	230c      	movs	r3, #12
 8002a18:	602b      	str	r3, [r5, #0]
 8002a1a:	e7d6      	b.n	80029ca <_free_r+0x22>
 8002a1c:	6820      	ldr	r0, [r4, #0]
 8002a1e:	1821      	adds	r1, r4, r0
 8002a20:	428b      	cmp	r3, r1
 8002a22:	bf01      	itttt	eq
 8002a24:	6819      	ldreq	r1, [r3, #0]
 8002a26:	685b      	ldreq	r3, [r3, #4]
 8002a28:	1809      	addeq	r1, r1, r0
 8002a2a:	6021      	streq	r1, [r4, #0]
 8002a2c:	6063      	str	r3, [r4, #4]
 8002a2e:	6054      	str	r4, [r2, #4]
 8002a30:	e7cb      	b.n	80029ca <_free_r+0x22>
 8002a32:	bd38      	pop	{r3, r4, r5, pc}
 8002a34:	20000184 	.word	0x20000184

08002a38 <sbrk_aligned>:
 8002a38:	b570      	push	{r4, r5, r6, lr}
 8002a3a:	4e0e      	ldr	r6, [pc, #56]	; (8002a74 <sbrk_aligned+0x3c>)
 8002a3c:	460c      	mov	r4, r1
 8002a3e:	6831      	ldr	r1, [r6, #0]
 8002a40:	4605      	mov	r5, r0
 8002a42:	b911      	cbnz	r1, 8002a4a <sbrk_aligned+0x12>
 8002a44:	f000 f8bc 	bl	8002bc0 <_sbrk_r>
 8002a48:	6030      	str	r0, [r6, #0]
 8002a4a:	4621      	mov	r1, r4
 8002a4c:	4628      	mov	r0, r5
 8002a4e:	f000 f8b7 	bl	8002bc0 <_sbrk_r>
 8002a52:	1c43      	adds	r3, r0, #1
 8002a54:	d00a      	beq.n	8002a6c <sbrk_aligned+0x34>
 8002a56:	1cc4      	adds	r4, r0, #3
 8002a58:	f024 0403 	bic.w	r4, r4, #3
 8002a5c:	42a0      	cmp	r0, r4
 8002a5e:	d007      	beq.n	8002a70 <sbrk_aligned+0x38>
 8002a60:	1a21      	subs	r1, r4, r0
 8002a62:	4628      	mov	r0, r5
 8002a64:	f000 f8ac 	bl	8002bc0 <_sbrk_r>
 8002a68:	3001      	adds	r0, #1
 8002a6a:	d101      	bne.n	8002a70 <sbrk_aligned+0x38>
 8002a6c:	f04f 34ff 	mov.w	r4, #4294967295
 8002a70:	4620      	mov	r0, r4
 8002a72:	bd70      	pop	{r4, r5, r6, pc}
 8002a74:	20000188 	.word	0x20000188

08002a78 <_malloc_r>:
 8002a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a7c:	1ccd      	adds	r5, r1, #3
 8002a7e:	f025 0503 	bic.w	r5, r5, #3
 8002a82:	3508      	adds	r5, #8
 8002a84:	2d0c      	cmp	r5, #12
 8002a86:	bf38      	it	cc
 8002a88:	250c      	movcc	r5, #12
 8002a8a:	2d00      	cmp	r5, #0
 8002a8c:	4607      	mov	r7, r0
 8002a8e:	db01      	blt.n	8002a94 <_malloc_r+0x1c>
 8002a90:	42a9      	cmp	r1, r5
 8002a92:	d905      	bls.n	8002aa0 <_malloc_r+0x28>
 8002a94:	230c      	movs	r3, #12
 8002a96:	2600      	movs	r6, #0
 8002a98:	603b      	str	r3, [r7, #0]
 8002a9a:	4630      	mov	r0, r6
 8002a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002aa0:	4e2e      	ldr	r6, [pc, #184]	; (8002b5c <_malloc_r+0xe4>)
 8002aa2:	f000 f89d 	bl	8002be0 <__malloc_lock>
 8002aa6:	6833      	ldr	r3, [r6, #0]
 8002aa8:	461c      	mov	r4, r3
 8002aaa:	bb34      	cbnz	r4, 8002afa <_malloc_r+0x82>
 8002aac:	4629      	mov	r1, r5
 8002aae:	4638      	mov	r0, r7
 8002ab0:	f7ff ffc2 	bl	8002a38 <sbrk_aligned>
 8002ab4:	1c43      	adds	r3, r0, #1
 8002ab6:	4604      	mov	r4, r0
 8002ab8:	d14d      	bne.n	8002b56 <_malloc_r+0xde>
 8002aba:	6834      	ldr	r4, [r6, #0]
 8002abc:	4626      	mov	r6, r4
 8002abe:	2e00      	cmp	r6, #0
 8002ac0:	d140      	bne.n	8002b44 <_malloc_r+0xcc>
 8002ac2:	6823      	ldr	r3, [r4, #0]
 8002ac4:	4631      	mov	r1, r6
 8002ac6:	4638      	mov	r0, r7
 8002ac8:	eb04 0803 	add.w	r8, r4, r3
 8002acc:	f000 f878 	bl	8002bc0 <_sbrk_r>
 8002ad0:	4580      	cmp	r8, r0
 8002ad2:	d13a      	bne.n	8002b4a <_malloc_r+0xd2>
 8002ad4:	6821      	ldr	r1, [r4, #0]
 8002ad6:	3503      	adds	r5, #3
 8002ad8:	1a6d      	subs	r5, r5, r1
 8002ada:	f025 0503 	bic.w	r5, r5, #3
 8002ade:	3508      	adds	r5, #8
 8002ae0:	2d0c      	cmp	r5, #12
 8002ae2:	bf38      	it	cc
 8002ae4:	250c      	movcc	r5, #12
 8002ae6:	4638      	mov	r0, r7
 8002ae8:	4629      	mov	r1, r5
 8002aea:	f7ff ffa5 	bl	8002a38 <sbrk_aligned>
 8002aee:	3001      	adds	r0, #1
 8002af0:	d02b      	beq.n	8002b4a <_malloc_r+0xd2>
 8002af2:	6823      	ldr	r3, [r4, #0]
 8002af4:	442b      	add	r3, r5
 8002af6:	6023      	str	r3, [r4, #0]
 8002af8:	e00e      	b.n	8002b18 <_malloc_r+0xa0>
 8002afa:	6822      	ldr	r2, [r4, #0]
 8002afc:	1b52      	subs	r2, r2, r5
 8002afe:	d41e      	bmi.n	8002b3e <_malloc_r+0xc6>
 8002b00:	2a0b      	cmp	r2, #11
 8002b02:	d916      	bls.n	8002b32 <_malloc_r+0xba>
 8002b04:	1961      	adds	r1, r4, r5
 8002b06:	42a3      	cmp	r3, r4
 8002b08:	6025      	str	r5, [r4, #0]
 8002b0a:	bf18      	it	ne
 8002b0c:	6059      	strne	r1, [r3, #4]
 8002b0e:	6863      	ldr	r3, [r4, #4]
 8002b10:	bf08      	it	eq
 8002b12:	6031      	streq	r1, [r6, #0]
 8002b14:	5162      	str	r2, [r4, r5]
 8002b16:	604b      	str	r3, [r1, #4]
 8002b18:	4638      	mov	r0, r7
 8002b1a:	f104 060b 	add.w	r6, r4, #11
 8002b1e:	f000 f865 	bl	8002bec <__malloc_unlock>
 8002b22:	f026 0607 	bic.w	r6, r6, #7
 8002b26:	1d23      	adds	r3, r4, #4
 8002b28:	1af2      	subs	r2, r6, r3
 8002b2a:	d0b6      	beq.n	8002a9a <_malloc_r+0x22>
 8002b2c:	1b9b      	subs	r3, r3, r6
 8002b2e:	50a3      	str	r3, [r4, r2]
 8002b30:	e7b3      	b.n	8002a9a <_malloc_r+0x22>
 8002b32:	6862      	ldr	r2, [r4, #4]
 8002b34:	42a3      	cmp	r3, r4
 8002b36:	bf0c      	ite	eq
 8002b38:	6032      	streq	r2, [r6, #0]
 8002b3a:	605a      	strne	r2, [r3, #4]
 8002b3c:	e7ec      	b.n	8002b18 <_malloc_r+0xa0>
 8002b3e:	4623      	mov	r3, r4
 8002b40:	6864      	ldr	r4, [r4, #4]
 8002b42:	e7b2      	b.n	8002aaa <_malloc_r+0x32>
 8002b44:	4634      	mov	r4, r6
 8002b46:	6876      	ldr	r6, [r6, #4]
 8002b48:	e7b9      	b.n	8002abe <_malloc_r+0x46>
 8002b4a:	230c      	movs	r3, #12
 8002b4c:	4638      	mov	r0, r7
 8002b4e:	603b      	str	r3, [r7, #0]
 8002b50:	f000 f84c 	bl	8002bec <__malloc_unlock>
 8002b54:	e7a1      	b.n	8002a9a <_malloc_r+0x22>
 8002b56:	6025      	str	r5, [r4, #0]
 8002b58:	e7de      	b.n	8002b18 <_malloc_r+0xa0>
 8002b5a:	bf00      	nop
 8002b5c:	20000184 	.word	0x20000184

08002b60 <_realloc_r>:
 8002b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b64:	4680      	mov	r8, r0
 8002b66:	4614      	mov	r4, r2
 8002b68:	460e      	mov	r6, r1
 8002b6a:	b921      	cbnz	r1, 8002b76 <_realloc_r+0x16>
 8002b6c:	4611      	mov	r1, r2
 8002b6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002b72:	f7ff bf81 	b.w	8002a78 <_malloc_r>
 8002b76:	b92a      	cbnz	r2, 8002b84 <_realloc_r+0x24>
 8002b78:	f7ff ff16 	bl	80029a8 <_free_r>
 8002b7c:	4625      	mov	r5, r4
 8002b7e:	4628      	mov	r0, r5
 8002b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b84:	f000 f838 	bl	8002bf8 <_malloc_usable_size_r>
 8002b88:	4284      	cmp	r4, r0
 8002b8a:	4607      	mov	r7, r0
 8002b8c:	d802      	bhi.n	8002b94 <_realloc_r+0x34>
 8002b8e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002b92:	d812      	bhi.n	8002bba <_realloc_r+0x5a>
 8002b94:	4621      	mov	r1, r4
 8002b96:	4640      	mov	r0, r8
 8002b98:	f7ff ff6e 	bl	8002a78 <_malloc_r>
 8002b9c:	4605      	mov	r5, r0
 8002b9e:	2800      	cmp	r0, #0
 8002ba0:	d0ed      	beq.n	8002b7e <_realloc_r+0x1e>
 8002ba2:	42bc      	cmp	r4, r7
 8002ba4:	4622      	mov	r2, r4
 8002ba6:	4631      	mov	r1, r6
 8002ba8:	bf28      	it	cs
 8002baa:	463a      	movcs	r2, r7
 8002bac:	f7ff fed4 	bl	8002958 <memcpy>
 8002bb0:	4631      	mov	r1, r6
 8002bb2:	4640      	mov	r0, r8
 8002bb4:	f7ff fef8 	bl	80029a8 <_free_r>
 8002bb8:	e7e1      	b.n	8002b7e <_realloc_r+0x1e>
 8002bba:	4635      	mov	r5, r6
 8002bbc:	e7df      	b.n	8002b7e <_realloc_r+0x1e>
	...

08002bc0 <_sbrk_r>:
 8002bc0:	b538      	push	{r3, r4, r5, lr}
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	4d05      	ldr	r5, [pc, #20]	; (8002bdc <_sbrk_r+0x1c>)
 8002bc6:	4604      	mov	r4, r0
 8002bc8:	4608      	mov	r0, r1
 8002bca:	602b      	str	r3, [r5, #0]
 8002bcc:	f7fd fd02 	bl	80005d4 <_sbrk>
 8002bd0:	1c43      	adds	r3, r0, #1
 8002bd2:	d102      	bne.n	8002bda <_sbrk_r+0x1a>
 8002bd4:	682b      	ldr	r3, [r5, #0]
 8002bd6:	b103      	cbz	r3, 8002bda <_sbrk_r+0x1a>
 8002bd8:	6023      	str	r3, [r4, #0]
 8002bda:	bd38      	pop	{r3, r4, r5, pc}
 8002bdc:	2000018c 	.word	0x2000018c

08002be0 <__malloc_lock>:
 8002be0:	4801      	ldr	r0, [pc, #4]	; (8002be8 <__malloc_lock+0x8>)
 8002be2:	f000 b811 	b.w	8002c08 <__retarget_lock_acquire_recursive>
 8002be6:	bf00      	nop
 8002be8:	20000190 	.word	0x20000190

08002bec <__malloc_unlock>:
 8002bec:	4801      	ldr	r0, [pc, #4]	; (8002bf4 <__malloc_unlock+0x8>)
 8002bee:	f000 b80c 	b.w	8002c0a <__retarget_lock_release_recursive>
 8002bf2:	bf00      	nop
 8002bf4:	20000190 	.word	0x20000190

08002bf8 <_malloc_usable_size_r>:
 8002bf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002bfc:	1f18      	subs	r0, r3, #4
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	bfbc      	itt	lt
 8002c02:	580b      	ldrlt	r3, [r1, r0]
 8002c04:	18c0      	addlt	r0, r0, r3
 8002c06:	4770      	bx	lr

08002c08 <__retarget_lock_acquire_recursive>:
 8002c08:	4770      	bx	lr

08002c0a <__retarget_lock_release_recursive>:
 8002c0a:	4770      	bx	lr

08002c0c <_init>:
 8002c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c0e:	bf00      	nop
 8002c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c12:	bc08      	pop	{r3}
 8002c14:	469e      	mov	lr, r3
 8002c16:	4770      	bx	lr

08002c18 <_fini>:
 8002c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c1a:	bf00      	nop
 8002c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c1e:	bc08      	pop	{r3}
 8002c20:	469e      	mov	lr, r3
 8002c22:	4770      	bx	lr
