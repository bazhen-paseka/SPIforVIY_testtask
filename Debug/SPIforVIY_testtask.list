
SPIforVIY_testtask.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032f0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  080033fc  080033fc  000133fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003490  08003490  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003490  08003490  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003490  08003490  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003490  08003490  00013490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003494  08003494  00013494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003498  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d0  20000070  08003508  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000240  08003508  00020240  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000080e2  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cc7  00000000  00000000  0002817b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008f8  00000000  00000000  00029e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000820  00000000  00000000  0002a740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001797b  00000000  00000000  0002af60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000abbf  00000000  00000000  000428db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083fca  00000000  00000000  0004d49a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d1464  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002704  00000000  00000000  000d14b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080033e4 	.word	0x080033e4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080033e4 	.word	0x080033e4

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000162:	4b10      	ldr	r3, [pc, #64]	; (80001a4 <MX_DMA_Init+0x48>)
 8000164:	695b      	ldr	r3, [r3, #20]
 8000166:	4a0f      	ldr	r2, [pc, #60]	; (80001a4 <MX_DMA_Init+0x48>)
 8000168:	f043 0301 	orr.w	r3, r3, #1
 800016c:	6153      	str	r3, [r2, #20]
 800016e:	4b0d      	ldr	r3, [pc, #52]	; (80001a4 <MX_DMA_Init+0x48>)
 8000170:	695b      	ldr	r3, [r3, #20]
 8000172:	f003 0301 	and.w	r3, r3, #1
 8000176:	607b      	str	r3, [r7, #4]
 8000178:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800017a:	2200      	movs	r2, #0
 800017c:	2100      	movs	r1, #0
 800017e:	200d      	movs	r0, #13
 8000180:	f000 fd43 	bl	8000c0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000184:	200d      	movs	r0, #13
 8000186:	f000 fd5c 	bl	8000c42 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800018a:	2200      	movs	r2, #0
 800018c:	2100      	movs	r1, #0
 800018e:	200e      	movs	r0, #14
 8000190:	f000 fd3b 	bl	8000c0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000194:	200e      	movs	r0, #14
 8000196:	f000 fd54 	bl	8000c42 <HAL_NVIC_EnableIRQ>

}
 800019a:	bf00      	nop
 800019c:	3708      	adds	r7, #8
 800019e:	46bd      	mov	sp, r7
 80001a0:	bd80      	pop	{r7, pc}
 80001a2:	bf00      	nop
 80001a4:	40021000 	.word	0x40021000

080001a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b088      	sub	sp, #32
 80001ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001ae:	f107 0310 	add.w	r3, r7, #16
 80001b2:	2200      	movs	r2, #0
 80001b4:	601a      	str	r2, [r3, #0]
 80001b6:	605a      	str	r2, [r3, #4]
 80001b8:	609a      	str	r2, [r3, #8]
 80001ba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001bc:	4b1d      	ldr	r3, [pc, #116]	; (8000234 <MX_GPIO_Init+0x8c>)
 80001be:	699b      	ldr	r3, [r3, #24]
 80001c0:	4a1c      	ldr	r2, [pc, #112]	; (8000234 <MX_GPIO_Init+0x8c>)
 80001c2:	f043 0320 	orr.w	r3, r3, #32
 80001c6:	6193      	str	r3, [r2, #24]
 80001c8:	4b1a      	ldr	r3, [pc, #104]	; (8000234 <MX_GPIO_Init+0x8c>)
 80001ca:	699b      	ldr	r3, [r3, #24]
 80001cc:	f003 0320 	and.w	r3, r3, #32
 80001d0:	60fb      	str	r3, [r7, #12]
 80001d2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001d4:	4b17      	ldr	r3, [pc, #92]	; (8000234 <MX_GPIO_Init+0x8c>)
 80001d6:	699b      	ldr	r3, [r3, #24]
 80001d8:	4a16      	ldr	r2, [pc, #88]	; (8000234 <MX_GPIO_Init+0x8c>)
 80001da:	f043 0304 	orr.w	r3, r3, #4
 80001de:	6193      	str	r3, [r2, #24]
 80001e0:	4b14      	ldr	r3, [pc, #80]	; (8000234 <MX_GPIO_Init+0x8c>)
 80001e2:	699b      	ldr	r3, [r3, #24]
 80001e4:	f003 0304 	and.w	r3, r3, #4
 80001e8:	60bb      	str	r3, [r7, #8]
 80001ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001ec:	4b11      	ldr	r3, [pc, #68]	; (8000234 <MX_GPIO_Init+0x8c>)
 80001ee:	699b      	ldr	r3, [r3, #24]
 80001f0:	4a10      	ldr	r2, [pc, #64]	; (8000234 <MX_GPIO_Init+0x8c>)
 80001f2:	f043 0308 	orr.w	r3, r3, #8
 80001f6:	6193      	str	r3, [r2, #24]
 80001f8:	4b0e      	ldr	r3, [pc, #56]	; (8000234 <MX_GPIO_Init+0x8c>)
 80001fa:	699b      	ldr	r3, [r3, #24]
 80001fc:	f003 0308 	and.w	r3, r3, #8
 8000200:	607b      	str	r3, [r7, #4]
 8000202:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000204:	2200      	movs	r2, #0
 8000206:	2102      	movs	r1, #2
 8000208:	480b      	ldr	r0, [pc, #44]	; (8000238 <MX_GPIO_Init+0x90>)
 800020a:	f001 f8a7 	bl	800135c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800020e:	2302      	movs	r3, #2
 8000210:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000212:	2301      	movs	r3, #1
 8000214:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000216:	2300      	movs	r3, #0
 8000218:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800021a:	2302      	movs	r3, #2
 800021c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800021e:	f107 0310 	add.w	r3, r7, #16
 8000222:	4619      	mov	r1, r3
 8000224:	4804      	ldr	r0, [pc, #16]	; (8000238 <MX_GPIO_Init+0x90>)
 8000226:	f000 ff15 	bl	8001054 <HAL_GPIO_Init>

}
 800022a:	bf00      	nop
 800022c:	3720      	adds	r7, #32
 800022e:	46bd      	mov	sp, r7
 8000230:	bd80      	pop	{r7, pc}
 8000232:	bf00      	nop
 8000234:	40021000 	.word	0x40021000
 8000238:	40010800 	.word	0x40010800

0800023c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b0c0      	sub	sp, #256	; 0x100
 8000240:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000242:	f000 fb85 	bl	8000950 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000246:	f000 f89b 	bl	8000380 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800024a:	f7ff ffad 	bl	80001a8 <MX_GPIO_Init>
  MX_DMA_Init();
 800024e:	f7ff ff85 	bl	800015c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000252:	f000 fae1 	bl	8000818 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8000256:	f000 f8f3 	bl	8000440 <MX_SPI1_Init>
  MX_SPI2_Init();
 800025a:	f000 f927 	bl	80004ac <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  	char DataChar[0xFF];
	sprintf(DataChar,"\r\n\tSPI for VIY\r\n\r\n" );
 800025e:	463b      	mov	r3, r7
 8000260:	493d      	ldr	r1, [pc, #244]	; (8000358 <main+0x11c>)
 8000262:	4618      	mov	r0, r3
 8000264:	f002 fc44 	bl	8002af0 <siprintf>
	HAL_UART_Transmit( &huart1, (uint8_t *)DataChar , strlen(DataChar) , 100 ) ;
 8000268:	463b      	mov	r3, r7
 800026a:	4618      	mov	r0, r3
 800026c:	f7ff ff6e 	bl	800014c <strlen>
 8000270:	4603      	mov	r3, r0
 8000272:	b29a      	uxth	r2, r3
 8000274:	4639      	mov	r1, r7
 8000276:	2364      	movs	r3, #100	; 0x64
 8000278:	4838      	ldr	r0, [pc, #224]	; (800035c <main+0x120>)
 800027a:	f002 fa68 	bl	800274e <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	for (uint8_t i = 0; i < SPI_BUFFER_SIZE; i++) {
 800027e:	2300      	movs	r3, #0
 8000280:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
 8000284:	e00c      	b.n	80002a0 <main+0x64>
		tx_buffer_u8[i] = 0x30 + i ;
 8000286:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 800028a:	f897 20ff 	ldrb.w	r2, [r7, #255]	; 0xff
 800028e:	3230      	adds	r2, #48	; 0x30
 8000290:	b2d1      	uxtb	r1, r2
 8000292:	4a33      	ldr	r2, [pc, #204]	; (8000360 <main+0x124>)
 8000294:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < SPI_BUFFER_SIZE; i++) {
 8000296:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 800029a:	3301      	adds	r3, #1
 800029c:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
 80002a0:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 80002a4:	2b0f      	cmp	r3, #15
 80002a6:	d9ee      	bls.n	8000286 <main+0x4a>
	}
	sprintf(DataChar,"\r\n\r\nSPI_Tx_DMA:\t" ) ;
 80002a8:	463b      	mov	r3, r7
 80002aa:	492e      	ldr	r1, [pc, #184]	; (8000364 <main+0x128>)
 80002ac:	4618      	mov	r0, r3
 80002ae:	f002 fc1f 	bl	8002af0 <siprintf>
	HAL_UART_Transmit( &huart1, (uint8_t *)DataChar , strlen(DataChar) , 100 ) ;
 80002b2:	463b      	mov	r3, r7
 80002b4:	4618      	mov	r0, r3
 80002b6:	f7ff ff49 	bl	800014c <strlen>
 80002ba:	4603      	mov	r3, r0
 80002bc:	b29a      	uxth	r2, r3
 80002be:	4639      	mov	r1, r7
 80002c0:	2364      	movs	r3, #100	; 0x64
 80002c2:	4826      	ldr	r0, [pc, #152]	; (800035c <main+0x120>)
 80002c4:	f002 fa43 	bl	800274e <HAL_UART_Transmit>
	snprintf(DataChar, SPI_BUFFER_SIZE , "%s", tx_buffer_u8 ) ;
 80002c8:	4638      	mov	r0, r7
 80002ca:	4b25      	ldr	r3, [pc, #148]	; (8000360 <main+0x124>)
 80002cc:	4a26      	ldr	r2, [pc, #152]	; (8000368 <main+0x12c>)
 80002ce:	2110      	movs	r1, #16
 80002d0:	f002 fbda 	bl	8002a88 <sniprintf>
	HAL_UART_Transmit( &huart1, (uint8_t *)DataChar , strlen(DataChar) , 100 ) ;
 80002d4:	463b      	mov	r3, r7
 80002d6:	4618      	mov	r0, r3
 80002d8:	f7ff ff38 	bl	800014c <strlen>
 80002dc:	4603      	mov	r3, r0
 80002de:	b29a      	uxth	r2, r3
 80002e0:	4639      	mov	r1, r7
 80002e2:	2364      	movs	r3, #100	; 0x64
 80002e4:	481d      	ldr	r0, [pc, #116]	; (800035c <main+0x120>)
 80002e6:	f002 fa32 	bl	800274e <HAL_UART_Transmit>

	HAL_SPI_Transmit_DMA(&hspi1, tx_buffer_u8, SPI_BUFFER_SIZE);
 80002ea:	2210      	movs	r2, #16
 80002ec:	491c      	ldr	r1, [pc, #112]	; (8000360 <main+0x124>)
 80002ee:	481f      	ldr	r0, [pc, #124]	; (800036c <main+0x130>)
 80002f0:	f001 ff9e 	bl	8002230 <HAL_SPI_Transmit_DMA>
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, RESET);
 80002f4:	2200      	movs	r2, #0
 80002f6:	2102      	movs	r1, #2
 80002f8:	481d      	ldr	r0, [pc, #116]	; (8000370 <main+0x134>)
 80002fa:	f001 f82f 	bl	800135c <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi2, rx_buffer_u8, SPI_BUFFER_SIZE, 500);
 80002fe:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000302:	2210      	movs	r2, #16
 8000304:	491b      	ldr	r1, [pc, #108]	; (8000374 <main+0x138>)
 8000306:	481c      	ldr	r0, [pc, #112]	; (8000378 <main+0x13c>)
 8000308:	f001 fcde 	bl	8001cc8 <HAL_SPI_Receive>

	HAL_Delay(1000);
 800030c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000310:	f000 fb80 	bl	8000a14 <HAL_Delay>

	sprintf(DataChar,"\r\nSPI_Rx:\t\t" ) ;
 8000314:	463b      	mov	r3, r7
 8000316:	4919      	ldr	r1, [pc, #100]	; (800037c <main+0x140>)
 8000318:	4618      	mov	r0, r3
 800031a:	f002 fbe9 	bl	8002af0 <siprintf>
	HAL_UART_Transmit( &huart1, (uint8_t *)DataChar , strlen(DataChar) , 100 ) ;
 800031e:	463b      	mov	r3, r7
 8000320:	4618      	mov	r0, r3
 8000322:	f7ff ff13 	bl	800014c <strlen>
 8000326:	4603      	mov	r3, r0
 8000328:	b29a      	uxth	r2, r3
 800032a:	4639      	mov	r1, r7
 800032c:	2364      	movs	r3, #100	; 0x64
 800032e:	480b      	ldr	r0, [pc, #44]	; (800035c <main+0x120>)
 8000330:	f002 fa0d 	bl	800274e <HAL_UART_Transmit>
	snprintf(DataChar, SPI_BUFFER_SIZE , "%s", (char*)rx_buffer_u8 ) ;
 8000334:	4638      	mov	r0, r7
 8000336:	4b0f      	ldr	r3, [pc, #60]	; (8000374 <main+0x138>)
 8000338:	4a0b      	ldr	r2, [pc, #44]	; (8000368 <main+0x12c>)
 800033a:	2110      	movs	r1, #16
 800033c:	f002 fba4 	bl	8002a88 <sniprintf>
	HAL_UART_Transmit( &huart1, (uint8_t *)DataChar , strlen(DataChar) , 100 ) ;
 8000340:	463b      	mov	r3, r7
 8000342:	4618      	mov	r0, r3
 8000344:	f7ff ff02 	bl	800014c <strlen>
 8000348:	4603      	mov	r3, r0
 800034a:	b29a      	uxth	r2, r3
 800034c:	4639      	mov	r1, r7
 800034e:	2364      	movs	r3, #100	; 0x64
 8000350:	4802      	ldr	r0, [pc, #8]	; (800035c <main+0x120>)
 8000352:	f002 f9fc 	bl	800274e <HAL_UART_Transmit>
	for (uint8_t i = 0; i < SPI_BUFFER_SIZE; i++) {
 8000356:	e792      	b.n	800027e <main+0x42>
 8000358:	080033fc 	.word	0x080033fc
 800035c:	200001e8 	.word	0x200001e8
 8000360:	2000008c 	.word	0x2000008c
 8000364:	08003410 	.word	0x08003410
 8000368:	08003424 	.word	0x08003424
 800036c:	200000ac 	.word	0x200000ac
 8000370:	40010800 	.word	0x40010800
 8000374:	2000009c 	.word	0x2000009c
 8000378:	20000104 	.word	0x20000104
 800037c:	08003428 	.word	0x08003428

08000380 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b090      	sub	sp, #64	; 0x40
 8000384:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000386:	f107 0318 	add.w	r3, r7, #24
 800038a:	2228      	movs	r2, #40	; 0x28
 800038c:	2100      	movs	r1, #0
 800038e:	4618      	mov	r0, r3
 8000390:	f002 fb72 	bl	8002a78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000394:	1d3b      	adds	r3, r7, #4
 8000396:	2200      	movs	r2, #0
 8000398:	601a      	str	r2, [r3, #0]
 800039a:	605a      	str	r2, [r3, #4]
 800039c:	609a      	str	r2, [r3, #8]
 800039e:	60da      	str	r2, [r3, #12]
 80003a0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003a2:	2301      	movs	r3, #1
 80003a4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003ac:	2300      	movs	r3, #0
 80003ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003b0:	2301      	movs	r3, #1
 80003b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003b4:	2302      	movs	r3, #2
 80003b6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80003be:	2300      	movs	r3, #0
 80003c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003c2:	f107 0318 	add.w	r3, r7, #24
 80003c6:	4618      	mov	r0, r3
 80003c8:	f000 ffe0 	bl	800138c <HAL_RCC_OscConfig>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d001      	beq.n	80003d6 <SystemClock_Config+0x56>
  {
    Error_Handler();
 80003d2:	f000 f82f 	bl	8000434 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003d6:	230f      	movs	r3, #15
 80003d8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003da:	2302      	movs	r3, #2
 80003dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003de:	2300      	movs	r3, #0
 80003e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003e2:	2300      	movs	r3, #0
 80003e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003e6:	2300      	movs	r3, #0
 80003e8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003ea:	1d3b      	adds	r3, r7, #4
 80003ec:	2100      	movs	r1, #0
 80003ee:	4618      	mov	r0, r3
 80003f0:	f001 fa4e 	bl	8001890 <HAL_RCC_ClockConfig>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80003fa:	f000 f81b 	bl	8000434 <Error_Handler>
  }
}
 80003fe:	bf00      	nop
 8000400:	3740      	adds	r7, #64	; 0x40
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}
	...

08000408 <HAL_SPI_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
  if (hspi->Instance == SPI1) {
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	4a05      	ldr	r2, [pc, #20]	; (800042c <HAL_SPI_TxCpltCallback+0x24>)
 8000416:	4293      	cmp	r3, r2
 8000418:	d104      	bne.n	8000424 <HAL_SPI_TxCpltCallback+0x1c>
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, SET);
 800041a:	2201      	movs	r2, #1
 800041c:	2102      	movs	r1, #2
 800041e:	4804      	ldr	r0, [pc, #16]	; (8000430 <HAL_SPI_TxCpltCallback+0x28>)
 8000420:	f000 ff9c 	bl	800135c <HAL_GPIO_WritePin>
  }
}
 8000424:	bf00      	nop
 8000426:	3708      	adds	r7, #8
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}
 800042c:	40013000 	.word	0x40013000
 8000430:	40010800 	.word	0x40010800

08000434 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000438:	b672      	cpsid	i
}
 800043a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800043c:	e7fe      	b.n	800043c <Error_Handler+0x8>
	...

08000440 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_tx;
DMA_HandleTypeDef hdma_spi2_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000444:	4b17      	ldr	r3, [pc, #92]	; (80004a4 <MX_SPI1_Init+0x64>)
 8000446:	4a18      	ldr	r2, [pc, #96]	; (80004a8 <MX_SPI1_Init+0x68>)
 8000448:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800044a:	4b16      	ldr	r3, [pc, #88]	; (80004a4 <MX_SPI1_Init+0x64>)
 800044c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000450:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000452:	4b14      	ldr	r3, [pc, #80]	; (80004a4 <MX_SPI1_Init+0x64>)
 8000454:	2200      	movs	r2, #0
 8000456:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000458:	4b12      	ldr	r3, [pc, #72]	; (80004a4 <MX_SPI1_Init+0x64>)
 800045a:	2200      	movs	r2, #0
 800045c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800045e:	4b11      	ldr	r3, [pc, #68]	; (80004a4 <MX_SPI1_Init+0x64>)
 8000460:	2200      	movs	r2, #0
 8000462:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000464:	4b0f      	ldr	r3, [pc, #60]	; (80004a4 <MX_SPI1_Init+0x64>)
 8000466:	2200      	movs	r2, #0
 8000468:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800046a:	4b0e      	ldr	r3, [pc, #56]	; (80004a4 <MX_SPI1_Init+0x64>)
 800046c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000470:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000472:	4b0c      	ldr	r3, [pc, #48]	; (80004a4 <MX_SPI1_Init+0x64>)
 8000474:	2238      	movs	r2, #56	; 0x38
 8000476:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000478:	4b0a      	ldr	r3, [pc, #40]	; (80004a4 <MX_SPI1_Init+0x64>)
 800047a:	2200      	movs	r2, #0
 800047c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800047e:	4b09      	ldr	r3, [pc, #36]	; (80004a4 <MX_SPI1_Init+0x64>)
 8000480:	2200      	movs	r2, #0
 8000482:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000484:	4b07      	ldr	r3, [pc, #28]	; (80004a4 <MX_SPI1_Init+0x64>)
 8000486:	2200      	movs	r2, #0
 8000488:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800048a:	4b06      	ldr	r3, [pc, #24]	; (80004a4 <MX_SPI1_Init+0x64>)
 800048c:	220a      	movs	r2, #10
 800048e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000490:	4804      	ldr	r0, [pc, #16]	; (80004a4 <MX_SPI1_Init+0x64>)
 8000492:	f001 fb95 	bl	8001bc0 <HAL_SPI_Init>
 8000496:	4603      	mov	r3, r0
 8000498:	2b00      	cmp	r3, #0
 800049a:	d001      	beq.n	80004a0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800049c:	f7ff ffca 	bl	8000434 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80004a0:	bf00      	nop
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	200000ac 	.word	0x200000ac
 80004a8:	40013000 	.word	0x40013000

080004ac <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80004b0:	4b15      	ldr	r3, [pc, #84]	; (8000508 <MX_SPI2_Init+0x5c>)
 80004b2:	4a16      	ldr	r2, [pc, #88]	; (800050c <MX_SPI2_Init+0x60>)
 80004b4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80004b6:	4b14      	ldr	r3, [pc, #80]	; (8000508 <MX_SPI2_Init+0x5c>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80004bc:	4b12      	ldr	r3, [pc, #72]	; (8000508 <MX_SPI2_Init+0x5c>)
 80004be:	2200      	movs	r2, #0
 80004c0:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80004c2:	4b11      	ldr	r3, [pc, #68]	; (8000508 <MX_SPI2_Init+0x5c>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80004c8:	4b0f      	ldr	r3, [pc, #60]	; (8000508 <MX_SPI2_Init+0x5c>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80004ce:	4b0e      	ldr	r3, [pc, #56]	; (8000508 <MX_SPI2_Init+0x5c>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80004d4:	4b0c      	ldr	r3, [pc, #48]	; (8000508 <MX_SPI2_Init+0x5c>)
 80004d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80004da:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004dc:	4b0a      	ldr	r3, [pc, #40]	; (8000508 <MX_SPI2_Init+0x5c>)
 80004de:	2200      	movs	r2, #0
 80004e0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80004e2:	4b09      	ldr	r3, [pc, #36]	; (8000508 <MX_SPI2_Init+0x5c>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004e8:	4b07      	ldr	r3, [pc, #28]	; (8000508 <MX_SPI2_Init+0x5c>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80004ee:	4b06      	ldr	r3, [pc, #24]	; (8000508 <MX_SPI2_Init+0x5c>)
 80004f0:	220a      	movs	r2, #10
 80004f2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80004f4:	4804      	ldr	r0, [pc, #16]	; (8000508 <MX_SPI2_Init+0x5c>)
 80004f6:	f001 fb63 	bl	8001bc0 <HAL_SPI_Init>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d001      	beq.n	8000504 <MX_SPI2_Init+0x58>
  {
    Error_Handler();
 8000500:	f7ff ff98 	bl	8000434 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000504:	bf00      	nop
 8000506:	bd80      	pop	{r7, pc}
 8000508:	20000104 	.word	0x20000104
 800050c:	40003800 	.word	0x40003800

08000510 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b08a      	sub	sp, #40	; 0x28
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000518:	f107 0318 	add.w	r3, r7, #24
 800051c:	2200      	movs	r2, #0
 800051e:	601a      	str	r2, [r3, #0]
 8000520:	605a      	str	r2, [r3, #4]
 8000522:	609a      	str	r2, [r3, #8]
 8000524:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	4a5d      	ldr	r2, [pc, #372]	; (80006a0 <HAL_SPI_MspInit+0x190>)
 800052c:	4293      	cmp	r3, r2
 800052e:	d156      	bne.n	80005de <HAL_SPI_MspInit+0xce>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000530:	4b5c      	ldr	r3, [pc, #368]	; (80006a4 <HAL_SPI_MspInit+0x194>)
 8000532:	699b      	ldr	r3, [r3, #24]
 8000534:	4a5b      	ldr	r2, [pc, #364]	; (80006a4 <HAL_SPI_MspInit+0x194>)
 8000536:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800053a:	6193      	str	r3, [r2, #24]
 800053c:	4b59      	ldr	r3, [pc, #356]	; (80006a4 <HAL_SPI_MspInit+0x194>)
 800053e:	699b      	ldr	r3, [r3, #24]
 8000540:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000544:	617b      	str	r3, [r7, #20]
 8000546:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000548:	4b56      	ldr	r3, [pc, #344]	; (80006a4 <HAL_SPI_MspInit+0x194>)
 800054a:	699b      	ldr	r3, [r3, #24]
 800054c:	4a55      	ldr	r2, [pc, #340]	; (80006a4 <HAL_SPI_MspInit+0x194>)
 800054e:	f043 0304 	orr.w	r3, r3, #4
 8000552:	6193      	str	r3, [r2, #24]
 8000554:	4b53      	ldr	r3, [pc, #332]	; (80006a4 <HAL_SPI_MspInit+0x194>)
 8000556:	699b      	ldr	r3, [r3, #24]
 8000558:	f003 0304 	and.w	r3, r3, #4
 800055c:	613b      	str	r3, [r7, #16]
 800055e:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000560:	23a0      	movs	r3, #160	; 0xa0
 8000562:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000564:	2302      	movs	r3, #2
 8000566:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000568:	2303      	movs	r3, #3
 800056a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800056c:	f107 0318 	add.w	r3, r7, #24
 8000570:	4619      	mov	r1, r3
 8000572:	484d      	ldr	r0, [pc, #308]	; (80006a8 <HAL_SPI_MspInit+0x198>)
 8000574:	f000 fd6e 	bl	8001054 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000578:	2340      	movs	r3, #64	; 0x40
 800057a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800057c:	2300      	movs	r3, #0
 800057e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000580:	2300      	movs	r3, #0
 8000582:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000584:	f107 0318 	add.w	r3, r7, #24
 8000588:	4619      	mov	r1, r3
 800058a:	4847      	ldr	r0, [pc, #284]	; (80006a8 <HAL_SPI_MspInit+0x198>)
 800058c:	f000 fd62 	bl	8001054 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8000590:	4b46      	ldr	r3, [pc, #280]	; (80006ac <HAL_SPI_MspInit+0x19c>)
 8000592:	4a47      	ldr	r2, [pc, #284]	; (80006b0 <HAL_SPI_MspInit+0x1a0>)
 8000594:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000596:	4b45      	ldr	r3, [pc, #276]	; (80006ac <HAL_SPI_MspInit+0x19c>)
 8000598:	2210      	movs	r2, #16
 800059a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800059c:	4b43      	ldr	r3, [pc, #268]	; (80006ac <HAL_SPI_MspInit+0x19c>)
 800059e:	2200      	movs	r2, #0
 80005a0:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80005a2:	4b42      	ldr	r3, [pc, #264]	; (80006ac <HAL_SPI_MspInit+0x19c>)
 80005a4:	2280      	movs	r2, #128	; 0x80
 80005a6:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80005a8:	4b40      	ldr	r3, [pc, #256]	; (80006ac <HAL_SPI_MspInit+0x19c>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80005ae:	4b3f      	ldr	r3, [pc, #252]	; (80006ac <HAL_SPI_MspInit+0x19c>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80005b4:	4b3d      	ldr	r3, [pc, #244]	; (80006ac <HAL_SPI_MspInit+0x19c>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80005ba:	4b3c      	ldr	r3, [pc, #240]	; (80006ac <HAL_SPI_MspInit+0x19c>)
 80005bc:	2200      	movs	r2, #0
 80005be:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80005c0:	483a      	ldr	r0, [pc, #232]	; (80006ac <HAL_SPI_MspInit+0x19c>)
 80005c2:	f000 fb59 	bl	8000c78 <HAL_DMA_Init>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <HAL_SPI_MspInit+0xc0>
    {
      Error_Handler();
 80005cc:	f7ff ff32 	bl	8000434 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	4a36      	ldr	r2, [pc, #216]	; (80006ac <HAL_SPI_MspInit+0x19c>)
 80005d4:	649a      	str	r2, [r3, #72]	; 0x48
 80005d6:	4a35      	ldr	r2, [pc, #212]	; (80006ac <HAL_SPI_MspInit+0x19c>)
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80005dc:	e05c      	b.n	8000698 <HAL_SPI_MspInit+0x188>
  else if(spiHandle->Instance==SPI2)
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4a34      	ldr	r2, [pc, #208]	; (80006b4 <HAL_SPI_MspInit+0x1a4>)
 80005e4:	4293      	cmp	r3, r2
 80005e6:	d157      	bne.n	8000698 <HAL_SPI_MspInit+0x188>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80005e8:	4b2e      	ldr	r3, [pc, #184]	; (80006a4 <HAL_SPI_MspInit+0x194>)
 80005ea:	69db      	ldr	r3, [r3, #28]
 80005ec:	4a2d      	ldr	r2, [pc, #180]	; (80006a4 <HAL_SPI_MspInit+0x194>)
 80005ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005f2:	61d3      	str	r3, [r2, #28]
 80005f4:	4b2b      	ldr	r3, [pc, #172]	; (80006a4 <HAL_SPI_MspInit+0x194>)
 80005f6:	69db      	ldr	r3, [r3, #28]
 80005f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005fc:	60fb      	str	r3, [r7, #12]
 80005fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000600:	4b28      	ldr	r3, [pc, #160]	; (80006a4 <HAL_SPI_MspInit+0x194>)
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	4a27      	ldr	r2, [pc, #156]	; (80006a4 <HAL_SPI_MspInit+0x194>)
 8000606:	f043 0308 	orr.w	r3, r3, #8
 800060a:	6193      	str	r3, [r2, #24]
 800060c:	4b25      	ldr	r3, [pc, #148]	; (80006a4 <HAL_SPI_MspInit+0x194>)
 800060e:	699b      	ldr	r3, [r3, #24]
 8000610:	f003 0308 	and.w	r3, r3, #8
 8000614:	60bb      	str	r3, [r7, #8]
 8000616:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000618:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800061c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800061e:	2300      	movs	r3, #0
 8000620:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000622:	2300      	movs	r3, #0
 8000624:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000626:	f107 0318 	add.w	r3, r7, #24
 800062a:	4619      	mov	r1, r3
 800062c:	4822      	ldr	r0, [pc, #136]	; (80006b8 <HAL_SPI_MspInit+0x1a8>)
 800062e:	f000 fd11 	bl	8001054 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000632:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000636:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000638:	2302      	movs	r3, #2
 800063a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800063c:	2303      	movs	r3, #3
 800063e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000640:	f107 0318 	add.w	r3, r7, #24
 8000644:	4619      	mov	r1, r3
 8000646:	481c      	ldr	r0, [pc, #112]	; (80006b8 <HAL_SPI_MspInit+0x1a8>)
 8000648:	f000 fd04 	bl	8001054 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Channel4;
 800064c:	4b1b      	ldr	r3, [pc, #108]	; (80006bc <HAL_SPI_MspInit+0x1ac>)
 800064e:	4a1c      	ldr	r2, [pc, #112]	; (80006c0 <HAL_SPI_MspInit+0x1b0>)
 8000650:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000652:	4b1a      	ldr	r3, [pc, #104]	; (80006bc <HAL_SPI_MspInit+0x1ac>)
 8000654:	2200      	movs	r2, #0
 8000656:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000658:	4b18      	ldr	r3, [pc, #96]	; (80006bc <HAL_SPI_MspInit+0x1ac>)
 800065a:	2200      	movs	r2, #0
 800065c:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800065e:	4b17      	ldr	r3, [pc, #92]	; (80006bc <HAL_SPI_MspInit+0x1ac>)
 8000660:	2280      	movs	r2, #128	; 0x80
 8000662:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000664:	4b15      	ldr	r3, [pc, #84]	; (80006bc <HAL_SPI_MspInit+0x1ac>)
 8000666:	2200      	movs	r2, #0
 8000668:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800066a:	4b14      	ldr	r3, [pc, #80]	; (80006bc <HAL_SPI_MspInit+0x1ac>)
 800066c:	2200      	movs	r2, #0
 800066e:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8000670:	4b12      	ldr	r3, [pc, #72]	; (80006bc <HAL_SPI_MspInit+0x1ac>)
 8000672:	2200      	movs	r2, #0
 8000674:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000676:	4b11      	ldr	r3, [pc, #68]	; (80006bc <HAL_SPI_MspInit+0x1ac>)
 8000678:	2200      	movs	r2, #0
 800067a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800067c:	480f      	ldr	r0, [pc, #60]	; (80006bc <HAL_SPI_MspInit+0x1ac>)
 800067e:	f000 fafb 	bl	8000c78 <HAL_DMA_Init>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <HAL_SPI_MspInit+0x17c>
      Error_Handler();
 8000688:	f7ff fed4 	bl	8000434 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	4a0b      	ldr	r2, [pc, #44]	; (80006bc <HAL_SPI_MspInit+0x1ac>)
 8000690:	64da      	str	r2, [r3, #76]	; 0x4c
 8000692:	4a0a      	ldr	r2, [pc, #40]	; (80006bc <HAL_SPI_MspInit+0x1ac>)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000698:	bf00      	nop
 800069a:	3728      	adds	r7, #40	; 0x28
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	40013000 	.word	0x40013000
 80006a4:	40021000 	.word	0x40021000
 80006a8:	40010800 	.word	0x40010800
 80006ac:	2000015c 	.word	0x2000015c
 80006b0:	40020030 	.word	0x40020030
 80006b4:	40003800 	.word	0x40003800
 80006b8:	40010c00 	.word	0x40010c00
 80006bc:	200001a0 	.word	0x200001a0
 80006c0:	40020044 	.word	0x40020044

080006c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b085      	sub	sp, #20
 80006c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006ca:	4b15      	ldr	r3, [pc, #84]	; (8000720 <HAL_MspInit+0x5c>)
 80006cc:	699b      	ldr	r3, [r3, #24]
 80006ce:	4a14      	ldr	r2, [pc, #80]	; (8000720 <HAL_MspInit+0x5c>)
 80006d0:	f043 0301 	orr.w	r3, r3, #1
 80006d4:	6193      	str	r3, [r2, #24]
 80006d6:	4b12      	ldr	r3, [pc, #72]	; (8000720 <HAL_MspInit+0x5c>)
 80006d8:	699b      	ldr	r3, [r3, #24]
 80006da:	f003 0301 	and.w	r3, r3, #1
 80006de:	60bb      	str	r3, [r7, #8]
 80006e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e2:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <HAL_MspInit+0x5c>)
 80006e4:	69db      	ldr	r3, [r3, #28]
 80006e6:	4a0e      	ldr	r2, [pc, #56]	; (8000720 <HAL_MspInit+0x5c>)
 80006e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ec:	61d3      	str	r3, [r2, #28]
 80006ee:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <HAL_MspInit+0x5c>)
 80006f0:	69db      	ldr	r3, [r3, #28]
 80006f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006fa:	4b0a      	ldr	r3, [pc, #40]	; (8000724 <HAL_MspInit+0x60>)
 80006fc:	685b      	ldr	r3, [r3, #4]
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000706:	60fb      	str	r3, [r7, #12]
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	4a04      	ldr	r2, [pc, #16]	; (8000724 <HAL_MspInit+0x60>)
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000716:	bf00      	nop
 8000718:	3714      	adds	r7, #20
 800071a:	46bd      	mov	sp, r7
 800071c:	bc80      	pop	{r7}
 800071e:	4770      	bx	lr
 8000720:	40021000 	.word	0x40021000
 8000724:	40010000 	.word	0x40010000

08000728 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800072c:	e7fe      	b.n	800072c <NMI_Handler+0x4>

0800072e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800072e:	b480      	push	{r7}
 8000730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000732:	e7fe      	b.n	8000732 <HardFault_Handler+0x4>

08000734 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000738:	e7fe      	b.n	8000738 <MemManage_Handler+0x4>

0800073a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800073a:	b480      	push	{r7}
 800073c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800073e:	e7fe      	b.n	800073e <BusFault_Handler+0x4>

08000740 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000744:	e7fe      	b.n	8000744 <UsageFault_Handler+0x4>

08000746 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000746:	b480      	push	{r7}
 8000748:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800074a:	bf00      	nop
 800074c:	46bd      	mov	sp, r7
 800074e:	bc80      	pop	{r7}
 8000750:	4770      	bx	lr

08000752 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000752:	b480      	push	{r7}
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000756:	bf00      	nop
 8000758:	46bd      	mov	sp, r7
 800075a:	bc80      	pop	{r7}
 800075c:	4770      	bx	lr

0800075e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800075e:	b480      	push	{r7}
 8000760:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000762:	bf00      	nop
 8000764:	46bd      	mov	sp, r7
 8000766:	bc80      	pop	{r7}
 8000768:	4770      	bx	lr

0800076a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800076a:	b580      	push	{r7, lr}
 800076c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800076e:	f000 f935 	bl	80009dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
	...

08000778 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800077c:	4802      	ldr	r0, [pc, #8]	; (8000788 <DMA1_Channel3_IRQHandler+0x10>)
 800077e:	f000 fb35 	bl	8000dec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	2000015c 	.word	0x2000015c

0800078c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8000790:	4802      	ldr	r0, [pc, #8]	; (800079c <DMA1_Channel4_IRQHandler+0x10>)
 8000792:	f000 fb2b 	bl	8000dec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	200001a0 	.word	0x200001a0

080007a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b086      	sub	sp, #24
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007a8:	4a14      	ldr	r2, [pc, #80]	; (80007fc <_sbrk+0x5c>)
 80007aa:	4b15      	ldr	r3, [pc, #84]	; (8000800 <_sbrk+0x60>)
 80007ac:	1ad3      	subs	r3, r2, r3
 80007ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007b0:	697b      	ldr	r3, [r7, #20]
 80007b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007b4:	4b13      	ldr	r3, [pc, #76]	; (8000804 <_sbrk+0x64>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d102      	bne.n	80007c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007bc:	4b11      	ldr	r3, [pc, #68]	; (8000804 <_sbrk+0x64>)
 80007be:	4a12      	ldr	r2, [pc, #72]	; (8000808 <_sbrk+0x68>)
 80007c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007c2:	4b10      	ldr	r3, [pc, #64]	; (8000804 <_sbrk+0x64>)
 80007c4:	681a      	ldr	r2, [r3, #0]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	4413      	add	r3, r2
 80007ca:	693a      	ldr	r2, [r7, #16]
 80007cc:	429a      	cmp	r2, r3
 80007ce:	d207      	bcs.n	80007e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007d0:	f002 f928 	bl	8002a24 <__errno>
 80007d4:	4603      	mov	r3, r0
 80007d6:	220c      	movs	r2, #12
 80007d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007da:	f04f 33ff 	mov.w	r3, #4294967295
 80007de:	e009      	b.n	80007f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007e0:	4b08      	ldr	r3, [pc, #32]	; (8000804 <_sbrk+0x64>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007e6:	4b07      	ldr	r3, [pc, #28]	; (8000804 <_sbrk+0x64>)
 80007e8:	681a      	ldr	r2, [r3, #0]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	4413      	add	r3, r2
 80007ee:	4a05      	ldr	r2, [pc, #20]	; (8000804 <_sbrk+0x64>)
 80007f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007f2:	68fb      	ldr	r3, [r7, #12]
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	3718      	adds	r7, #24
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20005000 	.word	0x20005000
 8000800:	00000400 	.word	0x00000400
 8000804:	200001e4 	.word	0x200001e4
 8000808:	20000240 	.word	0x20000240

0800080c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000810:	bf00      	nop
 8000812:	46bd      	mov	sp, r7
 8000814:	bc80      	pop	{r7}
 8000816:	4770      	bx	lr

08000818 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800081c:	4b11      	ldr	r3, [pc, #68]	; (8000864 <MX_USART1_UART_Init+0x4c>)
 800081e:	4a12      	ldr	r2, [pc, #72]	; (8000868 <MX_USART1_UART_Init+0x50>)
 8000820:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000822:	4b10      	ldr	r3, [pc, #64]	; (8000864 <MX_USART1_UART_Init+0x4c>)
 8000824:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000828:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800082a:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <MX_USART1_UART_Init+0x4c>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000830:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <MX_USART1_UART_Init+0x4c>)
 8000832:	2200      	movs	r2, #0
 8000834:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000836:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <MX_USART1_UART_Init+0x4c>)
 8000838:	2200      	movs	r2, #0
 800083a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800083c:	4b09      	ldr	r3, [pc, #36]	; (8000864 <MX_USART1_UART_Init+0x4c>)
 800083e:	220c      	movs	r2, #12
 8000840:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000842:	4b08      	ldr	r3, [pc, #32]	; (8000864 <MX_USART1_UART_Init+0x4c>)
 8000844:	2200      	movs	r2, #0
 8000846:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000848:	4b06      	ldr	r3, [pc, #24]	; (8000864 <MX_USART1_UART_Init+0x4c>)
 800084a:	2200      	movs	r2, #0
 800084c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800084e:	4805      	ldr	r0, [pc, #20]	; (8000864 <MX_USART1_UART_Init+0x4c>)
 8000850:	f001 ff30 	bl	80026b4 <HAL_UART_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800085a:	f7ff fdeb 	bl	8000434 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	200001e8 	.word	0x200001e8
 8000868:	40013800 	.word	0x40013800

0800086c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b088      	sub	sp, #32
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000874:	f107 0310 	add.w	r3, r7, #16
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4a1c      	ldr	r2, [pc, #112]	; (80008f8 <HAL_UART_MspInit+0x8c>)
 8000888:	4293      	cmp	r3, r2
 800088a:	d131      	bne.n	80008f0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800088c:	4b1b      	ldr	r3, [pc, #108]	; (80008fc <HAL_UART_MspInit+0x90>)
 800088e:	699b      	ldr	r3, [r3, #24]
 8000890:	4a1a      	ldr	r2, [pc, #104]	; (80008fc <HAL_UART_MspInit+0x90>)
 8000892:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000896:	6193      	str	r3, [r2, #24]
 8000898:	4b18      	ldr	r3, [pc, #96]	; (80008fc <HAL_UART_MspInit+0x90>)
 800089a:	699b      	ldr	r3, [r3, #24]
 800089c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008a0:	60fb      	str	r3, [r7, #12]
 80008a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a4:	4b15      	ldr	r3, [pc, #84]	; (80008fc <HAL_UART_MspInit+0x90>)
 80008a6:	699b      	ldr	r3, [r3, #24]
 80008a8:	4a14      	ldr	r2, [pc, #80]	; (80008fc <HAL_UART_MspInit+0x90>)
 80008aa:	f043 0304 	orr.w	r3, r3, #4
 80008ae:	6193      	str	r3, [r2, #24]
 80008b0:	4b12      	ldr	r3, [pc, #72]	; (80008fc <HAL_UART_MspInit+0x90>)
 80008b2:	699b      	ldr	r3, [r3, #24]
 80008b4:	f003 0304 	and.w	r3, r3, #4
 80008b8:	60bb      	str	r3, [r7, #8]
 80008ba:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80008bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c2:	2302      	movs	r3, #2
 80008c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008c6:	2303      	movs	r3, #3
 80008c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ca:	f107 0310 	add.w	r3, r7, #16
 80008ce:	4619      	mov	r1, r3
 80008d0:	480b      	ldr	r0, [pc, #44]	; (8000900 <HAL_UART_MspInit+0x94>)
 80008d2:	f000 fbbf 	bl	8001054 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008dc:	2300      	movs	r3, #0
 80008de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e4:	f107 0310 	add.w	r3, r7, #16
 80008e8:	4619      	mov	r1, r3
 80008ea:	4805      	ldr	r0, [pc, #20]	; (8000900 <HAL_UART_MspInit+0x94>)
 80008ec:	f000 fbb2 	bl	8001054 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80008f0:	bf00      	nop
 80008f2:	3720      	adds	r7, #32
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	40013800 	.word	0x40013800
 80008fc:	40021000 	.word	0x40021000
 8000900:	40010800 	.word	0x40010800

08000904 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000904:	480c      	ldr	r0, [pc, #48]	; (8000938 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000906:	490d      	ldr	r1, [pc, #52]	; (800093c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000908:	4a0d      	ldr	r2, [pc, #52]	; (8000940 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800090a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800090c:	e002      	b.n	8000914 <LoopCopyDataInit>

0800090e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800090e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000910:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000912:	3304      	adds	r3, #4

08000914 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000914:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000916:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000918:	d3f9      	bcc.n	800090e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800091a:	4a0a      	ldr	r2, [pc, #40]	; (8000944 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800091c:	4c0a      	ldr	r4, [pc, #40]	; (8000948 <LoopFillZerobss+0x22>)
  movs r3, #0
 800091e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000920:	e001      	b.n	8000926 <LoopFillZerobss>

08000922 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000922:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000924:	3204      	adds	r2, #4

08000926 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000926:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000928:	d3fb      	bcc.n	8000922 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800092a:	f7ff ff6f 	bl	800080c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800092e:	f002 f87f 	bl	8002a30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000932:	f7ff fc83 	bl	800023c <main>
  bx lr
 8000936:	4770      	bx	lr
  ldr r0, =_sdata
 8000938:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800093c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000940:	08003498 	.word	0x08003498
  ldr r2, =_sbss
 8000944:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000948:	20000240 	.word	0x20000240

0800094c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800094c:	e7fe      	b.n	800094c <ADC1_2_IRQHandler>
	...

08000950 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000954:	4b08      	ldr	r3, [pc, #32]	; (8000978 <HAL_Init+0x28>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a07      	ldr	r2, [pc, #28]	; (8000978 <HAL_Init+0x28>)
 800095a:	f043 0310 	orr.w	r3, r3, #16
 800095e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000960:	2003      	movs	r0, #3
 8000962:	f000 f947 	bl	8000bf4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000966:	200f      	movs	r0, #15
 8000968:	f000 f808 	bl	800097c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800096c:	f7ff feaa 	bl	80006c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000970:	2300      	movs	r3, #0
}
 8000972:	4618      	mov	r0, r3
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40022000 	.word	0x40022000

0800097c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000984:	4b12      	ldr	r3, [pc, #72]	; (80009d0 <HAL_InitTick+0x54>)
 8000986:	681a      	ldr	r2, [r3, #0]
 8000988:	4b12      	ldr	r3, [pc, #72]	; (80009d4 <HAL_InitTick+0x58>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	4619      	mov	r1, r3
 800098e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000992:	fbb3 f3f1 	udiv	r3, r3, r1
 8000996:	fbb2 f3f3 	udiv	r3, r2, r3
 800099a:	4618      	mov	r0, r3
 800099c:	f000 f95f 	bl	8000c5e <HAL_SYSTICK_Config>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009a6:	2301      	movs	r3, #1
 80009a8:	e00e      	b.n	80009c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	2b0f      	cmp	r3, #15
 80009ae:	d80a      	bhi.n	80009c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009b0:	2200      	movs	r2, #0
 80009b2:	6879      	ldr	r1, [r7, #4]
 80009b4:	f04f 30ff 	mov.w	r0, #4294967295
 80009b8:	f000 f927 	bl	8000c0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009bc:	4a06      	ldr	r2, [pc, #24]	; (80009d8 <HAL_InitTick+0x5c>)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009c2:	2300      	movs	r3, #0
 80009c4:	e000      	b.n	80009c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009c6:	2301      	movs	r3, #1
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	3708      	adds	r7, #8
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	20000000 	.word	0x20000000
 80009d4:	20000008 	.word	0x20000008
 80009d8:	20000004 	.word	0x20000004

080009dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009e0:	4b05      	ldr	r3, [pc, #20]	; (80009f8 <HAL_IncTick+0x1c>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	461a      	mov	r2, r3
 80009e6:	4b05      	ldr	r3, [pc, #20]	; (80009fc <HAL_IncTick+0x20>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4413      	add	r3, r2
 80009ec:	4a03      	ldr	r2, [pc, #12]	; (80009fc <HAL_IncTick+0x20>)
 80009ee:	6013      	str	r3, [r2, #0]
}
 80009f0:	bf00      	nop
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bc80      	pop	{r7}
 80009f6:	4770      	bx	lr
 80009f8:	20000008 	.word	0x20000008
 80009fc:	2000022c 	.word	0x2000022c

08000a00 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  return uwTick;
 8000a04:	4b02      	ldr	r3, [pc, #8]	; (8000a10 <HAL_GetTick+0x10>)
 8000a06:	681b      	ldr	r3, [r3, #0]
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bc80      	pop	{r7}
 8000a0e:	4770      	bx	lr
 8000a10:	2000022c 	.word	0x2000022c

08000a14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a1c:	f7ff fff0 	bl	8000a00 <HAL_GetTick>
 8000a20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a2c:	d005      	beq.n	8000a3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a2e:	4b0a      	ldr	r3, [pc, #40]	; (8000a58 <HAL_Delay+0x44>)
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	461a      	mov	r2, r3
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	4413      	add	r3, r2
 8000a38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a3a:	bf00      	nop
 8000a3c:	f7ff ffe0 	bl	8000a00 <HAL_GetTick>
 8000a40:	4602      	mov	r2, r0
 8000a42:	68bb      	ldr	r3, [r7, #8]
 8000a44:	1ad3      	subs	r3, r2, r3
 8000a46:	68fa      	ldr	r2, [r7, #12]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d8f7      	bhi.n	8000a3c <HAL_Delay+0x28>
  {
  }
}
 8000a4c:	bf00      	nop
 8000a4e:	bf00      	nop
 8000a50:	3710      	adds	r7, #16
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000008 	.word	0x20000008

08000a5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b085      	sub	sp, #20
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	f003 0307 	and.w	r3, r3, #7
 8000a6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a6c:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8000a6e:	68db      	ldr	r3, [r3, #12]
 8000a70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a72:	68ba      	ldr	r2, [r7, #8]
 8000a74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a78:	4013      	ands	r3, r2
 8000a7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a8e:	4a04      	ldr	r2, [pc, #16]	; (8000aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	60d3      	str	r3, [r2, #12]
}
 8000a94:	bf00      	nop
 8000a96:	3714      	adds	r7, #20
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bc80      	pop	{r7}
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aa8:	4b04      	ldr	r3, [pc, #16]	; (8000abc <__NVIC_GetPriorityGrouping+0x18>)
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	0a1b      	lsrs	r3, r3, #8
 8000aae:	f003 0307 	and.w	r3, r3, #7
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bc80      	pop	{r7}
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	e000ed00 	.word	0xe000ed00

08000ac0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	db0b      	blt.n	8000aea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	f003 021f 	and.w	r2, r3, #31
 8000ad8:	4906      	ldr	r1, [pc, #24]	; (8000af4 <__NVIC_EnableIRQ+0x34>)
 8000ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ade:	095b      	lsrs	r3, r3, #5
 8000ae0:	2001      	movs	r0, #1
 8000ae2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000aea:	bf00      	nop
 8000aec:	370c      	adds	r7, #12
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bc80      	pop	{r7}
 8000af2:	4770      	bx	lr
 8000af4:	e000e100 	.word	0xe000e100

08000af8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	6039      	str	r1, [r7, #0]
 8000b02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	db0a      	blt.n	8000b22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	b2da      	uxtb	r2, r3
 8000b10:	490c      	ldr	r1, [pc, #48]	; (8000b44 <__NVIC_SetPriority+0x4c>)
 8000b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b16:	0112      	lsls	r2, r2, #4
 8000b18:	b2d2      	uxtb	r2, r2
 8000b1a:	440b      	add	r3, r1
 8000b1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b20:	e00a      	b.n	8000b38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	b2da      	uxtb	r2, r3
 8000b26:	4908      	ldr	r1, [pc, #32]	; (8000b48 <__NVIC_SetPriority+0x50>)
 8000b28:	79fb      	ldrb	r3, [r7, #7]
 8000b2a:	f003 030f 	and.w	r3, r3, #15
 8000b2e:	3b04      	subs	r3, #4
 8000b30:	0112      	lsls	r2, r2, #4
 8000b32:	b2d2      	uxtb	r2, r2
 8000b34:	440b      	add	r3, r1
 8000b36:	761a      	strb	r2, [r3, #24]
}
 8000b38:	bf00      	nop
 8000b3a:	370c      	adds	r7, #12
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bc80      	pop	{r7}
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	e000e100 	.word	0xe000e100
 8000b48:	e000ed00 	.word	0xe000ed00

08000b4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b089      	sub	sp, #36	; 0x24
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	60f8      	str	r0, [r7, #12]
 8000b54:	60b9      	str	r1, [r7, #8]
 8000b56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	f003 0307 	and.w	r3, r3, #7
 8000b5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b60:	69fb      	ldr	r3, [r7, #28]
 8000b62:	f1c3 0307 	rsb	r3, r3, #7
 8000b66:	2b04      	cmp	r3, #4
 8000b68:	bf28      	it	cs
 8000b6a:	2304      	movcs	r3, #4
 8000b6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	3304      	adds	r3, #4
 8000b72:	2b06      	cmp	r3, #6
 8000b74:	d902      	bls.n	8000b7c <NVIC_EncodePriority+0x30>
 8000b76:	69fb      	ldr	r3, [r7, #28]
 8000b78:	3b03      	subs	r3, #3
 8000b7a:	e000      	b.n	8000b7e <NVIC_EncodePriority+0x32>
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b80:	f04f 32ff 	mov.w	r2, #4294967295
 8000b84:	69bb      	ldr	r3, [r7, #24]
 8000b86:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8a:	43da      	mvns	r2, r3
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	401a      	ands	r2, r3
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b94:	f04f 31ff 	mov.w	r1, #4294967295
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b9e:	43d9      	mvns	r1, r3
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba4:	4313      	orrs	r3, r2
         );
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3724      	adds	r7, #36	; 0x24
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bc80      	pop	{r7}
 8000bae:	4770      	bx	lr

08000bb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	3b01      	subs	r3, #1
 8000bbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bc0:	d301      	bcc.n	8000bc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	e00f      	b.n	8000be6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bc6:	4a0a      	ldr	r2, [pc, #40]	; (8000bf0 <SysTick_Config+0x40>)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	3b01      	subs	r3, #1
 8000bcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bce:	210f      	movs	r1, #15
 8000bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd4:	f7ff ff90 	bl	8000af8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bd8:	4b05      	ldr	r3, [pc, #20]	; (8000bf0 <SysTick_Config+0x40>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bde:	4b04      	ldr	r3, [pc, #16]	; (8000bf0 <SysTick_Config+0x40>)
 8000be0:	2207      	movs	r2, #7
 8000be2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000be4:	2300      	movs	r3, #0
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	e000e010 	.word	0xe000e010

08000bf4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bfc:	6878      	ldr	r0, [r7, #4]
 8000bfe:	f7ff ff2d 	bl	8000a5c <__NVIC_SetPriorityGrouping>
}
 8000c02:	bf00      	nop
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}

08000c0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	b086      	sub	sp, #24
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	4603      	mov	r3, r0
 8000c12:	60b9      	str	r1, [r7, #8]
 8000c14:	607a      	str	r2, [r7, #4]
 8000c16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c1c:	f7ff ff42 	bl	8000aa4 <__NVIC_GetPriorityGrouping>
 8000c20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c22:	687a      	ldr	r2, [r7, #4]
 8000c24:	68b9      	ldr	r1, [r7, #8]
 8000c26:	6978      	ldr	r0, [r7, #20]
 8000c28:	f7ff ff90 	bl	8000b4c <NVIC_EncodePriority>
 8000c2c:	4602      	mov	r2, r0
 8000c2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c32:	4611      	mov	r1, r2
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff ff5f 	bl	8000af8 <__NVIC_SetPriority>
}
 8000c3a:	bf00      	nop
 8000c3c:	3718      	adds	r7, #24
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c42:	b580      	push	{r7, lr}
 8000c44:	b082      	sub	sp, #8
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	4603      	mov	r3, r0
 8000c4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff ff35 	bl	8000ac0 <__NVIC_EnableIRQ>
}
 8000c56:	bf00      	nop
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}

08000c5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	b082      	sub	sp, #8
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c66:	6878      	ldr	r0, [r7, #4]
 8000c68:	f7ff ffa2 	bl	8000bb0 <SysTick_Config>
 8000c6c:	4603      	mov	r3, r0
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
	...

08000c78 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b085      	sub	sp, #20
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000c80:	2300      	movs	r3, #0
 8000c82:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d101      	bne.n	8000c8e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e043      	b.n	8000d16 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	461a      	mov	r2, r3
 8000c94:	4b22      	ldr	r3, [pc, #136]	; (8000d20 <HAL_DMA_Init+0xa8>)
 8000c96:	4413      	add	r3, r2
 8000c98:	4a22      	ldr	r2, [pc, #136]	; (8000d24 <HAL_DMA_Init+0xac>)
 8000c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c9e:	091b      	lsrs	r3, r3, #4
 8000ca0:	009a      	lsls	r2, r3, #2
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4a1f      	ldr	r2, [pc, #124]	; (8000d28 <HAL_DMA_Init+0xb0>)
 8000caa:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2202      	movs	r2, #2
 8000cb0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000cc2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000cc6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000cd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	68db      	ldr	r3, [r3, #12]
 8000cd6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cdc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	695b      	ldr	r3, [r3, #20]
 8000ce2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ce8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	69db      	ldr	r3, [r3, #28]
 8000cee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000cf0:	68fa      	ldr	r2, [r7, #12]
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	68fa      	ldr	r2, [r7, #12]
 8000cfc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2200      	movs	r2, #0
 8000d02:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2201      	movs	r2, #1
 8000d08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2200      	movs	r2, #0
 8000d10:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000d14:	2300      	movs	r3, #0
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3714      	adds	r7, #20
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bc80      	pop	{r7}
 8000d1e:	4770      	bx	lr
 8000d20:	bffdfff8 	.word	0xbffdfff8
 8000d24:	cccccccd 	.word	0xcccccccd
 8000d28:	40020000 	.word	0x40020000

08000d2c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b086      	sub	sp, #24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	60f8      	str	r0, [r7, #12]
 8000d34:	60b9      	str	r1, [r7, #8]
 8000d36:	607a      	str	r2, [r7, #4]
 8000d38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d44:	2b01      	cmp	r3, #1
 8000d46:	d101      	bne.n	8000d4c <HAL_DMA_Start_IT+0x20>
 8000d48:	2302      	movs	r3, #2
 8000d4a:	e04a      	b.n	8000de2 <HAL_DMA_Start_IT+0xb6>
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	2201      	movs	r2, #1
 8000d50:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d13a      	bne.n	8000dd4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	2202      	movs	r2, #2
 8000d62:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	2200      	movs	r2, #0
 8000d6a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f022 0201 	bic.w	r2, r2, #1
 8000d7a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	687a      	ldr	r2, [r7, #4]
 8000d80:	68b9      	ldr	r1, [r7, #8]
 8000d82:	68f8      	ldr	r0, [r7, #12]
 8000d84:	f000 f938 	bl	8000ff8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d008      	beq.n	8000da2 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f042 020e 	orr.w	r2, r2, #14
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	e00f      	b.n	8000dc2 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f022 0204 	bic.w	r2, r2, #4
 8000db0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f042 020a 	orr.w	r2, r2, #10
 8000dc0:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f042 0201 	orr.w	r2, r2, #1
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	e005      	b.n	8000de0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000de0:	7dfb      	ldrb	r3, [r7, #23]
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3718      	adds	r7, #24
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
	...

08000dec <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e08:	2204      	movs	r2, #4
 8000e0a:	409a      	lsls	r2, r3
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	4013      	ands	r3, r2
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d04f      	beq.n	8000eb4 <HAL_DMA_IRQHandler+0xc8>
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	f003 0304 	and.w	r3, r3, #4
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d04a      	beq.n	8000eb4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f003 0320 	and.w	r3, r3, #32
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d107      	bne.n	8000e3c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f022 0204 	bic.w	r2, r2, #4
 8000e3a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a66      	ldr	r2, [pc, #408]	; (8000fdc <HAL_DMA_IRQHandler+0x1f0>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d029      	beq.n	8000e9a <HAL_DMA_IRQHandler+0xae>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a65      	ldr	r2, [pc, #404]	; (8000fe0 <HAL_DMA_IRQHandler+0x1f4>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d022      	beq.n	8000e96 <HAL_DMA_IRQHandler+0xaa>
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a63      	ldr	r2, [pc, #396]	; (8000fe4 <HAL_DMA_IRQHandler+0x1f8>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d01a      	beq.n	8000e90 <HAL_DMA_IRQHandler+0xa4>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a62      	ldr	r2, [pc, #392]	; (8000fe8 <HAL_DMA_IRQHandler+0x1fc>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d012      	beq.n	8000e8a <HAL_DMA_IRQHandler+0x9e>
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a60      	ldr	r2, [pc, #384]	; (8000fec <HAL_DMA_IRQHandler+0x200>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d00a      	beq.n	8000e84 <HAL_DMA_IRQHandler+0x98>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a5f      	ldr	r2, [pc, #380]	; (8000ff0 <HAL_DMA_IRQHandler+0x204>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d102      	bne.n	8000e7e <HAL_DMA_IRQHandler+0x92>
 8000e78:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e7c:	e00e      	b.n	8000e9c <HAL_DMA_IRQHandler+0xb0>
 8000e7e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000e82:	e00b      	b.n	8000e9c <HAL_DMA_IRQHandler+0xb0>
 8000e84:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000e88:	e008      	b.n	8000e9c <HAL_DMA_IRQHandler+0xb0>
 8000e8a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e8e:	e005      	b.n	8000e9c <HAL_DMA_IRQHandler+0xb0>
 8000e90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e94:	e002      	b.n	8000e9c <HAL_DMA_IRQHandler+0xb0>
 8000e96:	2340      	movs	r3, #64	; 0x40
 8000e98:	e000      	b.n	8000e9c <HAL_DMA_IRQHandler+0xb0>
 8000e9a:	2304      	movs	r3, #4
 8000e9c:	4a55      	ldr	r2, [pc, #340]	; (8000ff4 <HAL_DMA_IRQHandler+0x208>)
 8000e9e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	f000 8094 	beq.w	8000fd2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000eb2:	e08e      	b.n	8000fd2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb8:	2202      	movs	r2, #2
 8000eba:	409a      	lsls	r2, r3
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d056      	beq.n	8000f72 <HAL_DMA_IRQHandler+0x186>
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	f003 0302 	and.w	r3, r3, #2
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d051      	beq.n	8000f72 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f003 0320 	and.w	r3, r3, #32
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d10b      	bne.n	8000ef4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f022 020a 	bic.w	r2, r2, #10
 8000eea:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2201      	movs	r2, #1
 8000ef0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a38      	ldr	r2, [pc, #224]	; (8000fdc <HAL_DMA_IRQHandler+0x1f0>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d029      	beq.n	8000f52 <HAL_DMA_IRQHandler+0x166>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a37      	ldr	r2, [pc, #220]	; (8000fe0 <HAL_DMA_IRQHandler+0x1f4>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d022      	beq.n	8000f4e <HAL_DMA_IRQHandler+0x162>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a35      	ldr	r2, [pc, #212]	; (8000fe4 <HAL_DMA_IRQHandler+0x1f8>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d01a      	beq.n	8000f48 <HAL_DMA_IRQHandler+0x15c>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a34      	ldr	r2, [pc, #208]	; (8000fe8 <HAL_DMA_IRQHandler+0x1fc>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d012      	beq.n	8000f42 <HAL_DMA_IRQHandler+0x156>
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a32      	ldr	r2, [pc, #200]	; (8000fec <HAL_DMA_IRQHandler+0x200>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d00a      	beq.n	8000f3c <HAL_DMA_IRQHandler+0x150>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a31      	ldr	r2, [pc, #196]	; (8000ff0 <HAL_DMA_IRQHandler+0x204>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d102      	bne.n	8000f36 <HAL_DMA_IRQHandler+0x14a>
 8000f30:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000f34:	e00e      	b.n	8000f54 <HAL_DMA_IRQHandler+0x168>
 8000f36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f3a:	e00b      	b.n	8000f54 <HAL_DMA_IRQHandler+0x168>
 8000f3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f40:	e008      	b.n	8000f54 <HAL_DMA_IRQHandler+0x168>
 8000f42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f46:	e005      	b.n	8000f54 <HAL_DMA_IRQHandler+0x168>
 8000f48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f4c:	e002      	b.n	8000f54 <HAL_DMA_IRQHandler+0x168>
 8000f4e:	2320      	movs	r3, #32
 8000f50:	e000      	b.n	8000f54 <HAL_DMA_IRQHandler+0x168>
 8000f52:	2302      	movs	r3, #2
 8000f54:	4a27      	ldr	r2, [pc, #156]	; (8000ff4 <HAL_DMA_IRQHandler+0x208>)
 8000f56:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d034      	beq.n	8000fd2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000f70:	e02f      	b.n	8000fd2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f76:	2208      	movs	r2, #8
 8000f78:	409a      	lsls	r2, r3
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d028      	beq.n	8000fd4 <HAL_DMA_IRQHandler+0x1e8>
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	f003 0308 	and.w	r3, r3, #8
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d023      	beq.n	8000fd4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f022 020e 	bic.w	r2, r2, #14
 8000f9a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fa4:	2101      	movs	r1, #1
 8000fa6:	fa01 f202 	lsl.w	r2, r1, r2
 8000faa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2201      	movs	r2, #1
 8000fb0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d004      	beq.n	8000fd4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	4798      	blx	r3
    }
  }
  return;
 8000fd2:	bf00      	nop
 8000fd4:	bf00      	nop
}
 8000fd6:	3710      	adds	r7, #16
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	40020008 	.word	0x40020008
 8000fe0:	4002001c 	.word	0x4002001c
 8000fe4:	40020030 	.word	0x40020030
 8000fe8:	40020044 	.word	0x40020044
 8000fec:	40020058 	.word	0x40020058
 8000ff0:	4002006c 	.word	0x4002006c
 8000ff4:	40020000 	.word	0x40020000

08000ff8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
 8001004:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800100e:	2101      	movs	r1, #1
 8001010:	fa01 f202 	lsl.w	r2, r1, r2
 8001014:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	683a      	ldr	r2, [r7, #0]
 800101c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	2b10      	cmp	r3, #16
 8001024:	d108      	bne.n	8001038 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	68ba      	ldr	r2, [r7, #8]
 8001034:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001036:	e007      	b.n	8001048 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	68ba      	ldr	r2, [r7, #8]
 800103e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	687a      	ldr	r2, [r7, #4]
 8001046:	60da      	str	r2, [r3, #12]
}
 8001048:	bf00      	nop
 800104a:	3714      	adds	r7, #20
 800104c:	46bd      	mov	sp, r7
 800104e:	bc80      	pop	{r7}
 8001050:	4770      	bx	lr
	...

08001054 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001054:	b480      	push	{r7}
 8001056:	b08b      	sub	sp, #44	; 0x2c
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800105e:	2300      	movs	r3, #0
 8001060:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001062:	2300      	movs	r3, #0
 8001064:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001066:	e169      	b.n	800133c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001068:	2201      	movs	r2, #1
 800106a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	69fa      	ldr	r2, [r7, #28]
 8001078:	4013      	ands	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	429a      	cmp	r2, r3
 8001082:	f040 8158 	bne.w	8001336 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	4a9a      	ldr	r2, [pc, #616]	; (80012f4 <HAL_GPIO_Init+0x2a0>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d05e      	beq.n	800114e <HAL_GPIO_Init+0xfa>
 8001090:	4a98      	ldr	r2, [pc, #608]	; (80012f4 <HAL_GPIO_Init+0x2a0>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d875      	bhi.n	8001182 <HAL_GPIO_Init+0x12e>
 8001096:	4a98      	ldr	r2, [pc, #608]	; (80012f8 <HAL_GPIO_Init+0x2a4>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d058      	beq.n	800114e <HAL_GPIO_Init+0xfa>
 800109c:	4a96      	ldr	r2, [pc, #600]	; (80012f8 <HAL_GPIO_Init+0x2a4>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d86f      	bhi.n	8001182 <HAL_GPIO_Init+0x12e>
 80010a2:	4a96      	ldr	r2, [pc, #600]	; (80012fc <HAL_GPIO_Init+0x2a8>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d052      	beq.n	800114e <HAL_GPIO_Init+0xfa>
 80010a8:	4a94      	ldr	r2, [pc, #592]	; (80012fc <HAL_GPIO_Init+0x2a8>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d869      	bhi.n	8001182 <HAL_GPIO_Init+0x12e>
 80010ae:	4a94      	ldr	r2, [pc, #592]	; (8001300 <HAL_GPIO_Init+0x2ac>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d04c      	beq.n	800114e <HAL_GPIO_Init+0xfa>
 80010b4:	4a92      	ldr	r2, [pc, #584]	; (8001300 <HAL_GPIO_Init+0x2ac>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d863      	bhi.n	8001182 <HAL_GPIO_Init+0x12e>
 80010ba:	4a92      	ldr	r2, [pc, #584]	; (8001304 <HAL_GPIO_Init+0x2b0>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d046      	beq.n	800114e <HAL_GPIO_Init+0xfa>
 80010c0:	4a90      	ldr	r2, [pc, #576]	; (8001304 <HAL_GPIO_Init+0x2b0>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d85d      	bhi.n	8001182 <HAL_GPIO_Init+0x12e>
 80010c6:	2b12      	cmp	r3, #18
 80010c8:	d82a      	bhi.n	8001120 <HAL_GPIO_Init+0xcc>
 80010ca:	2b12      	cmp	r3, #18
 80010cc:	d859      	bhi.n	8001182 <HAL_GPIO_Init+0x12e>
 80010ce:	a201      	add	r2, pc, #4	; (adr r2, 80010d4 <HAL_GPIO_Init+0x80>)
 80010d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010d4:	0800114f 	.word	0x0800114f
 80010d8:	08001129 	.word	0x08001129
 80010dc:	0800113b 	.word	0x0800113b
 80010e0:	0800117d 	.word	0x0800117d
 80010e4:	08001183 	.word	0x08001183
 80010e8:	08001183 	.word	0x08001183
 80010ec:	08001183 	.word	0x08001183
 80010f0:	08001183 	.word	0x08001183
 80010f4:	08001183 	.word	0x08001183
 80010f8:	08001183 	.word	0x08001183
 80010fc:	08001183 	.word	0x08001183
 8001100:	08001183 	.word	0x08001183
 8001104:	08001183 	.word	0x08001183
 8001108:	08001183 	.word	0x08001183
 800110c:	08001183 	.word	0x08001183
 8001110:	08001183 	.word	0x08001183
 8001114:	08001183 	.word	0x08001183
 8001118:	08001131 	.word	0x08001131
 800111c:	08001145 	.word	0x08001145
 8001120:	4a79      	ldr	r2, [pc, #484]	; (8001308 <HAL_GPIO_Init+0x2b4>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d013      	beq.n	800114e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001126:	e02c      	b.n	8001182 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	623b      	str	r3, [r7, #32]
          break;
 800112e:	e029      	b.n	8001184 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	3304      	adds	r3, #4
 8001136:	623b      	str	r3, [r7, #32]
          break;
 8001138:	e024      	b.n	8001184 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	68db      	ldr	r3, [r3, #12]
 800113e:	3308      	adds	r3, #8
 8001140:	623b      	str	r3, [r7, #32]
          break;
 8001142:	e01f      	b.n	8001184 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	330c      	adds	r3, #12
 800114a:	623b      	str	r3, [r7, #32]
          break;
 800114c:	e01a      	b.n	8001184 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d102      	bne.n	800115c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001156:	2304      	movs	r3, #4
 8001158:	623b      	str	r3, [r7, #32]
          break;
 800115a:	e013      	b.n	8001184 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	2b01      	cmp	r3, #1
 8001162:	d105      	bne.n	8001170 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001164:	2308      	movs	r3, #8
 8001166:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	69fa      	ldr	r2, [r7, #28]
 800116c:	611a      	str	r2, [r3, #16]
          break;
 800116e:	e009      	b.n	8001184 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001170:	2308      	movs	r3, #8
 8001172:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	69fa      	ldr	r2, [r7, #28]
 8001178:	615a      	str	r2, [r3, #20]
          break;
 800117a:	e003      	b.n	8001184 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800117c:	2300      	movs	r3, #0
 800117e:	623b      	str	r3, [r7, #32]
          break;
 8001180:	e000      	b.n	8001184 <HAL_GPIO_Init+0x130>
          break;
 8001182:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	2bff      	cmp	r3, #255	; 0xff
 8001188:	d801      	bhi.n	800118e <HAL_GPIO_Init+0x13a>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	e001      	b.n	8001192 <HAL_GPIO_Init+0x13e>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	3304      	adds	r3, #4
 8001192:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	2bff      	cmp	r3, #255	; 0xff
 8001198:	d802      	bhi.n	80011a0 <HAL_GPIO_Init+0x14c>
 800119a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	e002      	b.n	80011a6 <HAL_GPIO_Init+0x152>
 80011a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a2:	3b08      	subs	r3, #8
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	210f      	movs	r1, #15
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	fa01 f303 	lsl.w	r3, r1, r3
 80011b4:	43db      	mvns	r3, r3
 80011b6:	401a      	ands	r2, r3
 80011b8:	6a39      	ldr	r1, [r7, #32]
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	fa01 f303 	lsl.w	r3, r1, r3
 80011c0:	431a      	orrs	r2, r3
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	f000 80b1 	beq.w	8001336 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011d4:	4b4d      	ldr	r3, [pc, #308]	; (800130c <HAL_GPIO_Init+0x2b8>)
 80011d6:	699b      	ldr	r3, [r3, #24]
 80011d8:	4a4c      	ldr	r2, [pc, #304]	; (800130c <HAL_GPIO_Init+0x2b8>)
 80011da:	f043 0301 	orr.w	r3, r3, #1
 80011de:	6193      	str	r3, [r2, #24]
 80011e0:	4b4a      	ldr	r3, [pc, #296]	; (800130c <HAL_GPIO_Init+0x2b8>)
 80011e2:	699b      	ldr	r3, [r3, #24]
 80011e4:	f003 0301 	and.w	r3, r3, #1
 80011e8:	60bb      	str	r3, [r7, #8]
 80011ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80011ec:	4a48      	ldr	r2, [pc, #288]	; (8001310 <HAL_GPIO_Init+0x2bc>)
 80011ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f0:	089b      	lsrs	r3, r3, #2
 80011f2:	3302      	adds	r3, #2
 80011f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80011fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fc:	f003 0303 	and.w	r3, r3, #3
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	220f      	movs	r2, #15
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	43db      	mvns	r3, r3
 800120a:	68fa      	ldr	r2, [r7, #12]
 800120c:	4013      	ands	r3, r2
 800120e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	4a40      	ldr	r2, [pc, #256]	; (8001314 <HAL_GPIO_Init+0x2c0>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d013      	beq.n	8001240 <HAL_GPIO_Init+0x1ec>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	4a3f      	ldr	r2, [pc, #252]	; (8001318 <HAL_GPIO_Init+0x2c4>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d00d      	beq.n	800123c <HAL_GPIO_Init+0x1e8>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	4a3e      	ldr	r2, [pc, #248]	; (800131c <HAL_GPIO_Init+0x2c8>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d007      	beq.n	8001238 <HAL_GPIO_Init+0x1e4>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	4a3d      	ldr	r2, [pc, #244]	; (8001320 <HAL_GPIO_Init+0x2cc>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d101      	bne.n	8001234 <HAL_GPIO_Init+0x1e0>
 8001230:	2303      	movs	r3, #3
 8001232:	e006      	b.n	8001242 <HAL_GPIO_Init+0x1ee>
 8001234:	2304      	movs	r3, #4
 8001236:	e004      	b.n	8001242 <HAL_GPIO_Init+0x1ee>
 8001238:	2302      	movs	r3, #2
 800123a:	e002      	b.n	8001242 <HAL_GPIO_Init+0x1ee>
 800123c:	2301      	movs	r3, #1
 800123e:	e000      	b.n	8001242 <HAL_GPIO_Init+0x1ee>
 8001240:	2300      	movs	r3, #0
 8001242:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001244:	f002 0203 	and.w	r2, r2, #3
 8001248:	0092      	lsls	r2, r2, #2
 800124a:	4093      	lsls	r3, r2
 800124c:	68fa      	ldr	r2, [r7, #12]
 800124e:	4313      	orrs	r3, r2
 8001250:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001252:	492f      	ldr	r1, [pc, #188]	; (8001310 <HAL_GPIO_Init+0x2bc>)
 8001254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001256:	089b      	lsrs	r3, r3, #2
 8001258:	3302      	adds	r3, #2
 800125a:	68fa      	ldr	r2, [r7, #12]
 800125c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001268:	2b00      	cmp	r3, #0
 800126a:	d006      	beq.n	800127a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800126c:	4b2d      	ldr	r3, [pc, #180]	; (8001324 <HAL_GPIO_Init+0x2d0>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	492c      	ldr	r1, [pc, #176]	; (8001324 <HAL_GPIO_Init+0x2d0>)
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	4313      	orrs	r3, r2
 8001276:	600b      	str	r3, [r1, #0]
 8001278:	e006      	b.n	8001288 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800127a:	4b2a      	ldr	r3, [pc, #168]	; (8001324 <HAL_GPIO_Init+0x2d0>)
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	69bb      	ldr	r3, [r7, #24]
 8001280:	43db      	mvns	r3, r3
 8001282:	4928      	ldr	r1, [pc, #160]	; (8001324 <HAL_GPIO_Init+0x2d0>)
 8001284:	4013      	ands	r3, r2
 8001286:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d006      	beq.n	80012a2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001294:	4b23      	ldr	r3, [pc, #140]	; (8001324 <HAL_GPIO_Init+0x2d0>)
 8001296:	685a      	ldr	r2, [r3, #4]
 8001298:	4922      	ldr	r1, [pc, #136]	; (8001324 <HAL_GPIO_Init+0x2d0>)
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	4313      	orrs	r3, r2
 800129e:	604b      	str	r3, [r1, #4]
 80012a0:	e006      	b.n	80012b0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012a2:	4b20      	ldr	r3, [pc, #128]	; (8001324 <HAL_GPIO_Init+0x2d0>)
 80012a4:	685a      	ldr	r2, [r3, #4]
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	43db      	mvns	r3, r3
 80012aa:	491e      	ldr	r1, [pc, #120]	; (8001324 <HAL_GPIO_Init+0x2d0>)
 80012ac:	4013      	ands	r3, r2
 80012ae:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d006      	beq.n	80012ca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80012bc:	4b19      	ldr	r3, [pc, #100]	; (8001324 <HAL_GPIO_Init+0x2d0>)
 80012be:	689a      	ldr	r2, [r3, #8]
 80012c0:	4918      	ldr	r1, [pc, #96]	; (8001324 <HAL_GPIO_Init+0x2d0>)
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	608b      	str	r3, [r1, #8]
 80012c8:	e006      	b.n	80012d8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012ca:	4b16      	ldr	r3, [pc, #88]	; (8001324 <HAL_GPIO_Init+0x2d0>)
 80012cc:	689a      	ldr	r2, [r3, #8]
 80012ce:	69bb      	ldr	r3, [r7, #24]
 80012d0:	43db      	mvns	r3, r3
 80012d2:	4914      	ldr	r1, [pc, #80]	; (8001324 <HAL_GPIO_Init+0x2d0>)
 80012d4:	4013      	ands	r3, r2
 80012d6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d021      	beq.n	8001328 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80012e4:	4b0f      	ldr	r3, [pc, #60]	; (8001324 <HAL_GPIO_Init+0x2d0>)
 80012e6:	68da      	ldr	r2, [r3, #12]
 80012e8:	490e      	ldr	r1, [pc, #56]	; (8001324 <HAL_GPIO_Init+0x2d0>)
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	60cb      	str	r3, [r1, #12]
 80012f0:	e021      	b.n	8001336 <HAL_GPIO_Init+0x2e2>
 80012f2:	bf00      	nop
 80012f4:	10320000 	.word	0x10320000
 80012f8:	10310000 	.word	0x10310000
 80012fc:	10220000 	.word	0x10220000
 8001300:	10210000 	.word	0x10210000
 8001304:	10120000 	.word	0x10120000
 8001308:	10110000 	.word	0x10110000
 800130c:	40021000 	.word	0x40021000
 8001310:	40010000 	.word	0x40010000
 8001314:	40010800 	.word	0x40010800
 8001318:	40010c00 	.word	0x40010c00
 800131c:	40011000 	.word	0x40011000
 8001320:	40011400 	.word	0x40011400
 8001324:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001328:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <HAL_GPIO_Init+0x304>)
 800132a:	68da      	ldr	r2, [r3, #12]
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	43db      	mvns	r3, r3
 8001330:	4909      	ldr	r1, [pc, #36]	; (8001358 <HAL_GPIO_Init+0x304>)
 8001332:	4013      	ands	r3, r2
 8001334:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001338:	3301      	adds	r3, #1
 800133a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001342:	fa22 f303 	lsr.w	r3, r2, r3
 8001346:	2b00      	cmp	r3, #0
 8001348:	f47f ae8e 	bne.w	8001068 <HAL_GPIO_Init+0x14>
  }
}
 800134c:	bf00      	nop
 800134e:	bf00      	nop
 8001350:	372c      	adds	r7, #44	; 0x2c
 8001352:	46bd      	mov	sp, r7
 8001354:	bc80      	pop	{r7}
 8001356:	4770      	bx	lr
 8001358:	40010400 	.word	0x40010400

0800135c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	460b      	mov	r3, r1
 8001366:	807b      	strh	r3, [r7, #2]
 8001368:	4613      	mov	r3, r2
 800136a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800136c:	787b      	ldrb	r3, [r7, #1]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d003      	beq.n	800137a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001372:	887a      	ldrh	r2, [r7, #2]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001378:	e003      	b.n	8001382 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800137a:	887b      	ldrh	r3, [r7, #2]
 800137c:	041a      	lsls	r2, r3, #16
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	611a      	str	r2, [r3, #16]
}
 8001382:	bf00      	nop
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	bc80      	pop	{r7}
 800138a:	4770      	bx	lr

0800138c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b086      	sub	sp, #24
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d101      	bne.n	800139e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e272      	b.n	8001884 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	f000 8087 	beq.w	80014ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013ac:	4b92      	ldr	r3, [pc, #584]	; (80015f8 <HAL_RCC_OscConfig+0x26c>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f003 030c 	and.w	r3, r3, #12
 80013b4:	2b04      	cmp	r3, #4
 80013b6:	d00c      	beq.n	80013d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013b8:	4b8f      	ldr	r3, [pc, #572]	; (80015f8 <HAL_RCC_OscConfig+0x26c>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f003 030c 	and.w	r3, r3, #12
 80013c0:	2b08      	cmp	r3, #8
 80013c2:	d112      	bne.n	80013ea <HAL_RCC_OscConfig+0x5e>
 80013c4:	4b8c      	ldr	r3, [pc, #560]	; (80015f8 <HAL_RCC_OscConfig+0x26c>)
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013d0:	d10b      	bne.n	80013ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013d2:	4b89      	ldr	r3, [pc, #548]	; (80015f8 <HAL_RCC_OscConfig+0x26c>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d06c      	beq.n	80014b8 <HAL_RCC_OscConfig+0x12c>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d168      	bne.n	80014b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e24c      	b.n	8001884 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013f2:	d106      	bne.n	8001402 <HAL_RCC_OscConfig+0x76>
 80013f4:	4b80      	ldr	r3, [pc, #512]	; (80015f8 <HAL_RCC_OscConfig+0x26c>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a7f      	ldr	r2, [pc, #508]	; (80015f8 <HAL_RCC_OscConfig+0x26c>)
 80013fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013fe:	6013      	str	r3, [r2, #0]
 8001400:	e02e      	b.n	8001460 <HAL_RCC_OscConfig+0xd4>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d10c      	bne.n	8001424 <HAL_RCC_OscConfig+0x98>
 800140a:	4b7b      	ldr	r3, [pc, #492]	; (80015f8 <HAL_RCC_OscConfig+0x26c>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a7a      	ldr	r2, [pc, #488]	; (80015f8 <HAL_RCC_OscConfig+0x26c>)
 8001410:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001414:	6013      	str	r3, [r2, #0]
 8001416:	4b78      	ldr	r3, [pc, #480]	; (80015f8 <HAL_RCC_OscConfig+0x26c>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a77      	ldr	r2, [pc, #476]	; (80015f8 <HAL_RCC_OscConfig+0x26c>)
 800141c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001420:	6013      	str	r3, [r2, #0]
 8001422:	e01d      	b.n	8001460 <HAL_RCC_OscConfig+0xd4>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800142c:	d10c      	bne.n	8001448 <HAL_RCC_OscConfig+0xbc>
 800142e:	4b72      	ldr	r3, [pc, #456]	; (80015f8 <HAL_RCC_OscConfig+0x26c>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a71      	ldr	r2, [pc, #452]	; (80015f8 <HAL_RCC_OscConfig+0x26c>)
 8001434:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001438:	6013      	str	r3, [r2, #0]
 800143a:	4b6f      	ldr	r3, [pc, #444]	; (80015f8 <HAL_RCC_OscConfig+0x26c>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a6e      	ldr	r2, [pc, #440]	; (80015f8 <HAL_RCC_OscConfig+0x26c>)
 8001440:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001444:	6013      	str	r3, [r2, #0]
 8001446:	e00b      	b.n	8001460 <HAL_RCC_OscConfig+0xd4>
 8001448:	4b6b      	ldr	r3, [pc, #428]	; (80015f8 <HAL_RCC_OscConfig+0x26c>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a6a      	ldr	r2, [pc, #424]	; (80015f8 <HAL_RCC_OscConfig+0x26c>)
 800144e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001452:	6013      	str	r3, [r2, #0]
 8001454:	4b68      	ldr	r3, [pc, #416]	; (80015f8 <HAL_RCC_OscConfig+0x26c>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a67      	ldr	r2, [pc, #412]	; (80015f8 <HAL_RCC_OscConfig+0x26c>)
 800145a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800145e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d013      	beq.n	8001490 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001468:	f7ff faca 	bl	8000a00 <HAL_GetTick>
 800146c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800146e:	e008      	b.n	8001482 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001470:	f7ff fac6 	bl	8000a00 <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	2b64      	cmp	r3, #100	; 0x64
 800147c:	d901      	bls.n	8001482 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e200      	b.n	8001884 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001482:	4b5d      	ldr	r3, [pc, #372]	; (80015f8 <HAL_RCC_OscConfig+0x26c>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d0f0      	beq.n	8001470 <HAL_RCC_OscConfig+0xe4>
 800148e:	e014      	b.n	80014ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001490:	f7ff fab6 	bl	8000a00 <HAL_GetTick>
 8001494:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001496:	e008      	b.n	80014aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001498:	f7ff fab2 	bl	8000a00 <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b64      	cmp	r3, #100	; 0x64
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e1ec      	b.n	8001884 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014aa:	4b53      	ldr	r3, [pc, #332]	; (80015f8 <HAL_RCC_OscConfig+0x26c>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d1f0      	bne.n	8001498 <HAL_RCC_OscConfig+0x10c>
 80014b6:	e000      	b.n	80014ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0302 	and.w	r3, r3, #2
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d063      	beq.n	800158e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014c6:	4b4c      	ldr	r3, [pc, #304]	; (80015f8 <HAL_RCC_OscConfig+0x26c>)
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f003 030c 	and.w	r3, r3, #12
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d00b      	beq.n	80014ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80014d2:	4b49      	ldr	r3, [pc, #292]	; (80015f8 <HAL_RCC_OscConfig+0x26c>)
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f003 030c 	and.w	r3, r3, #12
 80014da:	2b08      	cmp	r3, #8
 80014dc:	d11c      	bne.n	8001518 <HAL_RCC_OscConfig+0x18c>
 80014de:	4b46      	ldr	r3, [pc, #280]	; (80015f8 <HAL_RCC_OscConfig+0x26c>)
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d116      	bne.n	8001518 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ea:	4b43      	ldr	r3, [pc, #268]	; (80015f8 <HAL_RCC_OscConfig+0x26c>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d005      	beq.n	8001502 <HAL_RCC_OscConfig+0x176>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	691b      	ldr	r3, [r3, #16]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d001      	beq.n	8001502 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e1c0      	b.n	8001884 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001502:	4b3d      	ldr	r3, [pc, #244]	; (80015f8 <HAL_RCC_OscConfig+0x26c>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	695b      	ldr	r3, [r3, #20]
 800150e:	00db      	lsls	r3, r3, #3
 8001510:	4939      	ldr	r1, [pc, #228]	; (80015f8 <HAL_RCC_OscConfig+0x26c>)
 8001512:	4313      	orrs	r3, r2
 8001514:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001516:	e03a      	b.n	800158e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	691b      	ldr	r3, [r3, #16]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d020      	beq.n	8001562 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001520:	4b36      	ldr	r3, [pc, #216]	; (80015fc <HAL_RCC_OscConfig+0x270>)
 8001522:	2201      	movs	r2, #1
 8001524:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001526:	f7ff fa6b 	bl	8000a00 <HAL_GetTick>
 800152a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800152c:	e008      	b.n	8001540 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800152e:	f7ff fa67 	bl	8000a00 <HAL_GetTick>
 8001532:	4602      	mov	r2, r0
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	2b02      	cmp	r3, #2
 800153a:	d901      	bls.n	8001540 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e1a1      	b.n	8001884 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001540:	4b2d      	ldr	r3, [pc, #180]	; (80015f8 <HAL_RCC_OscConfig+0x26c>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 0302 	and.w	r3, r3, #2
 8001548:	2b00      	cmp	r3, #0
 800154a:	d0f0      	beq.n	800152e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800154c:	4b2a      	ldr	r3, [pc, #168]	; (80015f8 <HAL_RCC_OscConfig+0x26c>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	695b      	ldr	r3, [r3, #20]
 8001558:	00db      	lsls	r3, r3, #3
 800155a:	4927      	ldr	r1, [pc, #156]	; (80015f8 <HAL_RCC_OscConfig+0x26c>)
 800155c:	4313      	orrs	r3, r2
 800155e:	600b      	str	r3, [r1, #0]
 8001560:	e015      	b.n	800158e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001562:	4b26      	ldr	r3, [pc, #152]	; (80015fc <HAL_RCC_OscConfig+0x270>)
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001568:	f7ff fa4a 	bl	8000a00 <HAL_GetTick>
 800156c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800156e:	e008      	b.n	8001582 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001570:	f7ff fa46 	bl	8000a00 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	2b02      	cmp	r3, #2
 800157c:	d901      	bls.n	8001582 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e180      	b.n	8001884 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001582:	4b1d      	ldr	r3, [pc, #116]	; (80015f8 <HAL_RCC_OscConfig+0x26c>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	2b00      	cmp	r3, #0
 800158c:	d1f0      	bne.n	8001570 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0308 	and.w	r3, r3, #8
 8001596:	2b00      	cmp	r3, #0
 8001598:	d03a      	beq.n	8001610 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	699b      	ldr	r3, [r3, #24]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d019      	beq.n	80015d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015a2:	4b17      	ldr	r3, [pc, #92]	; (8001600 <HAL_RCC_OscConfig+0x274>)
 80015a4:	2201      	movs	r2, #1
 80015a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015a8:	f7ff fa2a 	bl	8000a00 <HAL_GetTick>
 80015ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ae:	e008      	b.n	80015c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015b0:	f7ff fa26 	bl	8000a00 <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e160      	b.n	8001884 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015c2:	4b0d      	ldr	r3, [pc, #52]	; (80015f8 <HAL_RCC_OscConfig+0x26c>)
 80015c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d0f0      	beq.n	80015b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80015ce:	2001      	movs	r0, #1
 80015d0:	f000 fad8 	bl	8001b84 <RCC_Delay>
 80015d4:	e01c      	b.n	8001610 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015d6:	4b0a      	ldr	r3, [pc, #40]	; (8001600 <HAL_RCC_OscConfig+0x274>)
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015dc:	f7ff fa10 	bl	8000a00 <HAL_GetTick>
 80015e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015e2:	e00f      	b.n	8001604 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015e4:	f7ff fa0c 	bl	8000a00 <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d908      	bls.n	8001604 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e146      	b.n	8001884 <HAL_RCC_OscConfig+0x4f8>
 80015f6:	bf00      	nop
 80015f8:	40021000 	.word	0x40021000
 80015fc:	42420000 	.word	0x42420000
 8001600:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001604:	4b92      	ldr	r3, [pc, #584]	; (8001850 <HAL_RCC_OscConfig+0x4c4>)
 8001606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001608:	f003 0302 	and.w	r3, r3, #2
 800160c:	2b00      	cmp	r3, #0
 800160e:	d1e9      	bne.n	80015e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0304 	and.w	r3, r3, #4
 8001618:	2b00      	cmp	r3, #0
 800161a:	f000 80a6 	beq.w	800176a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800161e:	2300      	movs	r3, #0
 8001620:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001622:	4b8b      	ldr	r3, [pc, #556]	; (8001850 <HAL_RCC_OscConfig+0x4c4>)
 8001624:	69db      	ldr	r3, [r3, #28]
 8001626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d10d      	bne.n	800164a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800162e:	4b88      	ldr	r3, [pc, #544]	; (8001850 <HAL_RCC_OscConfig+0x4c4>)
 8001630:	69db      	ldr	r3, [r3, #28]
 8001632:	4a87      	ldr	r2, [pc, #540]	; (8001850 <HAL_RCC_OscConfig+0x4c4>)
 8001634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001638:	61d3      	str	r3, [r2, #28]
 800163a:	4b85      	ldr	r3, [pc, #532]	; (8001850 <HAL_RCC_OscConfig+0x4c4>)
 800163c:	69db      	ldr	r3, [r3, #28]
 800163e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001642:	60bb      	str	r3, [r7, #8]
 8001644:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001646:	2301      	movs	r3, #1
 8001648:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800164a:	4b82      	ldr	r3, [pc, #520]	; (8001854 <HAL_RCC_OscConfig+0x4c8>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001652:	2b00      	cmp	r3, #0
 8001654:	d118      	bne.n	8001688 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001656:	4b7f      	ldr	r3, [pc, #508]	; (8001854 <HAL_RCC_OscConfig+0x4c8>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a7e      	ldr	r2, [pc, #504]	; (8001854 <HAL_RCC_OscConfig+0x4c8>)
 800165c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001660:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001662:	f7ff f9cd 	bl	8000a00 <HAL_GetTick>
 8001666:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001668:	e008      	b.n	800167c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800166a:	f7ff f9c9 	bl	8000a00 <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	2b64      	cmp	r3, #100	; 0x64
 8001676:	d901      	bls.n	800167c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e103      	b.n	8001884 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800167c:	4b75      	ldr	r3, [pc, #468]	; (8001854 <HAL_RCC_OscConfig+0x4c8>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001684:	2b00      	cmp	r3, #0
 8001686:	d0f0      	beq.n	800166a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	2b01      	cmp	r3, #1
 800168e:	d106      	bne.n	800169e <HAL_RCC_OscConfig+0x312>
 8001690:	4b6f      	ldr	r3, [pc, #444]	; (8001850 <HAL_RCC_OscConfig+0x4c4>)
 8001692:	6a1b      	ldr	r3, [r3, #32]
 8001694:	4a6e      	ldr	r2, [pc, #440]	; (8001850 <HAL_RCC_OscConfig+0x4c4>)
 8001696:	f043 0301 	orr.w	r3, r3, #1
 800169a:	6213      	str	r3, [r2, #32]
 800169c:	e02d      	b.n	80016fa <HAL_RCC_OscConfig+0x36e>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	68db      	ldr	r3, [r3, #12]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d10c      	bne.n	80016c0 <HAL_RCC_OscConfig+0x334>
 80016a6:	4b6a      	ldr	r3, [pc, #424]	; (8001850 <HAL_RCC_OscConfig+0x4c4>)
 80016a8:	6a1b      	ldr	r3, [r3, #32]
 80016aa:	4a69      	ldr	r2, [pc, #420]	; (8001850 <HAL_RCC_OscConfig+0x4c4>)
 80016ac:	f023 0301 	bic.w	r3, r3, #1
 80016b0:	6213      	str	r3, [r2, #32]
 80016b2:	4b67      	ldr	r3, [pc, #412]	; (8001850 <HAL_RCC_OscConfig+0x4c4>)
 80016b4:	6a1b      	ldr	r3, [r3, #32]
 80016b6:	4a66      	ldr	r2, [pc, #408]	; (8001850 <HAL_RCC_OscConfig+0x4c4>)
 80016b8:	f023 0304 	bic.w	r3, r3, #4
 80016bc:	6213      	str	r3, [r2, #32]
 80016be:	e01c      	b.n	80016fa <HAL_RCC_OscConfig+0x36e>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	2b05      	cmp	r3, #5
 80016c6:	d10c      	bne.n	80016e2 <HAL_RCC_OscConfig+0x356>
 80016c8:	4b61      	ldr	r3, [pc, #388]	; (8001850 <HAL_RCC_OscConfig+0x4c4>)
 80016ca:	6a1b      	ldr	r3, [r3, #32]
 80016cc:	4a60      	ldr	r2, [pc, #384]	; (8001850 <HAL_RCC_OscConfig+0x4c4>)
 80016ce:	f043 0304 	orr.w	r3, r3, #4
 80016d2:	6213      	str	r3, [r2, #32]
 80016d4:	4b5e      	ldr	r3, [pc, #376]	; (8001850 <HAL_RCC_OscConfig+0x4c4>)
 80016d6:	6a1b      	ldr	r3, [r3, #32]
 80016d8:	4a5d      	ldr	r2, [pc, #372]	; (8001850 <HAL_RCC_OscConfig+0x4c4>)
 80016da:	f043 0301 	orr.w	r3, r3, #1
 80016de:	6213      	str	r3, [r2, #32]
 80016e0:	e00b      	b.n	80016fa <HAL_RCC_OscConfig+0x36e>
 80016e2:	4b5b      	ldr	r3, [pc, #364]	; (8001850 <HAL_RCC_OscConfig+0x4c4>)
 80016e4:	6a1b      	ldr	r3, [r3, #32]
 80016e6:	4a5a      	ldr	r2, [pc, #360]	; (8001850 <HAL_RCC_OscConfig+0x4c4>)
 80016e8:	f023 0301 	bic.w	r3, r3, #1
 80016ec:	6213      	str	r3, [r2, #32]
 80016ee:	4b58      	ldr	r3, [pc, #352]	; (8001850 <HAL_RCC_OscConfig+0x4c4>)
 80016f0:	6a1b      	ldr	r3, [r3, #32]
 80016f2:	4a57      	ldr	r2, [pc, #348]	; (8001850 <HAL_RCC_OscConfig+0x4c4>)
 80016f4:	f023 0304 	bic.w	r3, r3, #4
 80016f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	68db      	ldr	r3, [r3, #12]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d015      	beq.n	800172e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001702:	f7ff f97d 	bl	8000a00 <HAL_GetTick>
 8001706:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001708:	e00a      	b.n	8001720 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800170a:	f7ff f979 	bl	8000a00 <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	f241 3288 	movw	r2, #5000	; 0x1388
 8001718:	4293      	cmp	r3, r2
 800171a:	d901      	bls.n	8001720 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e0b1      	b.n	8001884 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001720:	4b4b      	ldr	r3, [pc, #300]	; (8001850 <HAL_RCC_OscConfig+0x4c4>)
 8001722:	6a1b      	ldr	r3, [r3, #32]
 8001724:	f003 0302 	and.w	r3, r3, #2
 8001728:	2b00      	cmp	r3, #0
 800172a:	d0ee      	beq.n	800170a <HAL_RCC_OscConfig+0x37e>
 800172c:	e014      	b.n	8001758 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800172e:	f7ff f967 	bl	8000a00 <HAL_GetTick>
 8001732:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001734:	e00a      	b.n	800174c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001736:	f7ff f963 	bl	8000a00 <HAL_GetTick>
 800173a:	4602      	mov	r2, r0
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	f241 3288 	movw	r2, #5000	; 0x1388
 8001744:	4293      	cmp	r3, r2
 8001746:	d901      	bls.n	800174c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	e09b      	b.n	8001884 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800174c:	4b40      	ldr	r3, [pc, #256]	; (8001850 <HAL_RCC_OscConfig+0x4c4>)
 800174e:	6a1b      	ldr	r3, [r3, #32]
 8001750:	f003 0302 	and.w	r3, r3, #2
 8001754:	2b00      	cmp	r3, #0
 8001756:	d1ee      	bne.n	8001736 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001758:	7dfb      	ldrb	r3, [r7, #23]
 800175a:	2b01      	cmp	r3, #1
 800175c:	d105      	bne.n	800176a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800175e:	4b3c      	ldr	r3, [pc, #240]	; (8001850 <HAL_RCC_OscConfig+0x4c4>)
 8001760:	69db      	ldr	r3, [r3, #28]
 8001762:	4a3b      	ldr	r2, [pc, #236]	; (8001850 <HAL_RCC_OscConfig+0x4c4>)
 8001764:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001768:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	69db      	ldr	r3, [r3, #28]
 800176e:	2b00      	cmp	r3, #0
 8001770:	f000 8087 	beq.w	8001882 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001774:	4b36      	ldr	r3, [pc, #216]	; (8001850 <HAL_RCC_OscConfig+0x4c4>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f003 030c 	and.w	r3, r3, #12
 800177c:	2b08      	cmp	r3, #8
 800177e:	d061      	beq.n	8001844 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	69db      	ldr	r3, [r3, #28]
 8001784:	2b02      	cmp	r3, #2
 8001786:	d146      	bne.n	8001816 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001788:	4b33      	ldr	r3, [pc, #204]	; (8001858 <HAL_RCC_OscConfig+0x4cc>)
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800178e:	f7ff f937 	bl	8000a00 <HAL_GetTick>
 8001792:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001794:	e008      	b.n	80017a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001796:	f7ff f933 	bl	8000a00 <HAL_GetTick>
 800179a:	4602      	mov	r2, r0
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d901      	bls.n	80017a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e06d      	b.n	8001884 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017a8:	4b29      	ldr	r3, [pc, #164]	; (8001850 <HAL_RCC_OscConfig+0x4c4>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d1f0      	bne.n	8001796 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6a1b      	ldr	r3, [r3, #32]
 80017b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017bc:	d108      	bne.n	80017d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80017be:	4b24      	ldr	r3, [pc, #144]	; (8001850 <HAL_RCC_OscConfig+0x4c4>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	4921      	ldr	r1, [pc, #132]	; (8001850 <HAL_RCC_OscConfig+0x4c4>)
 80017cc:	4313      	orrs	r3, r2
 80017ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017d0:	4b1f      	ldr	r3, [pc, #124]	; (8001850 <HAL_RCC_OscConfig+0x4c4>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6a19      	ldr	r1, [r3, #32]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e0:	430b      	orrs	r3, r1
 80017e2:	491b      	ldr	r1, [pc, #108]	; (8001850 <HAL_RCC_OscConfig+0x4c4>)
 80017e4:	4313      	orrs	r3, r2
 80017e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017e8:	4b1b      	ldr	r3, [pc, #108]	; (8001858 <HAL_RCC_OscConfig+0x4cc>)
 80017ea:	2201      	movs	r2, #1
 80017ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ee:	f7ff f907 	bl	8000a00 <HAL_GetTick>
 80017f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017f4:	e008      	b.n	8001808 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017f6:	f7ff f903 	bl	8000a00 <HAL_GetTick>
 80017fa:	4602      	mov	r2, r0
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	2b02      	cmp	r3, #2
 8001802:	d901      	bls.n	8001808 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	e03d      	b.n	8001884 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001808:	4b11      	ldr	r3, [pc, #68]	; (8001850 <HAL_RCC_OscConfig+0x4c4>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001810:	2b00      	cmp	r3, #0
 8001812:	d0f0      	beq.n	80017f6 <HAL_RCC_OscConfig+0x46a>
 8001814:	e035      	b.n	8001882 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001816:	4b10      	ldr	r3, [pc, #64]	; (8001858 <HAL_RCC_OscConfig+0x4cc>)
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181c:	f7ff f8f0 	bl	8000a00 <HAL_GetTick>
 8001820:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001822:	e008      	b.n	8001836 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001824:	f7ff f8ec 	bl	8000a00 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b02      	cmp	r3, #2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e026      	b.n	8001884 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001836:	4b06      	ldr	r3, [pc, #24]	; (8001850 <HAL_RCC_OscConfig+0x4c4>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d1f0      	bne.n	8001824 <HAL_RCC_OscConfig+0x498>
 8001842:	e01e      	b.n	8001882 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	69db      	ldr	r3, [r3, #28]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d107      	bne.n	800185c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e019      	b.n	8001884 <HAL_RCC_OscConfig+0x4f8>
 8001850:	40021000 	.word	0x40021000
 8001854:	40007000 	.word	0x40007000
 8001858:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800185c:	4b0b      	ldr	r3, [pc, #44]	; (800188c <HAL_RCC_OscConfig+0x500>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a1b      	ldr	r3, [r3, #32]
 800186c:	429a      	cmp	r2, r3
 800186e:	d106      	bne.n	800187e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800187a:	429a      	cmp	r2, r3
 800187c:	d001      	beq.n	8001882 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e000      	b.n	8001884 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001882:	2300      	movs	r3, #0
}
 8001884:	4618      	mov	r0, r3
 8001886:	3718      	adds	r7, #24
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40021000 	.word	0x40021000

08001890 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d101      	bne.n	80018a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e0d0      	b.n	8001a46 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018a4:	4b6a      	ldr	r3, [pc, #424]	; (8001a50 <HAL_RCC_ClockConfig+0x1c0>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0307 	and.w	r3, r3, #7
 80018ac:	683a      	ldr	r2, [r7, #0]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d910      	bls.n	80018d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018b2:	4b67      	ldr	r3, [pc, #412]	; (8001a50 <HAL_RCC_ClockConfig+0x1c0>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f023 0207 	bic.w	r2, r3, #7
 80018ba:	4965      	ldr	r1, [pc, #404]	; (8001a50 <HAL_RCC_ClockConfig+0x1c0>)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	4313      	orrs	r3, r2
 80018c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018c2:	4b63      	ldr	r3, [pc, #396]	; (8001a50 <HAL_RCC_ClockConfig+0x1c0>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0307 	and.w	r3, r3, #7
 80018ca:	683a      	ldr	r2, [r7, #0]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d001      	beq.n	80018d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e0b8      	b.n	8001a46 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0302 	and.w	r3, r3, #2
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d020      	beq.n	8001922 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0304 	and.w	r3, r3, #4
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d005      	beq.n	80018f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018ec:	4b59      	ldr	r3, [pc, #356]	; (8001a54 <HAL_RCC_ClockConfig+0x1c4>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	4a58      	ldr	r2, [pc, #352]	; (8001a54 <HAL_RCC_ClockConfig+0x1c4>)
 80018f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80018f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0308 	and.w	r3, r3, #8
 8001900:	2b00      	cmp	r3, #0
 8001902:	d005      	beq.n	8001910 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001904:	4b53      	ldr	r3, [pc, #332]	; (8001a54 <HAL_RCC_ClockConfig+0x1c4>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	4a52      	ldr	r2, [pc, #328]	; (8001a54 <HAL_RCC_ClockConfig+0x1c4>)
 800190a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800190e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001910:	4b50      	ldr	r3, [pc, #320]	; (8001a54 <HAL_RCC_ClockConfig+0x1c4>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	494d      	ldr	r1, [pc, #308]	; (8001a54 <HAL_RCC_ClockConfig+0x1c4>)
 800191e:	4313      	orrs	r3, r2
 8001920:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	2b00      	cmp	r3, #0
 800192c:	d040      	beq.n	80019b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	2b01      	cmp	r3, #1
 8001934:	d107      	bne.n	8001946 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001936:	4b47      	ldr	r3, [pc, #284]	; (8001a54 <HAL_RCC_ClockConfig+0x1c4>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d115      	bne.n	800196e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e07f      	b.n	8001a46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	2b02      	cmp	r3, #2
 800194c:	d107      	bne.n	800195e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800194e:	4b41      	ldr	r3, [pc, #260]	; (8001a54 <HAL_RCC_ClockConfig+0x1c4>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d109      	bne.n	800196e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e073      	b.n	8001a46 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800195e:	4b3d      	ldr	r3, [pc, #244]	; (8001a54 <HAL_RCC_ClockConfig+0x1c4>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d101      	bne.n	800196e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e06b      	b.n	8001a46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800196e:	4b39      	ldr	r3, [pc, #228]	; (8001a54 <HAL_RCC_ClockConfig+0x1c4>)
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f023 0203 	bic.w	r2, r3, #3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	4936      	ldr	r1, [pc, #216]	; (8001a54 <HAL_RCC_ClockConfig+0x1c4>)
 800197c:	4313      	orrs	r3, r2
 800197e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001980:	f7ff f83e 	bl	8000a00 <HAL_GetTick>
 8001984:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001986:	e00a      	b.n	800199e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001988:	f7ff f83a 	bl	8000a00 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	f241 3288 	movw	r2, #5000	; 0x1388
 8001996:	4293      	cmp	r3, r2
 8001998:	d901      	bls.n	800199e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e053      	b.n	8001a46 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800199e:	4b2d      	ldr	r3, [pc, #180]	; (8001a54 <HAL_RCC_ClockConfig+0x1c4>)
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f003 020c 	and.w	r2, r3, #12
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d1eb      	bne.n	8001988 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019b0:	4b27      	ldr	r3, [pc, #156]	; (8001a50 <HAL_RCC_ClockConfig+0x1c0>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0307 	and.w	r3, r3, #7
 80019b8:	683a      	ldr	r2, [r7, #0]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d210      	bcs.n	80019e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019be:	4b24      	ldr	r3, [pc, #144]	; (8001a50 <HAL_RCC_ClockConfig+0x1c0>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f023 0207 	bic.w	r2, r3, #7
 80019c6:	4922      	ldr	r1, [pc, #136]	; (8001a50 <HAL_RCC_ClockConfig+0x1c0>)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ce:	4b20      	ldr	r3, [pc, #128]	; (8001a50 <HAL_RCC_ClockConfig+0x1c0>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0307 	and.w	r3, r3, #7
 80019d6:	683a      	ldr	r2, [r7, #0]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d001      	beq.n	80019e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e032      	b.n	8001a46 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0304 	and.w	r3, r3, #4
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d008      	beq.n	80019fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019ec:	4b19      	ldr	r3, [pc, #100]	; (8001a54 <HAL_RCC_ClockConfig+0x1c4>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	4916      	ldr	r1, [pc, #88]	; (8001a54 <HAL_RCC_ClockConfig+0x1c4>)
 80019fa:	4313      	orrs	r3, r2
 80019fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0308 	and.w	r3, r3, #8
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d009      	beq.n	8001a1e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a0a:	4b12      	ldr	r3, [pc, #72]	; (8001a54 <HAL_RCC_ClockConfig+0x1c4>)
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	691b      	ldr	r3, [r3, #16]
 8001a16:	00db      	lsls	r3, r3, #3
 8001a18:	490e      	ldr	r1, [pc, #56]	; (8001a54 <HAL_RCC_ClockConfig+0x1c4>)
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a1e:	f000 f821 	bl	8001a64 <HAL_RCC_GetSysClockFreq>
 8001a22:	4602      	mov	r2, r0
 8001a24:	4b0b      	ldr	r3, [pc, #44]	; (8001a54 <HAL_RCC_ClockConfig+0x1c4>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	091b      	lsrs	r3, r3, #4
 8001a2a:	f003 030f 	and.w	r3, r3, #15
 8001a2e:	490a      	ldr	r1, [pc, #40]	; (8001a58 <HAL_RCC_ClockConfig+0x1c8>)
 8001a30:	5ccb      	ldrb	r3, [r1, r3]
 8001a32:	fa22 f303 	lsr.w	r3, r2, r3
 8001a36:	4a09      	ldr	r2, [pc, #36]	; (8001a5c <HAL_RCC_ClockConfig+0x1cc>)
 8001a38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a3a:	4b09      	ldr	r3, [pc, #36]	; (8001a60 <HAL_RCC_ClockConfig+0x1d0>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7fe ff9c 	bl	800097c <HAL_InitTick>

  return HAL_OK;
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3710      	adds	r7, #16
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	40022000 	.word	0x40022000
 8001a54:	40021000 	.word	0x40021000
 8001a58:	08003444 	.word	0x08003444
 8001a5c:	20000000 	.word	0x20000000
 8001a60:	20000004 	.word	0x20000004

08001a64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a64:	b490      	push	{r4, r7}
 8001a66:	b08a      	sub	sp, #40	; 0x28
 8001a68:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001a6a:	4b29      	ldr	r3, [pc, #164]	; (8001b10 <HAL_RCC_GetSysClockFreq+0xac>)
 8001a6c:	1d3c      	adds	r4, r7, #4
 8001a6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001a74:	f240 2301 	movw	r3, #513	; 0x201
 8001a78:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61fb      	str	r3, [r7, #28]
 8001a7e:	2300      	movs	r3, #0
 8001a80:	61bb      	str	r3, [r7, #24]
 8001a82:	2300      	movs	r3, #0
 8001a84:	627b      	str	r3, [r7, #36]	; 0x24
 8001a86:	2300      	movs	r3, #0
 8001a88:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a8e:	4b21      	ldr	r3, [pc, #132]	; (8001b14 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	f003 030c 	and.w	r3, r3, #12
 8001a9a:	2b04      	cmp	r3, #4
 8001a9c:	d002      	beq.n	8001aa4 <HAL_RCC_GetSysClockFreq+0x40>
 8001a9e:	2b08      	cmp	r3, #8
 8001aa0:	d003      	beq.n	8001aaa <HAL_RCC_GetSysClockFreq+0x46>
 8001aa2:	e02b      	b.n	8001afc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001aa4:	4b1c      	ldr	r3, [pc, #112]	; (8001b18 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001aa6:	623b      	str	r3, [r7, #32]
      break;
 8001aa8:	e02b      	b.n	8001b02 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	0c9b      	lsrs	r3, r3, #18
 8001aae:	f003 030f 	and.w	r3, r3, #15
 8001ab2:	3328      	adds	r3, #40	; 0x28
 8001ab4:	443b      	add	r3, r7
 8001ab6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001aba:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d012      	beq.n	8001aec <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ac6:	4b13      	ldr	r3, [pc, #76]	; (8001b14 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	0c5b      	lsrs	r3, r3, #17
 8001acc:	f003 0301 	and.w	r3, r3, #1
 8001ad0:	3328      	adds	r3, #40	; 0x28
 8001ad2:	443b      	add	r3, r7
 8001ad4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001ad8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	4a0e      	ldr	r2, [pc, #56]	; (8001b18 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ade:	fb03 f202 	mul.w	r2, r3, r2
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae8:	627b      	str	r3, [r7, #36]	; 0x24
 8001aea:	e004      	b.n	8001af6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	4a0b      	ldr	r2, [pc, #44]	; (8001b1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001af0:	fb02 f303 	mul.w	r3, r2, r3
 8001af4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af8:	623b      	str	r3, [r7, #32]
      break;
 8001afa:	e002      	b.n	8001b02 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001afc:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001afe:	623b      	str	r3, [r7, #32]
      break;
 8001b00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b02:	6a3b      	ldr	r3, [r7, #32]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3728      	adds	r7, #40	; 0x28
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bc90      	pop	{r4, r7}
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	08003434 	.word	0x08003434
 8001b14:	40021000 	.word	0x40021000
 8001b18:	007a1200 	.word	0x007a1200
 8001b1c:	003d0900 	.word	0x003d0900

08001b20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b24:	4b02      	ldr	r3, [pc, #8]	; (8001b30 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b26:	681b      	ldr	r3, [r3, #0]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bc80      	pop	{r7}
 8001b2e:	4770      	bx	lr
 8001b30:	20000000 	.word	0x20000000

08001b34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b38:	f7ff fff2 	bl	8001b20 <HAL_RCC_GetHCLKFreq>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	4b05      	ldr	r3, [pc, #20]	; (8001b54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	0a1b      	lsrs	r3, r3, #8
 8001b44:	f003 0307 	and.w	r3, r3, #7
 8001b48:	4903      	ldr	r1, [pc, #12]	; (8001b58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b4a:	5ccb      	ldrb	r3, [r1, r3]
 8001b4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	40021000 	.word	0x40021000
 8001b58:	08003454 	.word	0x08003454

08001b5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b60:	f7ff ffde 	bl	8001b20 <HAL_RCC_GetHCLKFreq>
 8001b64:	4602      	mov	r2, r0
 8001b66:	4b05      	ldr	r3, [pc, #20]	; (8001b7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	0adb      	lsrs	r3, r3, #11
 8001b6c:	f003 0307 	and.w	r3, r3, #7
 8001b70:	4903      	ldr	r1, [pc, #12]	; (8001b80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b72:	5ccb      	ldrb	r3, [r1, r3]
 8001b74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	08003454 	.word	0x08003454

08001b84 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b8c:	4b0a      	ldr	r3, [pc, #40]	; (8001bb8 <RCC_Delay+0x34>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a0a      	ldr	r2, [pc, #40]	; (8001bbc <RCC_Delay+0x38>)
 8001b92:	fba2 2303 	umull	r2, r3, r2, r3
 8001b96:	0a5b      	lsrs	r3, r3, #9
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	fb02 f303 	mul.w	r3, r2, r3
 8001b9e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ba0:	bf00      	nop
  }
  while (Delay --);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	1e5a      	subs	r2, r3, #1
 8001ba6:	60fa      	str	r2, [r7, #12]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d1f9      	bne.n	8001ba0 <RCC_Delay+0x1c>
}
 8001bac:	bf00      	nop
 8001bae:	bf00      	nop
 8001bb0:	3714      	adds	r7, #20
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bc80      	pop	{r7}
 8001bb6:	4770      	bx	lr
 8001bb8:	20000000 	.word	0x20000000
 8001bbc:	10624dd3 	.word	0x10624dd3

08001bc0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d101      	bne.n	8001bd2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e076      	b.n	8001cc0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d108      	bne.n	8001bec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001be2:	d009      	beq.n	8001bf8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2200      	movs	r2, #0
 8001be8:	61da      	str	r2, [r3, #28]
 8001bea:	e005      	b.n	8001bf8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d106      	bne.n	8001c18 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f7fe fc7c 	bl	8000510 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2202      	movs	r2, #2
 8001c1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c2e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001c40:	431a      	orrs	r2, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c4a:	431a      	orrs	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	691b      	ldr	r3, [r3, #16]
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	431a      	orrs	r2, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	695b      	ldr	r3, [r3, #20]
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	431a      	orrs	r2, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c68:	431a      	orrs	r2, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	69db      	ldr	r3, [r3, #28]
 8001c6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c72:	431a      	orrs	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6a1b      	ldr	r3, [r3, #32]
 8001c78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c7c:	ea42 0103 	orr.w	r1, r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c84:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	699b      	ldr	r3, [r3, #24]
 8001c94:	0c1a      	lsrs	r2, r3, #16
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f002 0204 	and.w	r2, r2, #4
 8001c9e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	69da      	ldr	r2, [r3, #28]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cae:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001cbe:	2300      	movs	r3, #0
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b088      	sub	sp, #32
 8001ccc:	af02      	add	r7, sp, #8
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	60b9      	str	r1, [r7, #8]
 8001cd2:	603b      	str	r3, [r7, #0]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001ce4:	d112      	bne.n	8001d0c <HAL_SPI_Receive+0x44>
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d10e      	bne.n	8001d0c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2204      	movs	r2, #4
 8001cf2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001cf6:	88fa      	ldrh	r2, [r7, #6]
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	9300      	str	r3, [sp, #0]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	68ba      	ldr	r2, [r7, #8]
 8001d00:	68b9      	ldr	r1, [r7, #8]
 8001d02:	68f8      	ldr	r0, [r7, #12]
 8001d04:	f000 f8f1 	bl	8001eea <HAL_SPI_TransmitReceive>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	e0ea      	b.n	8001ee2 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d101      	bne.n	8001d1a <HAL_SPI_Receive+0x52>
 8001d16:	2302      	movs	r3, #2
 8001d18:	e0e3      	b.n	8001ee2 <HAL_SPI_Receive+0x21a>
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001d22:	f7fe fe6d 	bl	8000a00 <HAL_GetTick>
 8001d26:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d002      	beq.n	8001d3a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8001d34:	2302      	movs	r3, #2
 8001d36:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001d38:	e0ca      	b.n	8001ed0 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d002      	beq.n	8001d46 <HAL_SPI_Receive+0x7e>
 8001d40:	88fb      	ldrh	r3, [r7, #6]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d102      	bne.n	8001d4c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001d4a:	e0c1      	b.n	8001ed0 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2204      	movs	r2, #4
 8001d50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2200      	movs	r2, #0
 8001d58:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	68ba      	ldr	r2, [r7, #8]
 8001d5e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	88fa      	ldrh	r2, [r7, #6]
 8001d64:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	88fa      	ldrh	r2, [r7, #6]
 8001d6a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2200      	movs	r2, #0
 8001d76:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2200      	movs	r2, #0
 8001d82:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2200      	movs	r2, #0
 8001d88:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d92:	d10f      	bne.n	8001db4 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001da2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001db2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dbe:	2b40      	cmp	r3, #64	; 0x40
 8001dc0:	d007      	beq.n	8001dd2 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001dd0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d162      	bne.n	8001ea0 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001dda:	e02e      	b.n	8001e3a <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d115      	bne.n	8001e16 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f103 020c 	add.w	r2, r3, #12
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001df6:	7812      	ldrb	r2, [r2, #0]
 8001df8:	b2d2      	uxtb	r2, r2
 8001dfa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e00:	1c5a      	adds	r2, r3, #1
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	b29a      	uxth	r2, r3
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001e14:	e011      	b.n	8001e3a <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e16:	f7fe fdf3 	bl	8000a00 <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	683a      	ldr	r2, [r7, #0]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d803      	bhi.n	8001e2e <HAL_SPI_Receive+0x166>
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e2c:	d102      	bne.n	8001e34 <HAL_SPI_Receive+0x16c>
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d102      	bne.n	8001e3a <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001e38:	e04a      	b.n	8001ed0 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d1cb      	bne.n	8001ddc <HAL_SPI_Receive+0x114>
 8001e44:	e031      	b.n	8001eaa <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f003 0301 	and.w	r3, r3, #1
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d113      	bne.n	8001e7c <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	68da      	ldr	r2, [r3, #12]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e5e:	b292      	uxth	r2, r2
 8001e60:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e66:	1c9a      	adds	r2, r3, #2
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	3b01      	subs	r3, #1
 8001e74:	b29a      	uxth	r2, r3
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001e7a:	e011      	b.n	8001ea0 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e7c:	f7fe fdc0 	bl	8000a00 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	683a      	ldr	r2, [r7, #0]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d803      	bhi.n	8001e94 <HAL_SPI_Receive+0x1cc>
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e92:	d102      	bne.n	8001e9a <HAL_SPI_Receive+0x1d2>
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d102      	bne.n	8001ea0 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001e9e:	e017      	b.n	8001ed0 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d1cd      	bne.n	8001e46 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001eaa:	693a      	ldr	r2, [r7, #16]
 8001eac:	6839      	ldr	r1, [r7, #0]
 8001eae:	68f8      	ldr	r0, [r7, #12]
 8001eb0:	f000 fb90 	bl	80025d4 <SPI_EndRxTransaction>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d002      	beq.n	8001ec0 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2220      	movs	r2, #32
 8001ebe:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d002      	beq.n	8001ece <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	75fb      	strb	r3, [r7, #23]
 8001ecc:	e000      	b.n	8001ed0 <HAL_SPI_Receive+0x208>
  }

error :
 8001ece:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001ee0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3718      	adds	r7, #24
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b08c      	sub	sp, #48	; 0x30
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	60f8      	str	r0, [r7, #12]
 8001ef2:	60b9      	str	r1, [r7, #8]
 8001ef4:	607a      	str	r2, [r7, #4]
 8001ef6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001efc:	2300      	movs	r3, #0
 8001efe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d101      	bne.n	8001f10 <HAL_SPI_TransmitReceive+0x26>
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	e18a      	b.n	8002226 <HAL_SPI_TransmitReceive+0x33c>
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001f18:	f7fe fd72 	bl	8000a00 <HAL_GetTick>
 8001f1c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001f2e:	887b      	ldrh	r3, [r7, #2]
 8001f30:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001f32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d00f      	beq.n	8001f5a <HAL_SPI_TransmitReceive+0x70>
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f40:	d107      	bne.n	8001f52 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d103      	bne.n	8001f52 <HAL_SPI_TransmitReceive+0x68>
 8001f4a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f4e:	2b04      	cmp	r3, #4
 8001f50:	d003      	beq.n	8001f5a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001f52:	2302      	movs	r3, #2
 8001f54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001f58:	e15b      	b.n	8002212 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d005      	beq.n	8001f6c <HAL_SPI_TransmitReceive+0x82>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d002      	beq.n	8001f6c <HAL_SPI_TransmitReceive+0x82>
 8001f66:	887b      	ldrh	r3, [r7, #2]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d103      	bne.n	8001f74 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001f72:	e14e      	b.n	8002212 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	2b04      	cmp	r3, #4
 8001f7e:	d003      	beq.n	8001f88 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2205      	movs	r2, #5
 8001f84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	887a      	ldrh	r2, [r7, #2]
 8001f98:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	887a      	ldrh	r2, [r7, #2]
 8001f9e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	68ba      	ldr	r2, [r7, #8]
 8001fa4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	887a      	ldrh	r2, [r7, #2]
 8001faa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	887a      	ldrh	r2, [r7, #2]
 8001fb0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fc8:	2b40      	cmp	r3, #64	; 0x40
 8001fca:	d007      	beq.n	8001fdc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fda:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001fe4:	d178      	bne.n	80020d8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d002      	beq.n	8001ff4 <HAL_SPI_TransmitReceive+0x10a>
 8001fee:	8b7b      	ldrh	r3, [r7, #26]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d166      	bne.n	80020c2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff8:	881a      	ldrh	r2, [r3, #0]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002004:	1c9a      	adds	r2, r3, #2
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800200e:	b29b      	uxth	r3, r3
 8002010:	3b01      	subs	r3, #1
 8002012:	b29a      	uxth	r2, r3
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002018:	e053      	b.n	80020c2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	2b02      	cmp	r3, #2
 8002026:	d11b      	bne.n	8002060 <HAL_SPI_TransmitReceive+0x176>
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800202c:	b29b      	uxth	r3, r3
 800202e:	2b00      	cmp	r3, #0
 8002030:	d016      	beq.n	8002060 <HAL_SPI_TransmitReceive+0x176>
 8002032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002034:	2b01      	cmp	r3, #1
 8002036:	d113      	bne.n	8002060 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203c:	881a      	ldrh	r2, [r3, #0]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002048:	1c9a      	adds	r2, r3, #2
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002052:	b29b      	uxth	r3, r3
 8002054:	3b01      	subs	r3, #1
 8002056:	b29a      	uxth	r2, r3
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800205c:	2300      	movs	r3, #0
 800205e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	2b01      	cmp	r3, #1
 800206c:	d119      	bne.n	80020a2 <HAL_SPI_TransmitReceive+0x1b8>
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002072:	b29b      	uxth	r3, r3
 8002074:	2b00      	cmp	r3, #0
 8002076:	d014      	beq.n	80020a2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	68da      	ldr	r2, [r3, #12]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002082:	b292      	uxth	r2, r2
 8002084:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800208a:	1c9a      	adds	r2, r3, #2
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002094:	b29b      	uxth	r3, r3
 8002096:	3b01      	subs	r3, #1
 8002098:	b29a      	uxth	r2, r3
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800209e:	2301      	movs	r3, #1
 80020a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80020a2:	f7fe fcad 	bl	8000a00 <HAL_GetTick>
 80020a6:	4602      	mov	r2, r0
 80020a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d807      	bhi.n	80020c2 <HAL_SPI_TransmitReceive+0x1d8>
 80020b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020b8:	d003      	beq.n	80020c2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80020c0:	e0a7      	b.n	8002212 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d1a6      	bne.n	800201a <HAL_SPI_TransmitReceive+0x130>
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d1a1      	bne.n	800201a <HAL_SPI_TransmitReceive+0x130>
 80020d6:	e07c      	b.n	80021d2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d002      	beq.n	80020e6 <HAL_SPI_TransmitReceive+0x1fc>
 80020e0:	8b7b      	ldrh	r3, [r7, #26]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d16b      	bne.n	80021be <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	330c      	adds	r3, #12
 80020f0:	7812      	ldrb	r2, [r2, #0]
 80020f2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f8:	1c5a      	adds	r2, r3, #1
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002102:	b29b      	uxth	r3, r3
 8002104:	3b01      	subs	r3, #1
 8002106:	b29a      	uxth	r2, r3
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800210c:	e057      	b.n	80021be <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f003 0302 	and.w	r3, r3, #2
 8002118:	2b02      	cmp	r3, #2
 800211a:	d11c      	bne.n	8002156 <HAL_SPI_TransmitReceive+0x26c>
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002120:	b29b      	uxth	r3, r3
 8002122:	2b00      	cmp	r3, #0
 8002124:	d017      	beq.n	8002156 <HAL_SPI_TransmitReceive+0x26c>
 8002126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002128:	2b01      	cmp	r3, #1
 800212a:	d114      	bne.n	8002156 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	330c      	adds	r3, #12
 8002136:	7812      	ldrb	r2, [r2, #0]
 8002138:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	1c5a      	adds	r2, r3, #1
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002148:	b29b      	uxth	r3, r3
 800214a:	3b01      	subs	r3, #1
 800214c:	b29a      	uxth	r2, r3
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002152:	2300      	movs	r3, #0
 8002154:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f003 0301 	and.w	r3, r3, #1
 8002160:	2b01      	cmp	r3, #1
 8002162:	d119      	bne.n	8002198 <HAL_SPI_TransmitReceive+0x2ae>
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002168:	b29b      	uxth	r3, r3
 800216a:	2b00      	cmp	r3, #0
 800216c:	d014      	beq.n	8002198 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	68da      	ldr	r2, [r3, #12]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002178:	b2d2      	uxtb	r2, r2
 800217a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002180:	1c5a      	adds	r2, r3, #1
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800218a:	b29b      	uxth	r3, r3
 800218c:	3b01      	subs	r3, #1
 800218e:	b29a      	uxth	r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002194:	2301      	movs	r3, #1
 8002196:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002198:	f7fe fc32 	bl	8000a00 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d803      	bhi.n	80021b0 <HAL_SPI_TransmitReceive+0x2c6>
 80021a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ae:	d102      	bne.n	80021b6 <HAL_SPI_TransmitReceive+0x2cc>
 80021b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d103      	bne.n	80021be <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80021bc:	e029      	b.n	8002212 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d1a2      	bne.n	800210e <HAL_SPI_TransmitReceive+0x224>
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d19d      	bne.n	800210e <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80021d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021d4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80021d6:	68f8      	ldr	r0, [r7, #12]
 80021d8:	f000 fa4e 	bl	8002678 <SPI_EndRxTxTransaction>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d006      	beq.n	80021f0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2220      	movs	r2, #32
 80021ec:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80021ee:	e010      	b.n	8002212 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d10b      	bne.n	8002210 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80021f8:	2300      	movs	r3, #0
 80021fa:	617b      	str	r3, [r7, #20]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	617b      	str	r3, [r7, #20]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	617b      	str	r3, [r7, #20]
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	e000      	b.n	8002212 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002210:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2201      	movs	r2, #1
 8002216:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2200      	movs	r2, #0
 800221e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002222:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002226:	4618      	mov	r0, r3
 8002228:	3730      	adds	r7, #48	; 0x30
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
	...

08002230 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b086      	sub	sp, #24
 8002234:	af00      	add	r7, sp, #0
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	60b9      	str	r1, [r7, #8]
 800223a:	4613      	mov	r3, r2
 800223c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800223e:	2300      	movs	r3, #0
 8002240:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002248:	2b01      	cmp	r3, #1
 800224a:	d101      	bne.n	8002250 <HAL_SPI_Transmit_DMA+0x20>
 800224c:	2302      	movs	r3, #2
 800224e:	e09b      	b.n	8002388 <HAL_SPI_Transmit_DMA+0x158>
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800225e:	b2db      	uxtb	r3, r3
 8002260:	2b01      	cmp	r3, #1
 8002262:	d002      	beq.n	800226a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8002264:	2302      	movs	r3, #2
 8002266:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002268:	e089      	b.n	800237e <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d002      	beq.n	8002276 <HAL_SPI_Transmit_DMA+0x46>
 8002270:	88fb      	ldrh	r3, [r7, #6]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d102      	bne.n	800227c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	75fb      	strb	r3, [r7, #23]
    goto error;
 800227a:	e080      	b.n	800237e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2203      	movs	r2, #3
 8002280:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2200      	movs	r2, #0
 8002288:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	68ba      	ldr	r2, [r7, #8]
 800228e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	88fa      	ldrh	r2, [r7, #6]
 8002294:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	88fa      	ldrh	r2, [r7, #6]
 800229a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2200      	movs	r2, #0
 80022a0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2200      	movs	r2, #0
 80022a6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2200      	movs	r2, #0
 80022ac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2200      	movs	r2, #0
 80022b2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2200      	movs	r2, #0
 80022b8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022c2:	d10f      	bne.n	80022e4 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022d2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80022e2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022e8:	4a29      	ldr	r2, [pc, #164]	; (8002390 <HAL_SPI_Transmit_DMA+0x160>)
 80022ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022f0:	4a28      	ldr	r2, [pc, #160]	; (8002394 <HAL_SPI_Transmit_DMA+0x164>)
 80022f2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022f8:	4a27      	ldr	r2, [pc, #156]	; (8002398 <HAL_SPI_Transmit_DMA+0x168>)
 80022fa:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002300:	2200      	movs	r2, #0
 8002302:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230c:	4619      	mov	r1, r3
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	330c      	adds	r3, #12
 8002314:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800231a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800231c:	f7fe fd06 	bl	8000d2c <HAL_DMA_Start_IT>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d00c      	beq.n	8002340 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800232a:	f043 0210 	orr.w	r2, r3, #16
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2201      	movs	r2, #1
 800233a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800233e:	e01e      	b.n	800237e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800234a:	2b40      	cmp	r3, #64	; 0x40
 800234c:	d007      	beq.n	800235e <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800235c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	685a      	ldr	r2, [r3, #4]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f042 0220 	orr.w	r2, r2, #32
 800236c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	685a      	ldr	r2, [r3, #4]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f042 0202 	orr.w	r2, r2, #2
 800237c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2200      	movs	r2, #0
 8002382:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002386:	7dfb      	ldrb	r3, [r7, #23]
}
 8002388:	4618      	mov	r0, r3
 800238a:	3718      	adds	r7, #24
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	08002467 	.word	0x08002467
 8002394:	080023c1 	.word	0x080023c1
 8002398:	08002483 	.word	0x08002483

0800239c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80023a4:	bf00      	nop
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bc80      	pop	{r7}
 80023ac:	4770      	bx	lr

080023ae <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80023ae:	b480      	push	{r7}
 80023b0:	b083      	sub	sp, #12
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80023b6:	bf00      	nop
 80023b8:	370c      	adds	r7, #12
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bc80      	pop	{r7}
 80023be:	4770      	bx	lr

080023c0 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023cc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80023ce:	f7fe fb17 	bl	8000a00 <HAL_GetTick>
 80023d2:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0320 	and.w	r3, r3, #32
 80023de:	2b20      	cmp	r3, #32
 80023e0:	d03b      	beq.n	800245a <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	685a      	ldr	r2, [r3, #4]
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f022 0220 	bic.w	r2, r2, #32
 80023f0:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	685a      	ldr	r2, [r3, #4]
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f022 0202 	bic.w	r2, r2, #2
 8002400:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	2164      	movs	r1, #100	; 0x64
 8002406:	6978      	ldr	r0, [r7, #20]
 8002408:	f000 f936 	bl	8002678 <SPI_EndRxTxTransaction>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d005      	beq.n	800241e <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002416:	f043 0220 	orr.w	r2, r3, #32
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d10a      	bne.n	800243c <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002426:	2300      	movs	r3, #0
 8002428:	60fb      	str	r3, [r7, #12]
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	60fb      	str	r3, [r7, #12]
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	60fb      	str	r3, [r7, #12]
 800243a:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	2200      	movs	r2, #0
 8002440:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	2201      	movs	r2, #1
 8002446:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800244e:	2b00      	cmp	r3, #0
 8002450:	d003      	beq.n	800245a <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002452:	6978      	ldr	r0, [r7, #20]
 8002454:	f7ff ffab 	bl	80023ae <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002458:	e002      	b.n	8002460 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800245a:	6978      	ldr	r0, [r7, #20]
 800245c:	f7fd ffd4 	bl	8000408 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002460:	3718      	adds	r7, #24
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b084      	sub	sp, #16
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002472:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8002474:	68f8      	ldr	r0, [r7, #12]
 8002476:	f7ff ff91 	bl	800239c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800247a:	bf00      	nop
 800247c:	3710      	adds	r7, #16
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b084      	sub	sp, #16
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248e:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	685a      	ldr	r2, [r3, #4]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f022 0203 	bic.w	r2, r2, #3
 800249e:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a4:	f043 0210 	orr.w	r2, r3, #16
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80024b4:	68f8      	ldr	r0, [r7, #12]
 80024b6:	f7ff ff7a 	bl	80023ae <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80024ba:	bf00      	nop
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
	...

080024c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b088      	sub	sp, #32
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	60b9      	str	r1, [r7, #8]
 80024ce:	603b      	str	r3, [r7, #0]
 80024d0:	4613      	mov	r3, r2
 80024d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80024d4:	f7fe fa94 	bl	8000a00 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024dc:	1a9b      	subs	r3, r3, r2
 80024de:	683a      	ldr	r2, [r7, #0]
 80024e0:	4413      	add	r3, r2
 80024e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80024e4:	f7fe fa8c 	bl	8000a00 <HAL_GetTick>
 80024e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80024ea:	4b39      	ldr	r3, [pc, #228]	; (80025d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	015b      	lsls	r3, r3, #5
 80024f0:	0d1b      	lsrs	r3, r3, #20
 80024f2:	69fa      	ldr	r2, [r7, #28]
 80024f4:	fb02 f303 	mul.w	r3, r2, r3
 80024f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80024fa:	e054      	b.n	80025a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002502:	d050      	beq.n	80025a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002504:	f7fe fa7c 	bl	8000a00 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	69fa      	ldr	r2, [r7, #28]
 8002510:	429a      	cmp	r2, r3
 8002512:	d902      	bls.n	800251a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d13d      	bne.n	8002596 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	685a      	ldr	r2, [r3, #4]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002528:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002532:	d111      	bne.n	8002558 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800253c:	d004      	beq.n	8002548 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002546:	d107      	bne.n	8002558 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002556:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800255c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002560:	d10f      	bne.n	8002582 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002570:	601a      	str	r2, [r3, #0]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002580:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2201      	movs	r2, #1
 8002586:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e017      	b.n	80025c6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d101      	bne.n	80025a0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800259c:	2300      	movs	r3, #0
 800259e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	3b01      	subs	r3, #1
 80025a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	689a      	ldr	r2, [r3, #8]
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	4013      	ands	r3, r2
 80025b0:	68ba      	ldr	r2, [r7, #8]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	bf0c      	ite	eq
 80025b6:	2301      	moveq	r3, #1
 80025b8:	2300      	movne	r3, #0
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	461a      	mov	r2, r3
 80025be:	79fb      	ldrb	r3, [r7, #7]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d19b      	bne.n	80024fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3720      	adds	r7, #32
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	20000000 	.word	0x20000000

080025d4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af02      	add	r7, sp, #8
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025e8:	d111      	bne.n	800260e <SPI_EndRxTransaction+0x3a>
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025f2:	d004      	beq.n	80025fe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025fc:	d107      	bne.n	800260e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800260c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002616:	d117      	bne.n	8002648 <SPI_EndRxTransaction+0x74>
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002620:	d112      	bne.n	8002648 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	9300      	str	r3, [sp, #0]
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	2200      	movs	r2, #0
 800262a:	2101      	movs	r1, #1
 800262c:	68f8      	ldr	r0, [r7, #12]
 800262e:	f7ff ff49 	bl	80024c4 <SPI_WaitFlagStateUntilTimeout>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d01a      	beq.n	800266e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800263c:	f043 0220 	orr.w	r2, r3, #32
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e013      	b.n	8002670 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	9300      	str	r3, [sp, #0]
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	2200      	movs	r2, #0
 8002650:	2180      	movs	r1, #128	; 0x80
 8002652:	68f8      	ldr	r0, [r7, #12]
 8002654:	f7ff ff36 	bl	80024c4 <SPI_WaitFlagStateUntilTimeout>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d007      	beq.n	800266e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002662:	f043 0220 	orr.w	r2, r3, #32
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e000      	b.n	8002670 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800266e:	2300      	movs	r3, #0
}
 8002670:	4618      	mov	r0, r3
 8002672:	3710      	adds	r7, #16
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b086      	sub	sp, #24
 800267c:	af02      	add	r7, sp, #8
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	9300      	str	r3, [sp, #0]
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	2200      	movs	r2, #0
 800268c:	2180      	movs	r1, #128	; 0x80
 800268e:	68f8      	ldr	r0, [r7, #12]
 8002690:	f7ff ff18 	bl	80024c4 <SPI_WaitFlagStateUntilTimeout>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d007      	beq.n	80026aa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800269e:	f043 0220 	orr.w	r2, r3, #32
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e000      	b.n	80026ac <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3710      	adds	r7, #16
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d101      	bne.n	80026c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e03f      	b.n	8002746 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d106      	bne.n	80026e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f7fe f8c6 	bl	800086c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2224      	movs	r2, #36	; 0x24
 80026e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	68da      	ldr	r2, [r3, #12]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f000 f905 	bl	8002908 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	691a      	ldr	r2, [r3, #16]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800270c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	695a      	ldr	r2, [r3, #20]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800271c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68da      	ldr	r2, [r3, #12]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800272c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2220      	movs	r2, #32
 8002738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2220      	movs	r2, #32
 8002740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002744:	2300      	movs	r3, #0
}
 8002746:	4618      	mov	r0, r3
 8002748:	3708      	adds	r7, #8
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800274e:	b580      	push	{r7, lr}
 8002750:	b08a      	sub	sp, #40	; 0x28
 8002752:	af02      	add	r7, sp, #8
 8002754:	60f8      	str	r0, [r7, #12]
 8002756:	60b9      	str	r1, [r7, #8]
 8002758:	603b      	str	r3, [r7, #0]
 800275a:	4613      	mov	r3, r2
 800275c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800275e:	2300      	movs	r3, #0
 8002760:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2b20      	cmp	r3, #32
 800276c:	d17c      	bne.n	8002868 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d002      	beq.n	800277a <HAL_UART_Transmit+0x2c>
 8002774:	88fb      	ldrh	r3, [r7, #6]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d101      	bne.n	800277e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e075      	b.n	800286a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002784:	2b01      	cmp	r3, #1
 8002786:	d101      	bne.n	800278c <HAL_UART_Transmit+0x3e>
 8002788:	2302      	movs	r3, #2
 800278a:	e06e      	b.n	800286a <HAL_UART_Transmit+0x11c>
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2200      	movs	r2, #0
 8002798:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2221      	movs	r2, #33	; 0x21
 800279e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027a2:	f7fe f92d 	bl	8000a00 <HAL_GetTick>
 80027a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	88fa      	ldrh	r2, [r7, #6]
 80027ac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	88fa      	ldrh	r2, [r7, #6]
 80027b2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027bc:	d108      	bne.n	80027d0 <HAL_UART_Transmit+0x82>
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d104      	bne.n	80027d0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80027c6:	2300      	movs	r3, #0
 80027c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	61bb      	str	r3, [r7, #24]
 80027ce:	e003      	b.n	80027d8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027d4:	2300      	movs	r3, #0
 80027d6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80027e0:	e02a      	b.n	8002838 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	9300      	str	r3, [sp, #0]
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	2200      	movs	r2, #0
 80027ea:	2180      	movs	r1, #128	; 0x80
 80027ec:	68f8      	ldr	r0, [r7, #12]
 80027ee:	f000 f840 	bl	8002872 <UART_WaitOnFlagUntilTimeout>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e036      	b.n	800286a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d10b      	bne.n	800281a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	881b      	ldrh	r3, [r3, #0]
 8002806:	461a      	mov	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002810:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	3302      	adds	r3, #2
 8002816:	61bb      	str	r3, [r7, #24]
 8002818:	e007      	b.n	800282a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	781a      	ldrb	r2, [r3, #0]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	3301      	adds	r3, #1
 8002828:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800282e:	b29b      	uxth	r3, r3
 8002830:	3b01      	subs	r3, #1
 8002832:	b29a      	uxth	r2, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800283c:	b29b      	uxth	r3, r3
 800283e:	2b00      	cmp	r3, #0
 8002840:	d1cf      	bne.n	80027e2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	9300      	str	r3, [sp, #0]
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	2200      	movs	r2, #0
 800284a:	2140      	movs	r1, #64	; 0x40
 800284c:	68f8      	ldr	r0, [r7, #12]
 800284e:	f000 f810 	bl	8002872 <UART_WaitOnFlagUntilTimeout>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e006      	b.n	800286a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2220      	movs	r2, #32
 8002860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002864:	2300      	movs	r3, #0
 8002866:	e000      	b.n	800286a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002868:	2302      	movs	r3, #2
  }
}
 800286a:	4618      	mov	r0, r3
 800286c:	3720      	adds	r7, #32
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002872:	b580      	push	{r7, lr}
 8002874:	b084      	sub	sp, #16
 8002876:	af00      	add	r7, sp, #0
 8002878:	60f8      	str	r0, [r7, #12]
 800287a:	60b9      	str	r1, [r7, #8]
 800287c:	603b      	str	r3, [r7, #0]
 800287e:	4613      	mov	r3, r2
 8002880:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002882:	e02c      	b.n	80028de <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800288a:	d028      	beq.n	80028de <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d007      	beq.n	80028a2 <UART_WaitOnFlagUntilTimeout+0x30>
 8002892:	f7fe f8b5 	bl	8000a00 <HAL_GetTick>
 8002896:	4602      	mov	r2, r0
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d21d      	bcs.n	80028de <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68da      	ldr	r2, [r3, #12]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80028b0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	695a      	ldr	r2, [r3, #20]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f022 0201 	bic.w	r2, r2, #1
 80028c0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2220      	movs	r2, #32
 80028c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2220      	movs	r2, #32
 80028ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e00f      	b.n	80028fe <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	4013      	ands	r3, r2
 80028e8:	68ba      	ldr	r2, [r7, #8]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	bf0c      	ite	eq
 80028ee:	2301      	moveq	r3, #1
 80028f0:	2300      	movne	r3, #0
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	461a      	mov	r2, r3
 80028f6:	79fb      	ldrb	r3, [r7, #7]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d0c3      	beq.n	8002884 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3710      	adds	r7, #16
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
	...

08002908 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	68da      	ldr	r2, [r3, #12]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	430a      	orrs	r2, r1
 8002924:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	689a      	ldr	r2, [r3, #8]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	431a      	orrs	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	695b      	ldr	r3, [r3, #20]
 8002934:	4313      	orrs	r3, r2
 8002936:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002942:	f023 030c 	bic.w	r3, r3, #12
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	6812      	ldr	r2, [r2, #0]
 800294a:	68b9      	ldr	r1, [r7, #8]
 800294c:	430b      	orrs	r3, r1
 800294e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	695b      	ldr	r3, [r3, #20]
 8002956:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	699a      	ldr	r2, [r3, #24]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	430a      	orrs	r2, r1
 8002964:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a2c      	ldr	r2, [pc, #176]	; (8002a1c <UART_SetConfig+0x114>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d103      	bne.n	8002978 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002970:	f7ff f8f4 	bl	8001b5c <HAL_RCC_GetPCLK2Freq>
 8002974:	60f8      	str	r0, [r7, #12]
 8002976:	e002      	b.n	800297e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002978:	f7ff f8dc 	bl	8001b34 <HAL_RCC_GetPCLK1Freq>
 800297c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	4613      	mov	r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	4413      	add	r3, r2
 8002986:	009a      	lsls	r2, r3, #2
 8002988:	441a      	add	r2, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	fbb2 f3f3 	udiv	r3, r2, r3
 8002994:	4a22      	ldr	r2, [pc, #136]	; (8002a20 <UART_SetConfig+0x118>)
 8002996:	fba2 2303 	umull	r2, r3, r2, r3
 800299a:	095b      	lsrs	r3, r3, #5
 800299c:	0119      	lsls	r1, r3, #4
 800299e:	68fa      	ldr	r2, [r7, #12]
 80029a0:	4613      	mov	r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	4413      	add	r3, r2
 80029a6:	009a      	lsls	r2, r3, #2
 80029a8:	441a      	add	r2, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80029b4:	4b1a      	ldr	r3, [pc, #104]	; (8002a20 <UART_SetConfig+0x118>)
 80029b6:	fba3 0302 	umull	r0, r3, r3, r2
 80029ba:	095b      	lsrs	r3, r3, #5
 80029bc:	2064      	movs	r0, #100	; 0x64
 80029be:	fb00 f303 	mul.w	r3, r0, r3
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	011b      	lsls	r3, r3, #4
 80029c6:	3332      	adds	r3, #50	; 0x32
 80029c8:	4a15      	ldr	r2, [pc, #84]	; (8002a20 <UART_SetConfig+0x118>)
 80029ca:	fba2 2303 	umull	r2, r3, r2, r3
 80029ce:	095b      	lsrs	r3, r3, #5
 80029d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029d4:	4419      	add	r1, r3
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	4613      	mov	r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	4413      	add	r3, r2
 80029de:	009a      	lsls	r2, r3, #2
 80029e0:	441a      	add	r2, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80029ec:	4b0c      	ldr	r3, [pc, #48]	; (8002a20 <UART_SetConfig+0x118>)
 80029ee:	fba3 0302 	umull	r0, r3, r3, r2
 80029f2:	095b      	lsrs	r3, r3, #5
 80029f4:	2064      	movs	r0, #100	; 0x64
 80029f6:	fb00 f303 	mul.w	r3, r0, r3
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	011b      	lsls	r3, r3, #4
 80029fe:	3332      	adds	r3, #50	; 0x32
 8002a00:	4a07      	ldr	r2, [pc, #28]	; (8002a20 <UART_SetConfig+0x118>)
 8002a02:	fba2 2303 	umull	r2, r3, r2, r3
 8002a06:	095b      	lsrs	r3, r3, #5
 8002a08:	f003 020f 	and.w	r2, r3, #15
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	440a      	add	r2, r1
 8002a12:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002a14:	bf00      	nop
 8002a16:	3710      	adds	r7, #16
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	40013800 	.word	0x40013800
 8002a20:	51eb851f 	.word	0x51eb851f

08002a24 <__errno>:
 8002a24:	4b01      	ldr	r3, [pc, #4]	; (8002a2c <__errno+0x8>)
 8002a26:	6818      	ldr	r0, [r3, #0]
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	2000000c 	.word	0x2000000c

08002a30 <__libc_init_array>:
 8002a30:	b570      	push	{r4, r5, r6, lr}
 8002a32:	2600      	movs	r6, #0
 8002a34:	4d0c      	ldr	r5, [pc, #48]	; (8002a68 <__libc_init_array+0x38>)
 8002a36:	4c0d      	ldr	r4, [pc, #52]	; (8002a6c <__libc_init_array+0x3c>)
 8002a38:	1b64      	subs	r4, r4, r5
 8002a3a:	10a4      	asrs	r4, r4, #2
 8002a3c:	42a6      	cmp	r6, r4
 8002a3e:	d109      	bne.n	8002a54 <__libc_init_array+0x24>
 8002a40:	f000 fcd0 	bl	80033e4 <_init>
 8002a44:	2600      	movs	r6, #0
 8002a46:	4d0a      	ldr	r5, [pc, #40]	; (8002a70 <__libc_init_array+0x40>)
 8002a48:	4c0a      	ldr	r4, [pc, #40]	; (8002a74 <__libc_init_array+0x44>)
 8002a4a:	1b64      	subs	r4, r4, r5
 8002a4c:	10a4      	asrs	r4, r4, #2
 8002a4e:	42a6      	cmp	r6, r4
 8002a50:	d105      	bne.n	8002a5e <__libc_init_array+0x2e>
 8002a52:	bd70      	pop	{r4, r5, r6, pc}
 8002a54:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a58:	4798      	blx	r3
 8002a5a:	3601      	adds	r6, #1
 8002a5c:	e7ee      	b.n	8002a3c <__libc_init_array+0xc>
 8002a5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a62:	4798      	blx	r3
 8002a64:	3601      	adds	r6, #1
 8002a66:	e7f2      	b.n	8002a4e <__libc_init_array+0x1e>
 8002a68:	08003490 	.word	0x08003490
 8002a6c:	08003490 	.word	0x08003490
 8002a70:	08003490 	.word	0x08003490
 8002a74:	08003494 	.word	0x08003494

08002a78 <memset>:
 8002a78:	4603      	mov	r3, r0
 8002a7a:	4402      	add	r2, r0
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d100      	bne.n	8002a82 <memset+0xa>
 8002a80:	4770      	bx	lr
 8002a82:	f803 1b01 	strb.w	r1, [r3], #1
 8002a86:	e7f9      	b.n	8002a7c <memset+0x4>

08002a88 <sniprintf>:
 8002a88:	b40c      	push	{r2, r3}
 8002a8a:	b530      	push	{r4, r5, lr}
 8002a8c:	4b17      	ldr	r3, [pc, #92]	; (8002aec <sniprintf+0x64>)
 8002a8e:	1e0c      	subs	r4, r1, #0
 8002a90:	681d      	ldr	r5, [r3, #0]
 8002a92:	b09d      	sub	sp, #116	; 0x74
 8002a94:	da08      	bge.n	8002aa8 <sniprintf+0x20>
 8002a96:	238b      	movs	r3, #139	; 0x8b
 8002a98:	f04f 30ff 	mov.w	r0, #4294967295
 8002a9c:	602b      	str	r3, [r5, #0]
 8002a9e:	b01d      	add	sp, #116	; 0x74
 8002aa0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002aa4:	b002      	add	sp, #8
 8002aa6:	4770      	bx	lr
 8002aa8:	f44f 7302 	mov.w	r3, #520	; 0x208
 8002aac:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002ab0:	bf0c      	ite	eq
 8002ab2:	4623      	moveq	r3, r4
 8002ab4:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002ab8:	9304      	str	r3, [sp, #16]
 8002aba:	9307      	str	r3, [sp, #28]
 8002abc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ac0:	9002      	str	r0, [sp, #8]
 8002ac2:	9006      	str	r0, [sp, #24]
 8002ac4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002ac8:	4628      	mov	r0, r5
 8002aca:	ab21      	add	r3, sp, #132	; 0x84
 8002acc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002ace:	a902      	add	r1, sp, #8
 8002ad0:	9301      	str	r3, [sp, #4]
 8002ad2:	f000 f889 	bl	8002be8 <_svfiprintf_r>
 8002ad6:	1c43      	adds	r3, r0, #1
 8002ad8:	bfbc      	itt	lt
 8002ada:	238b      	movlt	r3, #139	; 0x8b
 8002adc:	602b      	strlt	r3, [r5, #0]
 8002ade:	2c00      	cmp	r4, #0
 8002ae0:	d0dd      	beq.n	8002a9e <sniprintf+0x16>
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	9b02      	ldr	r3, [sp, #8]
 8002ae6:	701a      	strb	r2, [r3, #0]
 8002ae8:	e7d9      	b.n	8002a9e <sniprintf+0x16>
 8002aea:	bf00      	nop
 8002aec:	2000000c 	.word	0x2000000c

08002af0 <siprintf>:
 8002af0:	b40e      	push	{r1, r2, r3}
 8002af2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002af6:	b500      	push	{lr}
 8002af8:	b09c      	sub	sp, #112	; 0x70
 8002afa:	ab1d      	add	r3, sp, #116	; 0x74
 8002afc:	9002      	str	r0, [sp, #8]
 8002afe:	9006      	str	r0, [sp, #24]
 8002b00:	9107      	str	r1, [sp, #28]
 8002b02:	9104      	str	r1, [sp, #16]
 8002b04:	4808      	ldr	r0, [pc, #32]	; (8002b28 <siprintf+0x38>)
 8002b06:	4909      	ldr	r1, [pc, #36]	; (8002b2c <siprintf+0x3c>)
 8002b08:	f853 2b04 	ldr.w	r2, [r3], #4
 8002b0c:	9105      	str	r1, [sp, #20]
 8002b0e:	6800      	ldr	r0, [r0, #0]
 8002b10:	a902      	add	r1, sp, #8
 8002b12:	9301      	str	r3, [sp, #4]
 8002b14:	f000 f868 	bl	8002be8 <_svfiprintf_r>
 8002b18:	2200      	movs	r2, #0
 8002b1a:	9b02      	ldr	r3, [sp, #8]
 8002b1c:	701a      	strb	r2, [r3, #0]
 8002b1e:	b01c      	add	sp, #112	; 0x70
 8002b20:	f85d eb04 	ldr.w	lr, [sp], #4
 8002b24:	b003      	add	sp, #12
 8002b26:	4770      	bx	lr
 8002b28:	2000000c 	.word	0x2000000c
 8002b2c:	ffff0208 	.word	0xffff0208

08002b30 <__ssputs_r>:
 8002b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b34:	688e      	ldr	r6, [r1, #8]
 8002b36:	4682      	mov	sl, r0
 8002b38:	429e      	cmp	r6, r3
 8002b3a:	460c      	mov	r4, r1
 8002b3c:	4690      	mov	r8, r2
 8002b3e:	461f      	mov	r7, r3
 8002b40:	d838      	bhi.n	8002bb4 <__ssputs_r+0x84>
 8002b42:	898a      	ldrh	r2, [r1, #12]
 8002b44:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002b48:	d032      	beq.n	8002bb0 <__ssputs_r+0x80>
 8002b4a:	6825      	ldr	r5, [r4, #0]
 8002b4c:	6909      	ldr	r1, [r1, #16]
 8002b4e:	3301      	adds	r3, #1
 8002b50:	eba5 0901 	sub.w	r9, r5, r1
 8002b54:	6965      	ldr	r5, [r4, #20]
 8002b56:	444b      	add	r3, r9
 8002b58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002b5c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002b60:	106d      	asrs	r5, r5, #1
 8002b62:	429d      	cmp	r5, r3
 8002b64:	bf38      	it	cc
 8002b66:	461d      	movcc	r5, r3
 8002b68:	0553      	lsls	r3, r2, #21
 8002b6a:	d531      	bpl.n	8002bd0 <__ssputs_r+0xa0>
 8002b6c:	4629      	mov	r1, r5
 8002b6e:	f000 fb6f 	bl	8003250 <_malloc_r>
 8002b72:	4606      	mov	r6, r0
 8002b74:	b950      	cbnz	r0, 8002b8c <__ssputs_r+0x5c>
 8002b76:	230c      	movs	r3, #12
 8002b78:	f04f 30ff 	mov.w	r0, #4294967295
 8002b7c:	f8ca 3000 	str.w	r3, [sl]
 8002b80:	89a3      	ldrh	r3, [r4, #12]
 8002b82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b86:	81a3      	strh	r3, [r4, #12]
 8002b88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b8c:	464a      	mov	r2, r9
 8002b8e:	6921      	ldr	r1, [r4, #16]
 8002b90:	f000 face 	bl	8003130 <memcpy>
 8002b94:	89a3      	ldrh	r3, [r4, #12]
 8002b96:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002b9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b9e:	81a3      	strh	r3, [r4, #12]
 8002ba0:	6126      	str	r6, [r4, #16]
 8002ba2:	444e      	add	r6, r9
 8002ba4:	6026      	str	r6, [r4, #0]
 8002ba6:	463e      	mov	r6, r7
 8002ba8:	6165      	str	r5, [r4, #20]
 8002baa:	eba5 0509 	sub.w	r5, r5, r9
 8002bae:	60a5      	str	r5, [r4, #8]
 8002bb0:	42be      	cmp	r6, r7
 8002bb2:	d900      	bls.n	8002bb6 <__ssputs_r+0x86>
 8002bb4:	463e      	mov	r6, r7
 8002bb6:	4632      	mov	r2, r6
 8002bb8:	4641      	mov	r1, r8
 8002bba:	6820      	ldr	r0, [r4, #0]
 8002bbc:	f000 fac6 	bl	800314c <memmove>
 8002bc0:	68a3      	ldr	r3, [r4, #8]
 8002bc2:	2000      	movs	r0, #0
 8002bc4:	1b9b      	subs	r3, r3, r6
 8002bc6:	60a3      	str	r3, [r4, #8]
 8002bc8:	6823      	ldr	r3, [r4, #0]
 8002bca:	4433      	add	r3, r6
 8002bcc:	6023      	str	r3, [r4, #0]
 8002bce:	e7db      	b.n	8002b88 <__ssputs_r+0x58>
 8002bd0:	462a      	mov	r2, r5
 8002bd2:	f000 fbb1 	bl	8003338 <_realloc_r>
 8002bd6:	4606      	mov	r6, r0
 8002bd8:	2800      	cmp	r0, #0
 8002bda:	d1e1      	bne.n	8002ba0 <__ssputs_r+0x70>
 8002bdc:	4650      	mov	r0, sl
 8002bde:	6921      	ldr	r1, [r4, #16]
 8002be0:	f000 face 	bl	8003180 <_free_r>
 8002be4:	e7c7      	b.n	8002b76 <__ssputs_r+0x46>
	...

08002be8 <_svfiprintf_r>:
 8002be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bec:	4698      	mov	r8, r3
 8002bee:	898b      	ldrh	r3, [r1, #12]
 8002bf0:	4607      	mov	r7, r0
 8002bf2:	061b      	lsls	r3, r3, #24
 8002bf4:	460d      	mov	r5, r1
 8002bf6:	4614      	mov	r4, r2
 8002bf8:	b09d      	sub	sp, #116	; 0x74
 8002bfa:	d50e      	bpl.n	8002c1a <_svfiprintf_r+0x32>
 8002bfc:	690b      	ldr	r3, [r1, #16]
 8002bfe:	b963      	cbnz	r3, 8002c1a <_svfiprintf_r+0x32>
 8002c00:	2140      	movs	r1, #64	; 0x40
 8002c02:	f000 fb25 	bl	8003250 <_malloc_r>
 8002c06:	6028      	str	r0, [r5, #0]
 8002c08:	6128      	str	r0, [r5, #16]
 8002c0a:	b920      	cbnz	r0, 8002c16 <_svfiprintf_r+0x2e>
 8002c0c:	230c      	movs	r3, #12
 8002c0e:	603b      	str	r3, [r7, #0]
 8002c10:	f04f 30ff 	mov.w	r0, #4294967295
 8002c14:	e0d1      	b.n	8002dba <_svfiprintf_r+0x1d2>
 8002c16:	2340      	movs	r3, #64	; 0x40
 8002c18:	616b      	str	r3, [r5, #20]
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	9309      	str	r3, [sp, #36]	; 0x24
 8002c1e:	2320      	movs	r3, #32
 8002c20:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002c24:	2330      	movs	r3, #48	; 0x30
 8002c26:	f04f 0901 	mov.w	r9, #1
 8002c2a:	f8cd 800c 	str.w	r8, [sp, #12]
 8002c2e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002dd4 <_svfiprintf_r+0x1ec>
 8002c32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002c36:	4623      	mov	r3, r4
 8002c38:	469a      	mov	sl, r3
 8002c3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002c3e:	b10a      	cbz	r2, 8002c44 <_svfiprintf_r+0x5c>
 8002c40:	2a25      	cmp	r2, #37	; 0x25
 8002c42:	d1f9      	bne.n	8002c38 <_svfiprintf_r+0x50>
 8002c44:	ebba 0b04 	subs.w	fp, sl, r4
 8002c48:	d00b      	beq.n	8002c62 <_svfiprintf_r+0x7a>
 8002c4a:	465b      	mov	r3, fp
 8002c4c:	4622      	mov	r2, r4
 8002c4e:	4629      	mov	r1, r5
 8002c50:	4638      	mov	r0, r7
 8002c52:	f7ff ff6d 	bl	8002b30 <__ssputs_r>
 8002c56:	3001      	adds	r0, #1
 8002c58:	f000 80aa 	beq.w	8002db0 <_svfiprintf_r+0x1c8>
 8002c5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002c5e:	445a      	add	r2, fp
 8002c60:	9209      	str	r2, [sp, #36]	; 0x24
 8002c62:	f89a 3000 	ldrb.w	r3, [sl]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	f000 80a2 	beq.w	8002db0 <_svfiprintf_r+0x1c8>
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	f04f 32ff 	mov.w	r2, #4294967295
 8002c72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002c76:	f10a 0a01 	add.w	sl, sl, #1
 8002c7a:	9304      	str	r3, [sp, #16]
 8002c7c:	9307      	str	r3, [sp, #28]
 8002c7e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002c82:	931a      	str	r3, [sp, #104]	; 0x68
 8002c84:	4654      	mov	r4, sl
 8002c86:	2205      	movs	r2, #5
 8002c88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c8c:	4851      	ldr	r0, [pc, #324]	; (8002dd4 <_svfiprintf_r+0x1ec>)
 8002c8e:	f000 fa41 	bl	8003114 <memchr>
 8002c92:	9a04      	ldr	r2, [sp, #16]
 8002c94:	b9d8      	cbnz	r0, 8002cce <_svfiprintf_r+0xe6>
 8002c96:	06d0      	lsls	r0, r2, #27
 8002c98:	bf44      	itt	mi
 8002c9a:	2320      	movmi	r3, #32
 8002c9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002ca0:	0711      	lsls	r1, r2, #28
 8002ca2:	bf44      	itt	mi
 8002ca4:	232b      	movmi	r3, #43	; 0x2b
 8002ca6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002caa:	f89a 3000 	ldrb.w	r3, [sl]
 8002cae:	2b2a      	cmp	r3, #42	; 0x2a
 8002cb0:	d015      	beq.n	8002cde <_svfiprintf_r+0xf6>
 8002cb2:	4654      	mov	r4, sl
 8002cb4:	2000      	movs	r0, #0
 8002cb6:	f04f 0c0a 	mov.w	ip, #10
 8002cba:	9a07      	ldr	r2, [sp, #28]
 8002cbc:	4621      	mov	r1, r4
 8002cbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002cc2:	3b30      	subs	r3, #48	; 0x30
 8002cc4:	2b09      	cmp	r3, #9
 8002cc6:	d94e      	bls.n	8002d66 <_svfiprintf_r+0x17e>
 8002cc8:	b1b0      	cbz	r0, 8002cf8 <_svfiprintf_r+0x110>
 8002cca:	9207      	str	r2, [sp, #28]
 8002ccc:	e014      	b.n	8002cf8 <_svfiprintf_r+0x110>
 8002cce:	eba0 0308 	sub.w	r3, r0, r8
 8002cd2:	fa09 f303 	lsl.w	r3, r9, r3
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	46a2      	mov	sl, r4
 8002cda:	9304      	str	r3, [sp, #16]
 8002cdc:	e7d2      	b.n	8002c84 <_svfiprintf_r+0x9c>
 8002cde:	9b03      	ldr	r3, [sp, #12]
 8002ce0:	1d19      	adds	r1, r3, #4
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	9103      	str	r1, [sp, #12]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	bfbb      	ittet	lt
 8002cea:	425b      	neglt	r3, r3
 8002cec:	f042 0202 	orrlt.w	r2, r2, #2
 8002cf0:	9307      	strge	r3, [sp, #28]
 8002cf2:	9307      	strlt	r3, [sp, #28]
 8002cf4:	bfb8      	it	lt
 8002cf6:	9204      	strlt	r2, [sp, #16]
 8002cf8:	7823      	ldrb	r3, [r4, #0]
 8002cfa:	2b2e      	cmp	r3, #46	; 0x2e
 8002cfc:	d10c      	bne.n	8002d18 <_svfiprintf_r+0x130>
 8002cfe:	7863      	ldrb	r3, [r4, #1]
 8002d00:	2b2a      	cmp	r3, #42	; 0x2a
 8002d02:	d135      	bne.n	8002d70 <_svfiprintf_r+0x188>
 8002d04:	9b03      	ldr	r3, [sp, #12]
 8002d06:	3402      	adds	r4, #2
 8002d08:	1d1a      	adds	r2, r3, #4
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	9203      	str	r2, [sp, #12]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	bfb8      	it	lt
 8002d12:	f04f 33ff 	movlt.w	r3, #4294967295
 8002d16:	9305      	str	r3, [sp, #20]
 8002d18:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8002dd8 <_svfiprintf_r+0x1f0>
 8002d1c:	2203      	movs	r2, #3
 8002d1e:	4650      	mov	r0, sl
 8002d20:	7821      	ldrb	r1, [r4, #0]
 8002d22:	f000 f9f7 	bl	8003114 <memchr>
 8002d26:	b140      	cbz	r0, 8002d3a <_svfiprintf_r+0x152>
 8002d28:	2340      	movs	r3, #64	; 0x40
 8002d2a:	eba0 000a 	sub.w	r0, r0, sl
 8002d2e:	fa03 f000 	lsl.w	r0, r3, r0
 8002d32:	9b04      	ldr	r3, [sp, #16]
 8002d34:	3401      	adds	r4, #1
 8002d36:	4303      	orrs	r3, r0
 8002d38:	9304      	str	r3, [sp, #16]
 8002d3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d3e:	2206      	movs	r2, #6
 8002d40:	4826      	ldr	r0, [pc, #152]	; (8002ddc <_svfiprintf_r+0x1f4>)
 8002d42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002d46:	f000 f9e5 	bl	8003114 <memchr>
 8002d4a:	2800      	cmp	r0, #0
 8002d4c:	d038      	beq.n	8002dc0 <_svfiprintf_r+0x1d8>
 8002d4e:	4b24      	ldr	r3, [pc, #144]	; (8002de0 <_svfiprintf_r+0x1f8>)
 8002d50:	bb1b      	cbnz	r3, 8002d9a <_svfiprintf_r+0x1b2>
 8002d52:	9b03      	ldr	r3, [sp, #12]
 8002d54:	3307      	adds	r3, #7
 8002d56:	f023 0307 	bic.w	r3, r3, #7
 8002d5a:	3308      	adds	r3, #8
 8002d5c:	9303      	str	r3, [sp, #12]
 8002d5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d60:	4433      	add	r3, r6
 8002d62:	9309      	str	r3, [sp, #36]	; 0x24
 8002d64:	e767      	b.n	8002c36 <_svfiprintf_r+0x4e>
 8002d66:	460c      	mov	r4, r1
 8002d68:	2001      	movs	r0, #1
 8002d6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8002d6e:	e7a5      	b.n	8002cbc <_svfiprintf_r+0xd4>
 8002d70:	2300      	movs	r3, #0
 8002d72:	f04f 0c0a 	mov.w	ip, #10
 8002d76:	4619      	mov	r1, r3
 8002d78:	3401      	adds	r4, #1
 8002d7a:	9305      	str	r3, [sp, #20]
 8002d7c:	4620      	mov	r0, r4
 8002d7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002d82:	3a30      	subs	r2, #48	; 0x30
 8002d84:	2a09      	cmp	r2, #9
 8002d86:	d903      	bls.n	8002d90 <_svfiprintf_r+0x1a8>
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d0c5      	beq.n	8002d18 <_svfiprintf_r+0x130>
 8002d8c:	9105      	str	r1, [sp, #20]
 8002d8e:	e7c3      	b.n	8002d18 <_svfiprintf_r+0x130>
 8002d90:	4604      	mov	r4, r0
 8002d92:	2301      	movs	r3, #1
 8002d94:	fb0c 2101 	mla	r1, ip, r1, r2
 8002d98:	e7f0      	b.n	8002d7c <_svfiprintf_r+0x194>
 8002d9a:	ab03      	add	r3, sp, #12
 8002d9c:	9300      	str	r3, [sp, #0]
 8002d9e:	462a      	mov	r2, r5
 8002da0:	4638      	mov	r0, r7
 8002da2:	4b10      	ldr	r3, [pc, #64]	; (8002de4 <_svfiprintf_r+0x1fc>)
 8002da4:	a904      	add	r1, sp, #16
 8002da6:	f3af 8000 	nop.w
 8002daa:	1c42      	adds	r2, r0, #1
 8002dac:	4606      	mov	r6, r0
 8002dae:	d1d6      	bne.n	8002d5e <_svfiprintf_r+0x176>
 8002db0:	89ab      	ldrh	r3, [r5, #12]
 8002db2:	065b      	lsls	r3, r3, #25
 8002db4:	f53f af2c 	bmi.w	8002c10 <_svfiprintf_r+0x28>
 8002db8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002dba:	b01d      	add	sp, #116	; 0x74
 8002dbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002dc0:	ab03      	add	r3, sp, #12
 8002dc2:	9300      	str	r3, [sp, #0]
 8002dc4:	462a      	mov	r2, r5
 8002dc6:	4638      	mov	r0, r7
 8002dc8:	4b06      	ldr	r3, [pc, #24]	; (8002de4 <_svfiprintf_r+0x1fc>)
 8002dca:	a904      	add	r1, sp, #16
 8002dcc:	f000 f87c 	bl	8002ec8 <_printf_i>
 8002dd0:	e7eb      	b.n	8002daa <_svfiprintf_r+0x1c2>
 8002dd2:	bf00      	nop
 8002dd4:	0800345c 	.word	0x0800345c
 8002dd8:	08003462 	.word	0x08003462
 8002ddc:	08003466 	.word	0x08003466
 8002de0:	00000000 	.word	0x00000000
 8002de4:	08002b31 	.word	0x08002b31

08002de8 <_printf_common>:
 8002de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002dec:	4616      	mov	r6, r2
 8002dee:	4699      	mov	r9, r3
 8002df0:	688a      	ldr	r2, [r1, #8]
 8002df2:	690b      	ldr	r3, [r1, #16]
 8002df4:	4607      	mov	r7, r0
 8002df6:	4293      	cmp	r3, r2
 8002df8:	bfb8      	it	lt
 8002dfa:	4613      	movlt	r3, r2
 8002dfc:	6033      	str	r3, [r6, #0]
 8002dfe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002e02:	460c      	mov	r4, r1
 8002e04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002e08:	b10a      	cbz	r2, 8002e0e <_printf_common+0x26>
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	6033      	str	r3, [r6, #0]
 8002e0e:	6823      	ldr	r3, [r4, #0]
 8002e10:	0699      	lsls	r1, r3, #26
 8002e12:	bf42      	ittt	mi
 8002e14:	6833      	ldrmi	r3, [r6, #0]
 8002e16:	3302      	addmi	r3, #2
 8002e18:	6033      	strmi	r3, [r6, #0]
 8002e1a:	6825      	ldr	r5, [r4, #0]
 8002e1c:	f015 0506 	ands.w	r5, r5, #6
 8002e20:	d106      	bne.n	8002e30 <_printf_common+0x48>
 8002e22:	f104 0a19 	add.w	sl, r4, #25
 8002e26:	68e3      	ldr	r3, [r4, #12]
 8002e28:	6832      	ldr	r2, [r6, #0]
 8002e2a:	1a9b      	subs	r3, r3, r2
 8002e2c:	42ab      	cmp	r3, r5
 8002e2e:	dc28      	bgt.n	8002e82 <_printf_common+0x9a>
 8002e30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002e34:	1e13      	subs	r3, r2, #0
 8002e36:	6822      	ldr	r2, [r4, #0]
 8002e38:	bf18      	it	ne
 8002e3a:	2301      	movne	r3, #1
 8002e3c:	0692      	lsls	r2, r2, #26
 8002e3e:	d42d      	bmi.n	8002e9c <_printf_common+0xb4>
 8002e40:	4649      	mov	r1, r9
 8002e42:	4638      	mov	r0, r7
 8002e44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002e48:	47c0      	blx	r8
 8002e4a:	3001      	adds	r0, #1
 8002e4c:	d020      	beq.n	8002e90 <_printf_common+0xa8>
 8002e4e:	6823      	ldr	r3, [r4, #0]
 8002e50:	68e5      	ldr	r5, [r4, #12]
 8002e52:	f003 0306 	and.w	r3, r3, #6
 8002e56:	2b04      	cmp	r3, #4
 8002e58:	bf18      	it	ne
 8002e5a:	2500      	movne	r5, #0
 8002e5c:	6832      	ldr	r2, [r6, #0]
 8002e5e:	f04f 0600 	mov.w	r6, #0
 8002e62:	68a3      	ldr	r3, [r4, #8]
 8002e64:	bf08      	it	eq
 8002e66:	1aad      	subeq	r5, r5, r2
 8002e68:	6922      	ldr	r2, [r4, #16]
 8002e6a:	bf08      	it	eq
 8002e6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002e70:	4293      	cmp	r3, r2
 8002e72:	bfc4      	itt	gt
 8002e74:	1a9b      	subgt	r3, r3, r2
 8002e76:	18ed      	addgt	r5, r5, r3
 8002e78:	341a      	adds	r4, #26
 8002e7a:	42b5      	cmp	r5, r6
 8002e7c:	d11a      	bne.n	8002eb4 <_printf_common+0xcc>
 8002e7e:	2000      	movs	r0, #0
 8002e80:	e008      	b.n	8002e94 <_printf_common+0xac>
 8002e82:	2301      	movs	r3, #1
 8002e84:	4652      	mov	r2, sl
 8002e86:	4649      	mov	r1, r9
 8002e88:	4638      	mov	r0, r7
 8002e8a:	47c0      	blx	r8
 8002e8c:	3001      	adds	r0, #1
 8002e8e:	d103      	bne.n	8002e98 <_printf_common+0xb0>
 8002e90:	f04f 30ff 	mov.w	r0, #4294967295
 8002e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e98:	3501      	adds	r5, #1
 8002e9a:	e7c4      	b.n	8002e26 <_printf_common+0x3e>
 8002e9c:	2030      	movs	r0, #48	; 0x30
 8002e9e:	18e1      	adds	r1, r4, r3
 8002ea0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002ea4:	1c5a      	adds	r2, r3, #1
 8002ea6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002eaa:	4422      	add	r2, r4
 8002eac:	3302      	adds	r3, #2
 8002eae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002eb2:	e7c5      	b.n	8002e40 <_printf_common+0x58>
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	4622      	mov	r2, r4
 8002eb8:	4649      	mov	r1, r9
 8002eba:	4638      	mov	r0, r7
 8002ebc:	47c0      	blx	r8
 8002ebe:	3001      	adds	r0, #1
 8002ec0:	d0e6      	beq.n	8002e90 <_printf_common+0xa8>
 8002ec2:	3601      	adds	r6, #1
 8002ec4:	e7d9      	b.n	8002e7a <_printf_common+0x92>
	...

08002ec8 <_printf_i>:
 8002ec8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002ecc:	7e0f      	ldrb	r7, [r1, #24]
 8002ece:	4691      	mov	r9, r2
 8002ed0:	2f78      	cmp	r7, #120	; 0x78
 8002ed2:	4680      	mov	r8, r0
 8002ed4:	460c      	mov	r4, r1
 8002ed6:	469a      	mov	sl, r3
 8002ed8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002eda:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002ede:	d807      	bhi.n	8002ef0 <_printf_i+0x28>
 8002ee0:	2f62      	cmp	r7, #98	; 0x62
 8002ee2:	d80a      	bhi.n	8002efa <_printf_i+0x32>
 8002ee4:	2f00      	cmp	r7, #0
 8002ee6:	f000 80d9 	beq.w	800309c <_printf_i+0x1d4>
 8002eea:	2f58      	cmp	r7, #88	; 0x58
 8002eec:	f000 80a4 	beq.w	8003038 <_printf_i+0x170>
 8002ef0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ef4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002ef8:	e03a      	b.n	8002f70 <_printf_i+0xa8>
 8002efa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002efe:	2b15      	cmp	r3, #21
 8002f00:	d8f6      	bhi.n	8002ef0 <_printf_i+0x28>
 8002f02:	a101      	add	r1, pc, #4	; (adr r1, 8002f08 <_printf_i+0x40>)
 8002f04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002f08:	08002f61 	.word	0x08002f61
 8002f0c:	08002f75 	.word	0x08002f75
 8002f10:	08002ef1 	.word	0x08002ef1
 8002f14:	08002ef1 	.word	0x08002ef1
 8002f18:	08002ef1 	.word	0x08002ef1
 8002f1c:	08002ef1 	.word	0x08002ef1
 8002f20:	08002f75 	.word	0x08002f75
 8002f24:	08002ef1 	.word	0x08002ef1
 8002f28:	08002ef1 	.word	0x08002ef1
 8002f2c:	08002ef1 	.word	0x08002ef1
 8002f30:	08002ef1 	.word	0x08002ef1
 8002f34:	08003083 	.word	0x08003083
 8002f38:	08002fa5 	.word	0x08002fa5
 8002f3c:	08003065 	.word	0x08003065
 8002f40:	08002ef1 	.word	0x08002ef1
 8002f44:	08002ef1 	.word	0x08002ef1
 8002f48:	080030a5 	.word	0x080030a5
 8002f4c:	08002ef1 	.word	0x08002ef1
 8002f50:	08002fa5 	.word	0x08002fa5
 8002f54:	08002ef1 	.word	0x08002ef1
 8002f58:	08002ef1 	.word	0x08002ef1
 8002f5c:	0800306d 	.word	0x0800306d
 8002f60:	682b      	ldr	r3, [r5, #0]
 8002f62:	1d1a      	adds	r2, r3, #4
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	602a      	str	r2, [r5, #0]
 8002f68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002f70:	2301      	movs	r3, #1
 8002f72:	e0a4      	b.n	80030be <_printf_i+0x1f6>
 8002f74:	6820      	ldr	r0, [r4, #0]
 8002f76:	6829      	ldr	r1, [r5, #0]
 8002f78:	0606      	lsls	r6, r0, #24
 8002f7a:	f101 0304 	add.w	r3, r1, #4
 8002f7e:	d50a      	bpl.n	8002f96 <_printf_i+0xce>
 8002f80:	680e      	ldr	r6, [r1, #0]
 8002f82:	602b      	str	r3, [r5, #0]
 8002f84:	2e00      	cmp	r6, #0
 8002f86:	da03      	bge.n	8002f90 <_printf_i+0xc8>
 8002f88:	232d      	movs	r3, #45	; 0x2d
 8002f8a:	4276      	negs	r6, r6
 8002f8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f90:	230a      	movs	r3, #10
 8002f92:	485e      	ldr	r0, [pc, #376]	; (800310c <_printf_i+0x244>)
 8002f94:	e019      	b.n	8002fca <_printf_i+0x102>
 8002f96:	680e      	ldr	r6, [r1, #0]
 8002f98:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002f9c:	602b      	str	r3, [r5, #0]
 8002f9e:	bf18      	it	ne
 8002fa0:	b236      	sxthne	r6, r6
 8002fa2:	e7ef      	b.n	8002f84 <_printf_i+0xbc>
 8002fa4:	682b      	ldr	r3, [r5, #0]
 8002fa6:	6820      	ldr	r0, [r4, #0]
 8002fa8:	1d19      	adds	r1, r3, #4
 8002faa:	6029      	str	r1, [r5, #0]
 8002fac:	0601      	lsls	r1, r0, #24
 8002fae:	d501      	bpl.n	8002fb4 <_printf_i+0xec>
 8002fb0:	681e      	ldr	r6, [r3, #0]
 8002fb2:	e002      	b.n	8002fba <_printf_i+0xf2>
 8002fb4:	0646      	lsls	r6, r0, #25
 8002fb6:	d5fb      	bpl.n	8002fb0 <_printf_i+0xe8>
 8002fb8:	881e      	ldrh	r6, [r3, #0]
 8002fba:	2f6f      	cmp	r7, #111	; 0x6f
 8002fbc:	bf0c      	ite	eq
 8002fbe:	2308      	moveq	r3, #8
 8002fc0:	230a      	movne	r3, #10
 8002fc2:	4852      	ldr	r0, [pc, #328]	; (800310c <_printf_i+0x244>)
 8002fc4:	2100      	movs	r1, #0
 8002fc6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002fca:	6865      	ldr	r5, [r4, #4]
 8002fcc:	2d00      	cmp	r5, #0
 8002fce:	bfa8      	it	ge
 8002fd0:	6821      	ldrge	r1, [r4, #0]
 8002fd2:	60a5      	str	r5, [r4, #8]
 8002fd4:	bfa4      	itt	ge
 8002fd6:	f021 0104 	bicge.w	r1, r1, #4
 8002fda:	6021      	strge	r1, [r4, #0]
 8002fdc:	b90e      	cbnz	r6, 8002fe2 <_printf_i+0x11a>
 8002fde:	2d00      	cmp	r5, #0
 8002fe0:	d04d      	beq.n	800307e <_printf_i+0x1b6>
 8002fe2:	4615      	mov	r5, r2
 8002fe4:	fbb6 f1f3 	udiv	r1, r6, r3
 8002fe8:	fb03 6711 	mls	r7, r3, r1, r6
 8002fec:	5dc7      	ldrb	r7, [r0, r7]
 8002fee:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002ff2:	4637      	mov	r7, r6
 8002ff4:	42bb      	cmp	r3, r7
 8002ff6:	460e      	mov	r6, r1
 8002ff8:	d9f4      	bls.n	8002fe4 <_printf_i+0x11c>
 8002ffa:	2b08      	cmp	r3, #8
 8002ffc:	d10b      	bne.n	8003016 <_printf_i+0x14e>
 8002ffe:	6823      	ldr	r3, [r4, #0]
 8003000:	07de      	lsls	r6, r3, #31
 8003002:	d508      	bpl.n	8003016 <_printf_i+0x14e>
 8003004:	6923      	ldr	r3, [r4, #16]
 8003006:	6861      	ldr	r1, [r4, #4]
 8003008:	4299      	cmp	r1, r3
 800300a:	bfde      	ittt	le
 800300c:	2330      	movle	r3, #48	; 0x30
 800300e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003012:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003016:	1b52      	subs	r2, r2, r5
 8003018:	6122      	str	r2, [r4, #16]
 800301a:	464b      	mov	r3, r9
 800301c:	4621      	mov	r1, r4
 800301e:	4640      	mov	r0, r8
 8003020:	f8cd a000 	str.w	sl, [sp]
 8003024:	aa03      	add	r2, sp, #12
 8003026:	f7ff fedf 	bl	8002de8 <_printf_common>
 800302a:	3001      	adds	r0, #1
 800302c:	d14c      	bne.n	80030c8 <_printf_i+0x200>
 800302e:	f04f 30ff 	mov.w	r0, #4294967295
 8003032:	b004      	add	sp, #16
 8003034:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003038:	4834      	ldr	r0, [pc, #208]	; (800310c <_printf_i+0x244>)
 800303a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800303e:	6829      	ldr	r1, [r5, #0]
 8003040:	6823      	ldr	r3, [r4, #0]
 8003042:	f851 6b04 	ldr.w	r6, [r1], #4
 8003046:	6029      	str	r1, [r5, #0]
 8003048:	061d      	lsls	r5, r3, #24
 800304a:	d514      	bpl.n	8003076 <_printf_i+0x1ae>
 800304c:	07df      	lsls	r7, r3, #31
 800304e:	bf44      	itt	mi
 8003050:	f043 0320 	orrmi.w	r3, r3, #32
 8003054:	6023      	strmi	r3, [r4, #0]
 8003056:	b91e      	cbnz	r6, 8003060 <_printf_i+0x198>
 8003058:	6823      	ldr	r3, [r4, #0]
 800305a:	f023 0320 	bic.w	r3, r3, #32
 800305e:	6023      	str	r3, [r4, #0]
 8003060:	2310      	movs	r3, #16
 8003062:	e7af      	b.n	8002fc4 <_printf_i+0xfc>
 8003064:	6823      	ldr	r3, [r4, #0]
 8003066:	f043 0320 	orr.w	r3, r3, #32
 800306a:	6023      	str	r3, [r4, #0]
 800306c:	2378      	movs	r3, #120	; 0x78
 800306e:	4828      	ldr	r0, [pc, #160]	; (8003110 <_printf_i+0x248>)
 8003070:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003074:	e7e3      	b.n	800303e <_printf_i+0x176>
 8003076:	0659      	lsls	r1, r3, #25
 8003078:	bf48      	it	mi
 800307a:	b2b6      	uxthmi	r6, r6
 800307c:	e7e6      	b.n	800304c <_printf_i+0x184>
 800307e:	4615      	mov	r5, r2
 8003080:	e7bb      	b.n	8002ffa <_printf_i+0x132>
 8003082:	682b      	ldr	r3, [r5, #0]
 8003084:	6826      	ldr	r6, [r4, #0]
 8003086:	1d18      	adds	r0, r3, #4
 8003088:	6961      	ldr	r1, [r4, #20]
 800308a:	6028      	str	r0, [r5, #0]
 800308c:	0635      	lsls	r5, r6, #24
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	d501      	bpl.n	8003096 <_printf_i+0x1ce>
 8003092:	6019      	str	r1, [r3, #0]
 8003094:	e002      	b.n	800309c <_printf_i+0x1d4>
 8003096:	0670      	lsls	r0, r6, #25
 8003098:	d5fb      	bpl.n	8003092 <_printf_i+0x1ca>
 800309a:	8019      	strh	r1, [r3, #0]
 800309c:	2300      	movs	r3, #0
 800309e:	4615      	mov	r5, r2
 80030a0:	6123      	str	r3, [r4, #16]
 80030a2:	e7ba      	b.n	800301a <_printf_i+0x152>
 80030a4:	682b      	ldr	r3, [r5, #0]
 80030a6:	2100      	movs	r1, #0
 80030a8:	1d1a      	adds	r2, r3, #4
 80030aa:	602a      	str	r2, [r5, #0]
 80030ac:	681d      	ldr	r5, [r3, #0]
 80030ae:	6862      	ldr	r2, [r4, #4]
 80030b0:	4628      	mov	r0, r5
 80030b2:	f000 f82f 	bl	8003114 <memchr>
 80030b6:	b108      	cbz	r0, 80030bc <_printf_i+0x1f4>
 80030b8:	1b40      	subs	r0, r0, r5
 80030ba:	6060      	str	r0, [r4, #4]
 80030bc:	6863      	ldr	r3, [r4, #4]
 80030be:	6123      	str	r3, [r4, #16]
 80030c0:	2300      	movs	r3, #0
 80030c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80030c6:	e7a8      	b.n	800301a <_printf_i+0x152>
 80030c8:	462a      	mov	r2, r5
 80030ca:	4649      	mov	r1, r9
 80030cc:	4640      	mov	r0, r8
 80030ce:	6923      	ldr	r3, [r4, #16]
 80030d0:	47d0      	blx	sl
 80030d2:	3001      	adds	r0, #1
 80030d4:	d0ab      	beq.n	800302e <_printf_i+0x166>
 80030d6:	6823      	ldr	r3, [r4, #0]
 80030d8:	079b      	lsls	r3, r3, #30
 80030da:	d413      	bmi.n	8003104 <_printf_i+0x23c>
 80030dc:	68e0      	ldr	r0, [r4, #12]
 80030de:	9b03      	ldr	r3, [sp, #12]
 80030e0:	4298      	cmp	r0, r3
 80030e2:	bfb8      	it	lt
 80030e4:	4618      	movlt	r0, r3
 80030e6:	e7a4      	b.n	8003032 <_printf_i+0x16a>
 80030e8:	2301      	movs	r3, #1
 80030ea:	4632      	mov	r2, r6
 80030ec:	4649      	mov	r1, r9
 80030ee:	4640      	mov	r0, r8
 80030f0:	47d0      	blx	sl
 80030f2:	3001      	adds	r0, #1
 80030f4:	d09b      	beq.n	800302e <_printf_i+0x166>
 80030f6:	3501      	adds	r5, #1
 80030f8:	68e3      	ldr	r3, [r4, #12]
 80030fa:	9903      	ldr	r1, [sp, #12]
 80030fc:	1a5b      	subs	r3, r3, r1
 80030fe:	42ab      	cmp	r3, r5
 8003100:	dcf2      	bgt.n	80030e8 <_printf_i+0x220>
 8003102:	e7eb      	b.n	80030dc <_printf_i+0x214>
 8003104:	2500      	movs	r5, #0
 8003106:	f104 0619 	add.w	r6, r4, #25
 800310a:	e7f5      	b.n	80030f8 <_printf_i+0x230>
 800310c:	0800346d 	.word	0x0800346d
 8003110:	0800347e 	.word	0x0800347e

08003114 <memchr>:
 8003114:	4603      	mov	r3, r0
 8003116:	b510      	push	{r4, lr}
 8003118:	b2c9      	uxtb	r1, r1
 800311a:	4402      	add	r2, r0
 800311c:	4293      	cmp	r3, r2
 800311e:	4618      	mov	r0, r3
 8003120:	d101      	bne.n	8003126 <memchr+0x12>
 8003122:	2000      	movs	r0, #0
 8003124:	e003      	b.n	800312e <memchr+0x1a>
 8003126:	7804      	ldrb	r4, [r0, #0]
 8003128:	3301      	adds	r3, #1
 800312a:	428c      	cmp	r4, r1
 800312c:	d1f6      	bne.n	800311c <memchr+0x8>
 800312e:	bd10      	pop	{r4, pc}

08003130 <memcpy>:
 8003130:	440a      	add	r2, r1
 8003132:	4291      	cmp	r1, r2
 8003134:	f100 33ff 	add.w	r3, r0, #4294967295
 8003138:	d100      	bne.n	800313c <memcpy+0xc>
 800313a:	4770      	bx	lr
 800313c:	b510      	push	{r4, lr}
 800313e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003142:	4291      	cmp	r1, r2
 8003144:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003148:	d1f9      	bne.n	800313e <memcpy+0xe>
 800314a:	bd10      	pop	{r4, pc}

0800314c <memmove>:
 800314c:	4288      	cmp	r0, r1
 800314e:	b510      	push	{r4, lr}
 8003150:	eb01 0402 	add.w	r4, r1, r2
 8003154:	d902      	bls.n	800315c <memmove+0x10>
 8003156:	4284      	cmp	r4, r0
 8003158:	4623      	mov	r3, r4
 800315a:	d807      	bhi.n	800316c <memmove+0x20>
 800315c:	1e43      	subs	r3, r0, #1
 800315e:	42a1      	cmp	r1, r4
 8003160:	d008      	beq.n	8003174 <memmove+0x28>
 8003162:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003166:	f803 2f01 	strb.w	r2, [r3, #1]!
 800316a:	e7f8      	b.n	800315e <memmove+0x12>
 800316c:	4601      	mov	r1, r0
 800316e:	4402      	add	r2, r0
 8003170:	428a      	cmp	r2, r1
 8003172:	d100      	bne.n	8003176 <memmove+0x2a>
 8003174:	bd10      	pop	{r4, pc}
 8003176:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800317a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800317e:	e7f7      	b.n	8003170 <memmove+0x24>

08003180 <_free_r>:
 8003180:	b538      	push	{r3, r4, r5, lr}
 8003182:	4605      	mov	r5, r0
 8003184:	2900      	cmp	r1, #0
 8003186:	d040      	beq.n	800320a <_free_r+0x8a>
 8003188:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800318c:	1f0c      	subs	r4, r1, #4
 800318e:	2b00      	cmp	r3, #0
 8003190:	bfb8      	it	lt
 8003192:	18e4      	addlt	r4, r4, r3
 8003194:	f000 f910 	bl	80033b8 <__malloc_lock>
 8003198:	4a1c      	ldr	r2, [pc, #112]	; (800320c <_free_r+0x8c>)
 800319a:	6813      	ldr	r3, [r2, #0]
 800319c:	b933      	cbnz	r3, 80031ac <_free_r+0x2c>
 800319e:	6063      	str	r3, [r4, #4]
 80031a0:	6014      	str	r4, [r2, #0]
 80031a2:	4628      	mov	r0, r5
 80031a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80031a8:	f000 b90c 	b.w	80033c4 <__malloc_unlock>
 80031ac:	42a3      	cmp	r3, r4
 80031ae:	d908      	bls.n	80031c2 <_free_r+0x42>
 80031b0:	6820      	ldr	r0, [r4, #0]
 80031b2:	1821      	adds	r1, r4, r0
 80031b4:	428b      	cmp	r3, r1
 80031b6:	bf01      	itttt	eq
 80031b8:	6819      	ldreq	r1, [r3, #0]
 80031ba:	685b      	ldreq	r3, [r3, #4]
 80031bc:	1809      	addeq	r1, r1, r0
 80031be:	6021      	streq	r1, [r4, #0]
 80031c0:	e7ed      	b.n	800319e <_free_r+0x1e>
 80031c2:	461a      	mov	r2, r3
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	b10b      	cbz	r3, 80031cc <_free_r+0x4c>
 80031c8:	42a3      	cmp	r3, r4
 80031ca:	d9fa      	bls.n	80031c2 <_free_r+0x42>
 80031cc:	6811      	ldr	r1, [r2, #0]
 80031ce:	1850      	adds	r0, r2, r1
 80031d0:	42a0      	cmp	r0, r4
 80031d2:	d10b      	bne.n	80031ec <_free_r+0x6c>
 80031d4:	6820      	ldr	r0, [r4, #0]
 80031d6:	4401      	add	r1, r0
 80031d8:	1850      	adds	r0, r2, r1
 80031da:	4283      	cmp	r3, r0
 80031dc:	6011      	str	r1, [r2, #0]
 80031de:	d1e0      	bne.n	80031a2 <_free_r+0x22>
 80031e0:	6818      	ldr	r0, [r3, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	4401      	add	r1, r0
 80031e6:	6011      	str	r1, [r2, #0]
 80031e8:	6053      	str	r3, [r2, #4]
 80031ea:	e7da      	b.n	80031a2 <_free_r+0x22>
 80031ec:	d902      	bls.n	80031f4 <_free_r+0x74>
 80031ee:	230c      	movs	r3, #12
 80031f0:	602b      	str	r3, [r5, #0]
 80031f2:	e7d6      	b.n	80031a2 <_free_r+0x22>
 80031f4:	6820      	ldr	r0, [r4, #0]
 80031f6:	1821      	adds	r1, r4, r0
 80031f8:	428b      	cmp	r3, r1
 80031fa:	bf01      	itttt	eq
 80031fc:	6819      	ldreq	r1, [r3, #0]
 80031fe:	685b      	ldreq	r3, [r3, #4]
 8003200:	1809      	addeq	r1, r1, r0
 8003202:	6021      	streq	r1, [r4, #0]
 8003204:	6063      	str	r3, [r4, #4]
 8003206:	6054      	str	r4, [r2, #4]
 8003208:	e7cb      	b.n	80031a2 <_free_r+0x22>
 800320a:	bd38      	pop	{r3, r4, r5, pc}
 800320c:	20000230 	.word	0x20000230

08003210 <sbrk_aligned>:
 8003210:	b570      	push	{r4, r5, r6, lr}
 8003212:	4e0e      	ldr	r6, [pc, #56]	; (800324c <sbrk_aligned+0x3c>)
 8003214:	460c      	mov	r4, r1
 8003216:	6831      	ldr	r1, [r6, #0]
 8003218:	4605      	mov	r5, r0
 800321a:	b911      	cbnz	r1, 8003222 <sbrk_aligned+0x12>
 800321c:	f000 f8bc 	bl	8003398 <_sbrk_r>
 8003220:	6030      	str	r0, [r6, #0]
 8003222:	4621      	mov	r1, r4
 8003224:	4628      	mov	r0, r5
 8003226:	f000 f8b7 	bl	8003398 <_sbrk_r>
 800322a:	1c43      	adds	r3, r0, #1
 800322c:	d00a      	beq.n	8003244 <sbrk_aligned+0x34>
 800322e:	1cc4      	adds	r4, r0, #3
 8003230:	f024 0403 	bic.w	r4, r4, #3
 8003234:	42a0      	cmp	r0, r4
 8003236:	d007      	beq.n	8003248 <sbrk_aligned+0x38>
 8003238:	1a21      	subs	r1, r4, r0
 800323a:	4628      	mov	r0, r5
 800323c:	f000 f8ac 	bl	8003398 <_sbrk_r>
 8003240:	3001      	adds	r0, #1
 8003242:	d101      	bne.n	8003248 <sbrk_aligned+0x38>
 8003244:	f04f 34ff 	mov.w	r4, #4294967295
 8003248:	4620      	mov	r0, r4
 800324a:	bd70      	pop	{r4, r5, r6, pc}
 800324c:	20000234 	.word	0x20000234

08003250 <_malloc_r>:
 8003250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003254:	1ccd      	adds	r5, r1, #3
 8003256:	f025 0503 	bic.w	r5, r5, #3
 800325a:	3508      	adds	r5, #8
 800325c:	2d0c      	cmp	r5, #12
 800325e:	bf38      	it	cc
 8003260:	250c      	movcc	r5, #12
 8003262:	2d00      	cmp	r5, #0
 8003264:	4607      	mov	r7, r0
 8003266:	db01      	blt.n	800326c <_malloc_r+0x1c>
 8003268:	42a9      	cmp	r1, r5
 800326a:	d905      	bls.n	8003278 <_malloc_r+0x28>
 800326c:	230c      	movs	r3, #12
 800326e:	2600      	movs	r6, #0
 8003270:	603b      	str	r3, [r7, #0]
 8003272:	4630      	mov	r0, r6
 8003274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003278:	4e2e      	ldr	r6, [pc, #184]	; (8003334 <_malloc_r+0xe4>)
 800327a:	f000 f89d 	bl	80033b8 <__malloc_lock>
 800327e:	6833      	ldr	r3, [r6, #0]
 8003280:	461c      	mov	r4, r3
 8003282:	bb34      	cbnz	r4, 80032d2 <_malloc_r+0x82>
 8003284:	4629      	mov	r1, r5
 8003286:	4638      	mov	r0, r7
 8003288:	f7ff ffc2 	bl	8003210 <sbrk_aligned>
 800328c:	1c43      	adds	r3, r0, #1
 800328e:	4604      	mov	r4, r0
 8003290:	d14d      	bne.n	800332e <_malloc_r+0xde>
 8003292:	6834      	ldr	r4, [r6, #0]
 8003294:	4626      	mov	r6, r4
 8003296:	2e00      	cmp	r6, #0
 8003298:	d140      	bne.n	800331c <_malloc_r+0xcc>
 800329a:	6823      	ldr	r3, [r4, #0]
 800329c:	4631      	mov	r1, r6
 800329e:	4638      	mov	r0, r7
 80032a0:	eb04 0803 	add.w	r8, r4, r3
 80032a4:	f000 f878 	bl	8003398 <_sbrk_r>
 80032a8:	4580      	cmp	r8, r0
 80032aa:	d13a      	bne.n	8003322 <_malloc_r+0xd2>
 80032ac:	6821      	ldr	r1, [r4, #0]
 80032ae:	3503      	adds	r5, #3
 80032b0:	1a6d      	subs	r5, r5, r1
 80032b2:	f025 0503 	bic.w	r5, r5, #3
 80032b6:	3508      	adds	r5, #8
 80032b8:	2d0c      	cmp	r5, #12
 80032ba:	bf38      	it	cc
 80032bc:	250c      	movcc	r5, #12
 80032be:	4638      	mov	r0, r7
 80032c0:	4629      	mov	r1, r5
 80032c2:	f7ff ffa5 	bl	8003210 <sbrk_aligned>
 80032c6:	3001      	adds	r0, #1
 80032c8:	d02b      	beq.n	8003322 <_malloc_r+0xd2>
 80032ca:	6823      	ldr	r3, [r4, #0]
 80032cc:	442b      	add	r3, r5
 80032ce:	6023      	str	r3, [r4, #0]
 80032d0:	e00e      	b.n	80032f0 <_malloc_r+0xa0>
 80032d2:	6822      	ldr	r2, [r4, #0]
 80032d4:	1b52      	subs	r2, r2, r5
 80032d6:	d41e      	bmi.n	8003316 <_malloc_r+0xc6>
 80032d8:	2a0b      	cmp	r2, #11
 80032da:	d916      	bls.n	800330a <_malloc_r+0xba>
 80032dc:	1961      	adds	r1, r4, r5
 80032de:	42a3      	cmp	r3, r4
 80032e0:	6025      	str	r5, [r4, #0]
 80032e2:	bf18      	it	ne
 80032e4:	6059      	strne	r1, [r3, #4]
 80032e6:	6863      	ldr	r3, [r4, #4]
 80032e8:	bf08      	it	eq
 80032ea:	6031      	streq	r1, [r6, #0]
 80032ec:	5162      	str	r2, [r4, r5]
 80032ee:	604b      	str	r3, [r1, #4]
 80032f0:	4638      	mov	r0, r7
 80032f2:	f104 060b 	add.w	r6, r4, #11
 80032f6:	f000 f865 	bl	80033c4 <__malloc_unlock>
 80032fa:	f026 0607 	bic.w	r6, r6, #7
 80032fe:	1d23      	adds	r3, r4, #4
 8003300:	1af2      	subs	r2, r6, r3
 8003302:	d0b6      	beq.n	8003272 <_malloc_r+0x22>
 8003304:	1b9b      	subs	r3, r3, r6
 8003306:	50a3      	str	r3, [r4, r2]
 8003308:	e7b3      	b.n	8003272 <_malloc_r+0x22>
 800330a:	6862      	ldr	r2, [r4, #4]
 800330c:	42a3      	cmp	r3, r4
 800330e:	bf0c      	ite	eq
 8003310:	6032      	streq	r2, [r6, #0]
 8003312:	605a      	strne	r2, [r3, #4]
 8003314:	e7ec      	b.n	80032f0 <_malloc_r+0xa0>
 8003316:	4623      	mov	r3, r4
 8003318:	6864      	ldr	r4, [r4, #4]
 800331a:	e7b2      	b.n	8003282 <_malloc_r+0x32>
 800331c:	4634      	mov	r4, r6
 800331e:	6876      	ldr	r6, [r6, #4]
 8003320:	e7b9      	b.n	8003296 <_malloc_r+0x46>
 8003322:	230c      	movs	r3, #12
 8003324:	4638      	mov	r0, r7
 8003326:	603b      	str	r3, [r7, #0]
 8003328:	f000 f84c 	bl	80033c4 <__malloc_unlock>
 800332c:	e7a1      	b.n	8003272 <_malloc_r+0x22>
 800332e:	6025      	str	r5, [r4, #0]
 8003330:	e7de      	b.n	80032f0 <_malloc_r+0xa0>
 8003332:	bf00      	nop
 8003334:	20000230 	.word	0x20000230

08003338 <_realloc_r>:
 8003338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800333c:	4680      	mov	r8, r0
 800333e:	4614      	mov	r4, r2
 8003340:	460e      	mov	r6, r1
 8003342:	b921      	cbnz	r1, 800334e <_realloc_r+0x16>
 8003344:	4611      	mov	r1, r2
 8003346:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800334a:	f7ff bf81 	b.w	8003250 <_malloc_r>
 800334e:	b92a      	cbnz	r2, 800335c <_realloc_r+0x24>
 8003350:	f7ff ff16 	bl	8003180 <_free_r>
 8003354:	4625      	mov	r5, r4
 8003356:	4628      	mov	r0, r5
 8003358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800335c:	f000 f838 	bl	80033d0 <_malloc_usable_size_r>
 8003360:	4284      	cmp	r4, r0
 8003362:	4607      	mov	r7, r0
 8003364:	d802      	bhi.n	800336c <_realloc_r+0x34>
 8003366:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800336a:	d812      	bhi.n	8003392 <_realloc_r+0x5a>
 800336c:	4621      	mov	r1, r4
 800336e:	4640      	mov	r0, r8
 8003370:	f7ff ff6e 	bl	8003250 <_malloc_r>
 8003374:	4605      	mov	r5, r0
 8003376:	2800      	cmp	r0, #0
 8003378:	d0ed      	beq.n	8003356 <_realloc_r+0x1e>
 800337a:	42bc      	cmp	r4, r7
 800337c:	4622      	mov	r2, r4
 800337e:	4631      	mov	r1, r6
 8003380:	bf28      	it	cs
 8003382:	463a      	movcs	r2, r7
 8003384:	f7ff fed4 	bl	8003130 <memcpy>
 8003388:	4631      	mov	r1, r6
 800338a:	4640      	mov	r0, r8
 800338c:	f7ff fef8 	bl	8003180 <_free_r>
 8003390:	e7e1      	b.n	8003356 <_realloc_r+0x1e>
 8003392:	4635      	mov	r5, r6
 8003394:	e7df      	b.n	8003356 <_realloc_r+0x1e>
	...

08003398 <_sbrk_r>:
 8003398:	b538      	push	{r3, r4, r5, lr}
 800339a:	2300      	movs	r3, #0
 800339c:	4d05      	ldr	r5, [pc, #20]	; (80033b4 <_sbrk_r+0x1c>)
 800339e:	4604      	mov	r4, r0
 80033a0:	4608      	mov	r0, r1
 80033a2:	602b      	str	r3, [r5, #0]
 80033a4:	f7fd f9fc 	bl	80007a0 <_sbrk>
 80033a8:	1c43      	adds	r3, r0, #1
 80033aa:	d102      	bne.n	80033b2 <_sbrk_r+0x1a>
 80033ac:	682b      	ldr	r3, [r5, #0]
 80033ae:	b103      	cbz	r3, 80033b2 <_sbrk_r+0x1a>
 80033b0:	6023      	str	r3, [r4, #0]
 80033b2:	bd38      	pop	{r3, r4, r5, pc}
 80033b4:	20000238 	.word	0x20000238

080033b8 <__malloc_lock>:
 80033b8:	4801      	ldr	r0, [pc, #4]	; (80033c0 <__malloc_lock+0x8>)
 80033ba:	f000 b811 	b.w	80033e0 <__retarget_lock_acquire_recursive>
 80033be:	bf00      	nop
 80033c0:	2000023c 	.word	0x2000023c

080033c4 <__malloc_unlock>:
 80033c4:	4801      	ldr	r0, [pc, #4]	; (80033cc <__malloc_unlock+0x8>)
 80033c6:	f000 b80c 	b.w	80033e2 <__retarget_lock_release_recursive>
 80033ca:	bf00      	nop
 80033cc:	2000023c 	.word	0x2000023c

080033d0 <_malloc_usable_size_r>:
 80033d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80033d4:	1f18      	subs	r0, r3, #4
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	bfbc      	itt	lt
 80033da:	580b      	ldrlt	r3, [r1, r0]
 80033dc:	18c0      	addlt	r0, r0, r3
 80033de:	4770      	bx	lr

080033e0 <__retarget_lock_acquire_recursive>:
 80033e0:	4770      	bx	lr

080033e2 <__retarget_lock_release_recursive>:
 80033e2:	4770      	bx	lr

080033e4 <_init>:
 80033e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033e6:	bf00      	nop
 80033e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033ea:	bc08      	pop	{r3}
 80033ec:	469e      	mov	lr, r3
 80033ee:	4770      	bx	lr

080033f0 <_fini>:
 80033f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033f2:	bf00      	nop
 80033f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033f6:	bc08      	pop	{r3}
 80033f8:	469e      	mov	lr, r3
 80033fa:	4770      	bx	lr
